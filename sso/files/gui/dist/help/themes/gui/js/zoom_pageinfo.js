pageinfo = [[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00010000"],
	[0,0,0,0,"00010000"],
	[0,0,0,0,"00010000"],
	[0,0,0,0,"00010000"],
	[0,0,0,0,"00010000"],
	[0,0,0,0,"00010000"],
	[0,0,0,0,"00010000"],
	[0,0,0,0,"00010000"],
	[0,0,0,0,"00010000"],
	[0,0,0,0,"00010000"],
	[0,0,0,0,"00010000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"10000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00001000"],
	[0,0,0,0,"00001000"],
	[0,0,0,0,"00001000"],
	[0,0,0,0,"00001000"],
	[0,0,0,0,"00001000"],
	[0,0,0,0,"00001000"],
	[0,0,0,0,"00001000"],
	[0,0,0,0,"00001000"],
	[0,0,0,0,"00001000"],
	[0,0,0,0,"00001000"],
	[0,0,0,0,"00001000"],
	[0,0,0,0,"00001000"],
	[0,0,0,0,"00001000"],
	[0,0,0,0,"00001000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000100"],
	[0,0,0,0,"00000100"],
	[0,0,0,0,"00000100"],
	[0,0,0,0,"00000100"],
	[0,0,0,0,"00000100"],
	[0,0,0,0,"00000100"],
	[0,0,0,0,"00000100"],
	[0,0,0,0,"00000100"],
	[0,0,0,0,"00000100"],
	[0,0,0,0,"00000100"],
	[0,0,0,0,"00000100"],
	[0,0,0,0,"00000100"],
	[0,0,0,0,"00000100"],
	[0,0,0,0,"00000100"],
	[0,0,0,0,"00000100"],
	[0,0,0,0,"00000100"],
	[0,0,0,0,"00000100"],
	[0,0,0,0,"00000100"],
	[0,0,0,0,"00000100"],
	[0,0,0,0,"00000100"],
	[0,0,0,0,"00000100"],
	[0,0,0,0,"00000100"],
	[0,0,0,0,"00000100"],
	[0,0,0,0,"00000100"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"01000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00100000"],
	[0,0,0,0,"00100000"],
	[0,0,0,0,"00100000"],
	[0,0,0,0,"00100000"],
	[0,0,0,0,"00100000"],
	[0,0,0,0,"00100000"],
	[0,0,0,0,"00100000"],
	[0,0,0,0,"00100000"],
	[0,0,0,0,"00100000"],
	[0,0,0,0,"00100000"],
	[0,0,0,0,"00100000"],
	[0,0,0,0,"00100000"],
	[0,0,0,0,"00100000"],
	[0,0,0,0,"00100000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000010"],
	[0,0,0,0,"00000010"],
	[0,0,0,0,"00000010"],
	[0,0,0,0,"00000010"],
	[0,0,0,0,"00000010"],
	[0,0,0,0,"00000010"],
	[0,0,0,0,"00000010"],
	[0,0,0,0,"00000010"],
	[0,0,0,0,"00000010"],
	[0,0,0,0,"00000010"],
	[0,0,0,0,"00000010"],
	[0,0,0,0,"00000010"],
	[0,0,0,0,"00000010"],
	[0,0,0,0,"00000010"],
	[0,0,0,0,"00000010"],
	[0,0,0,0,"00000010"],
	[0,0,0,0,"00000010"],
	[0,0,0,0,"00000010"],
	[0,0,0,0,"00000010"],
	[0,0,0,0,"00000010"],
	[0,0,0,0,"00000010"],
	[0,0,0,0,"00000010"],
	[0,0,0,0,"00000010"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"],
	[0,0,0,0,"00000000"]];
pagedata = [ ["ent/administration.html","Administration","Onging configuration maintenence of an existing SaltStack implementation.",""],
["ent/architecture.html","System Architecture","System Architecture SaltStack Enterprise Web Console uses three primary components to manage your SaltStack infrastructure: Rest API PostgreSQL JSON Returner Web application The REST API is used to initiate state and orchestrate runs, transfer files, and authenticate users against the external a...",""],
["ent/cfg-masters.html","Manage Masters","Manage Masters Add a new Salt Master to SaltStack Enterprise Web Console and update existing Salt Masters. Masters are added, removed, and updated by clicking Settings Masters. Detail Description FQDN The hostname of the Salt Master that you want to add. Must be routable by the server running Sa...",""],
["ent/cfg-users.html","Manage User Accounts","Manage User Accounts Each user that manages systems using SaltStack Enterprise Web Console must have the following: An account on the Salt Master with external authentication privileges defined for the commands and systems to which the user has access. A corresponding account in the SaltStack En...",""],
["ent/cloud-providers.html","Cloud Provider Reference","Cloud Provider Reference Getting Started With Aliyun ECS Getting Started With Azure Getting Started With DigitalOcean Getting Started With AWS EC2 Getting Started With GoGrid Getting Started With Google Compute Engine Getting Started With HP Cloud Getting Started With Joyent Getting Started With...",""],
["ent/configuration-management.html","Configuration Management","Configuration Management How Do I Use Salt States? States tutorial, part 1 - Basic Usage States tutorial, part 2 - More Complex States, Requisites States tutorial, part 3 - Templating, Includes, Extends States tutorial, part 4 States Tutorial, Part 5 - Orchestration with Salt Understanding YAML ...",""],
["ent/database.html","Database","Database SaltStack Enterprise Web Console uses a PostgreSQL database that serves as a Master Job Cache and event returner. Salt Masters have this capability built-in using the PostgreSQL JSON Returner. Next ",""],
["ent/deployment.html","Deployment","Deployment Instructions to install additional physical, cloud, or virtual Salt Minions, and to deploy an entire SaltStack implementation. Installation Deployment Architecture Salt Cloud Salt Virt Additional Management Configurations Next ",""],
["ent/events-reactors.html","Event System and Salt Reactors","Event System and Salt Reactors Salt Event System Reactor System Beacons Next ",""],
["ent/fundamentals.html","Salt Fundamentals","SaltStack is a very powerful, flexible and widely used infrastructure automation system.",""],
["ent/gui.html","Using SaltStack Enterprise Web Console","Using SaltStack Enterprise Web Console SaltStack Enterprise Web Console provides a graphical interface that lets you quickly view the Salt Minions that are connected to all Salt Masters in your environment, and then run execution modules, apply states, and view status. View Minions Jobs Targets ...",""],
["ent/jobs-all.html","Manage Jobs","Manage Jobs Jobs can be updated or deleted by hovering over the job name and then clicking the option dropdown that appears to the right of the job name. Next ",""],
["ent/jobs-exemod.html","Run an Execution Module","Run an Execution Module You can use a simple state file to run execution modules on Salt Minions. In a text editor, create a simple state file that uses states.module to call an execution module: disable_nfs: module.run: - name: service.disable - m_name: nfs See salt.states.module Save this file...",""],
["ent/jobs-runner.html","Start a Salt Runner","Start a Salt Runner In SaltStack Enterprise Web Console, click Jobs and then add a new job. Upload a state file and select the Master-side state file file type. Run this job on a Minion that is attached to the Master on which you want the job to run. Even though a Minion is selected, the job run...",""],
["ent/jobs-state.html","Apply a State","Apply a State In SaltStack Enterprise Web Console, click Jobs and then add a new job. Upload a state file and select the Minion-side state file type. After you apply this job, the targeted Salt Minions execute the specified execution module. Next ",""],
["ent/jobs.html","Jobs","Jobs Jobs are single state or orchestrate files that you upload to SaltStack Enterprise Web Console. Uploaded state and orchestrate files can reference files on your Salt Master, as well as other Salt States in the state tree. Job files are distributed to the base environment on each Salt Master...",""],
["ent/masters.html","View Masters","View Masters SaltStack Enterprise Web Console let&#39;s you connect multiple Salt Masters and view all connected Salt Minions in a single view. This lets you deploy jobs to groups of minions even if they are connected to different Salt Masters. Detail Description FQDN The hostname provided during co...",""],
["ent/minions.html","View Salt Minions","View Salt Minions All Salt Minions connected to any Salt Master are displayed in the minion view along with status and configuration. Sort Click a column header to sort . For example, you might sort by key status to find Salt Minions that have unaccepted keys. Filter Filters let you find specifi...",""],
["ent/orchestration.html","Orchestration and Runners","Orchestration and Runners Salt Runners Next ",""],
["ent/remote-execution.html","Remote Execution","Remote Execution Remote execution tutorial Execution Modules Next ",""],
["ent/reports.html","View Reports","View Reports View connection status, key status, and other Minion details. Report Description Minions Connection State Shows the number of Salt Minions that are currently online. Minions Key State Displays the status of all keys that have been received by all Salt Masters. Minions OS Type Displa...",""],
["ent/targets.html","Targets","Targets Targets are static lists of Salt Minions that are created by optionally filtering and then selecting specific systems. Select Minions from the Minions list and then click to populate a quick or saved target. Quick Target A group of saved systems to which you can apply a job, or save as a...",""],
["ent/user-auth.html","Authentication","Authentication Client ACL system Access Control System External Authentication System Next ",""],
["ent/web-frontend.html","Web Application","Web Application SaltStack Enterprise Web Console provides a Web interface using a Django and Nginx Web application. The Web application uses the PostgreSQL database as a back-end for Django. Next ",""],
["enterprise.html","SaltStack Enterprise Web Console","SaltStack Enterprise Web Console SaltStack Enterprise Web Console integrates with your existing SaltStack infrastructure to provide additional management capabilities and reporting. SaltStack Enterprise Web Console uses a REST API and a database connector to seamlessly connect to your existing i...",""],
["faq.html","Frequently Asked Questions","Frequently Asked Questions FAQ Frequently Asked Questions Is Salt open-core? What ports should I open on my firewall? I&#39;m seeing weird behavior (including but not limited to packages not installing their users properly) My script runs every time I run a state.highstate. Why? When I run test.ping...",""],
["glossary.html","Glossary","Glossary Auto-Order The evaluation of states in the order that they are defined in a SLS file. See also: ordering . Bootstrap A stand-alone Salt project which can download and install a Salt master and/or a Salt minion onto a host. See also: salt-bootstrap . Compound Matcher A combination of man...",""],
["home.html","Enterprise Help Center","Enterprise Help Center Contact Support Please visit SaltStack Enterprise Support and login with your support credentials. Other Resources Training SaltStack Blog Videos Get Started SaltStack You are new to SaltStack. Installing Ops You have SaltStack up and running and are ready to simplify mana...",""],
["ref/auth/all/salt.auth.auto.html","salt.auth.auto","salt.auth.auto An \"Always Approved\" eauth interface to test against, not intended for production use auth Syntax salt.auth.auto.auth( username, password ) Details Authenticate! Next ",""],
["ref/auth/all/salt.auth.django.html","salt.auth.django","salt.auth.django Provide authentication using Django Web Framework depends Django Web Framework Django authentication depends on the presence of the django framework in the PYTHONPATH , the Django project&#39;s settings.py file being in the PYTHONPATH and accessible via the DJANGO_SETTINGS_MODULE en...",""],
["ref/auth/all/salt.auth.keystone.html","salt.auth.keystone","salt.auth.keystone Provide authentication using OpenStack Keystone depends keystoneclient Python module auth Syntax salt.auth.keystone.auth( username, password ) Details Try and authenticate get_auth_url Syntax salt.auth.keystone.get_auth_url( ) Details Try and get the URL from the config, else ...",""],
["ref/auth/all/salt.auth.ldap.html","salt.auth.ldap","salt.auth.ldap Provide authentication using simple LDAP binds depends ldap Python module auth Syntax salt.auth.ldap.auth( username, password ) Details Simple LDAP auth groups Syntax salt.auth.ldap.groups( username, **kwargs ) Details Authenticate against an LDAP group Behavior is highly dependen...",""],
["ref/auth/all/salt.auth.mysql.html","salt.auth.mysql","salt.auth.mysql Provide authentication using MySQL. When using MySQL as an authentication backend, you will need to create or use an existing table that has a username and a password column. To get started, create a simple table that holds just a username and a password. The password field will ...",""],
["ref/auth/all/salt.auth.pam.html","salt.auth.pam","salt.auth.pam Authenticate against PAM Provides an authenticate function that will allow the caller to authenticate a user against the Pluggable Authentication Modules (PAM) on the system. Implemented using ctypes, so no compilation is necessary. Note: PAM authentication will not work for the ro...",""],
["ref/auth/all/salt.auth.pki.html","salt.auth.pki","salt.auth.pki Authenticate via a PKI certificate. Note: This module is Experimental and should be used with caution Provides an authenticate function that will allow the caller to authenticate a user via their public cert against a pre-defined Certificate Authority. TODO: Add a &#39;ca_dir&#39; option t...",""],
["ref/auth/all/salt.auth.stormpath_mod.html","salt.auth.stormpath_mod","salt.auth.stormpath_mod Salt Stormpath Authentication Module to provide authentication using Stormpath as the backend. depends stormpath-sdk Python module configuration This module requires the development branch of the stormpath-sdk which can be found here: https://github.com/stormpath/stormpat...",""],
["ref/auth/all/salt.auth.yubico.html","salt.auth.yubico","salt.auth.yubico Provide authentication using YubiKey. New in version 2015.2.0. depends yubico-client Python module To get your YubiKey API key you will need to visit the website below. https://upgrade.yubico.com/getapikey/ The resulting page will show the generated Client ID (aka AuthID or API ...",""],
["ref/auth-modules.html","Authentication Modules (salt.auth)","Authentication Modules (salt.auth) salt.auth.auto salt.auth.django salt.auth.keystone salt.auth.ldap salt.auth.mysql salt.auth.pam salt.auth.pki salt.auth.stormpath_mod salt.auth.yubico Next ",""],
["ref/beacons/all/salt.beacons.btmp.html","salt.beacons.btmp","salt.beacons.btmp Beacon to fire events at failed login of users beacons: btmp: {} beacon Syntax salt.beacons.btmp.beacon( config ) Details Read the last btmp file and return information on the failed logins beacons: btmp: {} Next ",""],
["ref/beacons/all/salt.beacons.diskusage.html","salt.beacons.diskusage","salt.beacons.diskusage Beacon to monitor disk usage. New in version 2015.2.0. beacon Syntax salt.beacons.diskusage.beacon( config ) Details Monitor the disk usage of the minion Specify thresholds for for each load average and only emit a beacon if any of them are exceeded. code_block:: yaml beac...",""],
["ref/beacons/all/salt.beacons.inotify.html","salt.beacons.inotify","salt.beacons.inotify Watch files and translate the changes into salt events beacon Syntax salt.beacons.inotify.beacon( config ) Watch the configured files Example Config beacons: inotify: /path/to/file/or/dir: mask: - open - create - close_write recurse: True auto_add: True Arguments Name Descri...",""],
["ref/beacons/all/salt.beacons.journald.html","salt.beacons.journald","salt.beacons.journald A simple beacon to watch journald for specific entries beacon Syntax salt.beacons.journald.beacon( config ) Details The journald beacon allows for the systemd jornal to be parsed and linked objects to be turned into events. This beacons config will return all sshd jornal en...",""],
["ref/beacons/all/salt.beacons.load.html","salt.beacons.load","salt.beacons.load Beacon to emit system load averages beacon Syntax salt.beacons.load.beacon( config ) Details Emit the load averages of this host. Specify thresholds for for each load average and only emit a beacon if any of them are exceeded. beacons: - load: - 1m: - 0.0 - 2.0 - 5m: - 0.0 - 1....",""],
["ref/beacons/all/salt.beacons.network_info.html","salt.beacons.network_info","salt.beacons.network_info Beacon to monitor statistics from ethernet adapters New in version 2015.2.0. beacon Syntax salt.beacons.network_info.beacon( config ) Details Emit the network statistics of this host. Specify thresholds for for each network stat and only emit a beacon if any of them are...",""],
["ref/beacons/all/salt.beacons.service.html","salt.beacons.service","salt.beacons.service Send events covering service status beacon Syntax salt.beacons.service.beacon( config ) Details Scan for the configured services and fire events Example Config beacons: service: salt-master: mysql: The config above sets up beacons to check for the salt-master and mysql servi...",""],
["ref/beacons/all/salt.beacons.sh.html","salt.beacons.sh","salt.beacons.sh Watch the shell commands being executed actively. This beacon requires strace. beacon Syntax salt.beacons.sh.beacon( config ) Details Scan the shell execve routines. This beacon will convert all login shells beacons: sh: {} Next ",""],
["ref/beacons/all/salt.beacons.twilio_txt_msg.html","salt.beacons.twilio_txt_msg","salt.beacons.twilio_txt_msg Beacon to emit Twilio text messages beacon Syntax salt.beacons.twilio_txt_msg.beacon( config ) Details Emit a dict name \"texts\" whose value is a list of texts. beacons: twilio_txt_msg: account_sid: \" \" auth_token: \" \" twilio_number: \"+15555555555\" poll_interval: 10 po...",""],
["ref/beacons/all/salt.beacons.wtmp.html","salt.beacons.wtmp","salt.beacons.wtmp Beacon to fire events at login of users as registered in the wtmp file beacons: wtmp: {} beacon Syntax salt.beacons.wtmp.beacon( config ) Details Read the last wtmp file and return information on the logins beacons: wtmp: {} Next ",""],
["ref/beacons.html","Beacons (salt.beacons)","Beacons (salt.beacons) salt.beacons.btmp salt.beacons.diskusage salt.beacons.inotify salt.beacons.journald salt.beacons.load salt.beacons.network_info salt.beacons.service salt.beacons.sh salt.beacons.twilio_txt_msg salt.beacons.wtmp Next ",""],
["ref/cli/salt-api.html","salt-api","salt-api Start interfaces used to remotely connect to the salt master Synopsis salt-api Description The Salt API system manages network api connectors for the Salt Master Options Next ",""],
["ref/cli/salt-call.html","salt-call","salt-call Synopsis salt-call [options] Description The salt-call command is used to run module functions locally on a minion instead of executing them from the master. Options Next ",""],
["ref/cli/salt-cloud.html","salt-cloud","salt-cloud Provision virtual machines in the cloud with Salt Synopsis salt-cloud -m /etc/salt/cloud.map salt-cloud -m /etc/salt/cloud.map NAME salt-cloud -m /etc/salt/cloud.map NAME1 NAME2 salt-cloud -p PROFILE NAME salt-cloud -p PROFILE NAME1 NAME2 NAME3 NAME4 NAME5 NAME6 Description Salt Cloud...",""],
["ref/cli/salt-cp.html","salt-cp","salt-cp Copy a file to a set of systems Synopsis salt-cp &#39;*&#39; [ options ] SOURCE DEST salt-cp -E &#39;.*&#39; [ options ] SOURCE DEST salt-cp -G &#39;os:Arch.*&#39; [ options ] SOURCE DEST Description Salt copy copies a local file out to all of the Salt minions matched by the given target. Options See also salt(...",""],
["ref/cli/salt-key.html","salt-key","salt-key Synopsis salt-key [ options ] Description Salt-key executes simple management of Salt server public keys used for authentication. Options See also salt(7) salt-master(1) salt-minion(1) Next ",""],
["ref/cli/salt-master.html","salt-master","salt-master The Salt master daemon, used to control the Salt minions Synopsis salt-master [ options ] Description The master daemon controls the Salt minions Options See also salt(1) salt(7) salt-minion(1) Next ",""],
["ref/cli/salt-minion.html","salt-minion","salt-minion The Salt minion daemon, receives commands from a remote Salt master. Synopsis salt-minion [ options ] Description The Salt minion receives commands from the central Salt master and replies with the results of said commands. Options See also salt(1) salt(7) salt-master(1) Next ",""],
["ref/cli/salt-run.html","salt-run","salt-run Execute a Salt runner Synopsis salt-run RUNNER Description salt-run is the frontend command for executing Salt Runners . Salt runners are simple modules used to execute convenience functions on the master Options See also salt(1) salt-master(1) salt-minion(1) Next ",""],
["ref/cli/salt-ssh.html","salt-ssh","salt-ssh Synopsis salt-ssh &#39;*&#39; [ options ] sys.doc salt-ssh -E &#39;.*&#39; [ options ] sys.doc cmd Description Salt SSH allows for salt routines to be executed using only SSH for transport Options See also salt(7) salt-master(1) salt-minion(1) Next ",""],
["ref/cli/salt-syndic.html","salt-syndic","salt-syndic The Salt syndic daemon, a special minion that passes through commands from a higher master Synopsis salt-syndic [ options ] Description The Salt syndic daemon, a special minion that passes through commands from a higher master. Options See also salt(1) salt-master(1) salt-minion(1) N...",""],
["ref/cli/salt.html","salt","salt Synopsis salt &#39;*&#39; [ options ] sys.doc salt -E &#39;.*&#39; [ options ] sys.doc cmd salt -G &#39;os:Arch.*&#39; [ options ] test.ping salt -C &#39;G@os :Arch.* and webserv* or G@kernel :FreeBSD&#39; [ options ] test.ping Description Salt allows for commands to be executed across a swath of remote systems in paralle...",""],
["ref/clientacl.html","Client ACL system","Client ACL system The salt client ACL system is a means to allow system users other than root to have access to execute select salt commands on minions from the master. The client ACL system is configured in the master configuration file via the client_acl configuration option. Under the client_...",""],
["ref/cloud-modules.html","Cloud Modules (salt.cloud)","Cloud Modules (salt.cloud) salt.cloud.clouds.aliyun salt.cloud.clouds.botocore_aws salt.cloud.clouds.cloudstack salt.cloud.clouds.digital_ocean salt.cloud.clouds.digital_ocean_v2 salt.cloud.clouds.ec2 salt.cloud.clouds.gce salt.cloud.clouds.gogrid salt.cloud.clouds.libcloud_aws salt.cloud.clouds...",""],
["ref/clouds/all/salt.cloud.clouds.aliyun.html","salt.cloud.clouds.aliyun","salt.cloud.clouds.aliyun AliYun ECS Cloud Module New in version 2014.7.0. The Aliyun cloud module is used to control access to the aliyun ECS. http://www.aliyun.com/ Use of this module requires the id and key parameter to be set. Set up the cloud configuration at /etc/salt/cloud.providers or /et...",""],
["ref/clouds/all/salt.cloud.clouds.botocore_aws.html","salt.cloud.clouds.botocore_aws","salt.cloud.clouds.botocore_aws The AWS Cloud Module The AWS cloud module is used to interact with the Amazon Web Services system. This module has been replaced by the EC2 cloud module, and is no longer supported. The documentation shown here is for reference only; it is highly recommended to cha...",""],
["ref/clouds/all/salt.cloud.clouds.cloudstack.html","salt.cloud.clouds.cloudstack","salt.cloud.clouds.cloudstack CloudStack Cloud Module The CloudStack cloud module is used to control access to a CloudStack based Public Cloud. depends libcloud Use of this module requires the apikey , secretkey , host and path parameters. my-cloudstack-cloud-config: apikey: secretkey: host: loca...",""],
["ref/clouds/all/salt.cloud.clouds.digital_ocean.html","salt.cloud.clouds.digital_ocean","salt.cloud.clouds.digital_ocean DigitalOcean Cloud Module The DigitalOcean cloud module is used to control access to the DigitalOcean VPS system. Use of this module only requires the api_key parameter to be set. Set up the cloud configuration at /etc/salt/cloud.providers or /etc/salt/cloud.provi...",""],
["ref/clouds/all/salt.cloud.clouds.digital_ocean_v2.html","salt.cloud.clouds.digital_ocean_v2","salt.cloud.clouds.digital_ocean_v2 DigitalOcean Cloud Module v2 The DigitalOcean cloud module is used to control access to the DigitalOcean VPS system. Use of this module only requires the personal_access_token parameter to be set. Set up the cloud configuration at /etc/salt/cloud.providers or /...",""],
["ref/clouds/all/salt.cloud.clouds.ec2.html","salt.cloud.clouds.ec2","salt.cloud.clouds.ec2 The EC2 Cloud Module The EC2 cloud module is used to interact with the Amazon Elastic Cloud Computing. To use the EC2 cloud module, set up the cloud configuration at /etc/salt/cloud.providers or /etc/salt/cloud.providers.d/ec2.conf : my-ec2-config: # The EC2 API authenticat...",""],
["ref/clouds/all/salt.cloud.clouds.gce.html","salt.cloud.clouds.gce","salt.cloud.clouds.gce Copyright 2013 Google Inc. All Rights Reserved. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless require...",""],
["ref/clouds/all/salt.cloud.clouds.gogrid.html","salt.cloud.clouds.gogrid","salt.cloud.clouds.gogrid GoGrid Cloud Module The GoGrid cloud module. This module interfaces with the gogrid public cloud service. To use Salt Cloud with GoGrid log into the GoGrid web interface and create an api key. Do this by clicking on \"My Account\" and then going to the API Keys tab. depend...",""],
["ref/clouds/all/salt.cloud.clouds.libcloud_aws.html","salt.cloud.clouds.libcloud_aws","salt.cloud.clouds.libcloud_aws The AWS Cloud Module The AWS cloud module is used to interact with the Amazon Web Services system. This module has been replaced by the EC2 cloud module, and is no longer supported. The documentation shown here is for reference only; it is highly recommended to cha...",""],
["ref/clouds/all/salt.cloud.clouds.linode.html","salt.cloud.clouds.linode","salt.cloud.clouds.linode Linode Cloud Module using Apache Libcloud OR linode-python bindings The Linode cloud module is used to control access to the Linode VPS system Use of this module only requires the apikey parameter. depends linode-python = 1.1.1 OR :depends: apache-libcloud = 0.13.2 Note:...",""],
["ref/clouds/all/salt.cloud.clouds.linodepy.html","salt.cloud.clouds.linodepy","salt.cloud.clouds.linodepy Next ",""],
["ref/clouds/all/salt.cloud.clouds.lxc.html","salt.cloud.clouds.lxc","salt.cloud.clouds.lxc Install Salt on an LXC Container New in version 2014.7.0. Please read core config documentation . avail_images Syntax salt.cloud.clouds.lxc.avail_images( ) create Syntax salt.cloud.clouds.lxc.create( vm_, call=None ) Details Create an lxc Container. This function is idempot...",""],
["ref/clouds/all/salt.cloud.clouds.msazure.html","salt.cloud.clouds.msazure","salt.cloud.clouds.msazure Azure Cloud Module The Azure cloud module is used to control access to Microsoft Azure depends Microsoft Azure SDK for Python configuration Required provider parameters: apikey certificate_path subscription_id A Management Certificate (.pem and .crt files) must be creat...",""],
["ref/clouds/all/salt.cloud.clouds.nova.html","salt.cloud.clouds.nova","salt.cloud.clouds.nova OpenStack Nova Cloud Module PLEASE NOTE: This module is currently in early development, and considered to be experimental and unstable. It is not recommended for production use. Unless you are actively developing code in this module, you should use the OpenStack module ins...",""],
["ref/clouds/all/salt.cloud.clouds.opennebula.html","salt.cloud.clouds.opennebula","salt.cloud.clouds.opennebula OpenNebula Cloud Module The OpenNebula cloud module is used to control access to an OpenNebula cloud. Use of this module requires the xml_rpc , user and password parameter to be set. Set up the cloud configuration at /etc/salt/cloud.providers or /etc/salt/cloud.provi...",""],
["ref/clouds/all/salt.cloud.clouds.openstack.html","salt.cloud.clouds.openstack","salt.cloud.clouds.openstack OpenStack Cloud Module OpenStack is an open source project that is in use by a number a cloud providers, each of which have their own ways of using it. depends libcloud - 0.13.2 OpenStack provides a number of ways to authenticate. This module uses password- based auth...",""],
["ref/clouds/all/salt.cloud.clouds.parallels.html","salt.cloud.clouds.parallels","salt.cloud.clouds.parallels Parallels Cloud Module The Parallels cloud module is used to control access to cloud providers using the Parallels VPS system. Set up the cloud configuration at /etc/salt/cloud.providers or /etc/salt/cloud.providers.d/parallels.conf : my-parallels-config: # Parallels ...",""],
["ref/clouds/all/salt.cloud.clouds.proxmox.html","salt.cloud.clouds.proxmox","salt.cloud.clouds.proxmox Proxmox Cloud Module New in version 2014.7.0. The Proxmox cloud module is used to control access to cloud providers using the Proxmox system (KVM / OpenVZ). Set up the cloud configuration at /etc/salt/cloud.providers or /etc/salt/cloud.providers.d/proxmox.conf : my-prox...",""],
["ref/clouds/all/salt.cloud.clouds.pyrax.html","salt.cloud.clouds.pyrax","salt.cloud.clouds.pyrax Pyrax Cloud Module PLEASE NOTE: This module is currently in early development, and considered to be experimental and unstable. It is not recommended for production use. Unless you are actively developing code in this module, you should use the OpenStack module instead. ge...",""],
["ref/clouds/all/salt.cloud.clouds.rackspace.html","salt.cloud.clouds.rackspace","salt.cloud.clouds.rackspace Rackspace Cloud Module The Rackspace cloud module. This module uses the preferred means to set up a libcloud based cloud module and should be used as the general template for setting up additional libcloud based modules. depends libcloud = 0.13.2 Please note that the ...",""],
["ref/clouds/all/salt.cloud.clouds.saltify.html","salt.cloud.clouds.saltify","salt.cloud.clouds.saltify Saltify Module The Saltify module is designed to install Salt on a remote machine, virtual or bare metal, using SSH. This module is useful for provisioning machines which are already installed, but not Salted. Use of this module requires no configuration in the main clo...",""],
["ref/clouds/all/salt.cloud.clouds.softlayer.html","salt.cloud.clouds.softlayer","salt.cloud.clouds.softlayer SoftLayer Cloud Module The SoftLayer cloud module is used to control access to the SoftLayer VPS system. Use of this module only requires the apikey parameter. Set up the cloud configuration at: /etc/salt/cloud.providers or /etc/salt/cloud.providers.d/softlayer.conf :...",""],
["ref/clouds/all/salt.cloud.clouds.softlayer_hw.html","salt.cloud.clouds.softlayer_hw","salt.cloud.clouds.softlayer_hw SoftLayer HW Cloud Module The SoftLayer HW cloud module is used to control access to the SoftLayer hardware cloud system Use of this module only requires the apikey parameter. Set up the cloud configuration at: /etc/salt/cloud.providers or /etc/salt/cloud.providers...",""],
["ref/clouds/all/salt.cloud.clouds.vsphere.html","salt.cloud.clouds.vsphere","salt.cloud.clouds.vsphere vSphere Cloud Module New in version 2014.7.0. The vSphere cloud module is used to control access to VMWare vSphere. depends PySphere Python module Note: Ensure python pysphere module is installed by running following one-liner check. The output should be 0. python -c \"i...",""],
["ref/configuration/logging/handlers/salt.log.handlers.logstash_mod.html","Logstash Logging Handler","Logstash Logging Handler New in version 0.17.0. This module provides some Logstash logging handlers. UDP Logging Handler For versions of Logstash before 1.2.0: In the salt configuration file: logstash_udp_handler: host: 127.0.0.1 port: 9999 version: 0 In the Logstash configuration file: input { ...",""],
["ref/configuration/logging/handlers/salt.log.handlers.sentry_mod.html","Sentry Logging Handler","Sentry Logging Handler New in version 0.17.0. This module provides a Sentry logging handler. Note: Note The Raven library needs to be installed on the system for this logging handler to be available. Configuring the python Sentry client, Raven , should be done under the sentry_handler configurat...",""],
["ref/configuration/master.html","Configuring the Salt Master","Configuring the Salt Master The Salt system is amazingly simple and easy to configure, the two components of the Salt system each have a respective configuration file. The salt-master is configured via the master configuration file, and the salt-minion is configured via the minion configuration ...",""],
["ref/configuration/minion.html","Configuring the Salt Minion","Configuring the Salt Minion The Salt system is amazingly simple and easy to configure. The two components of the Salt system each have a respective configuration file. The salt-master is configured via the master configuration file, and the salt-minion is configured via the minion configuration ...",""],
["ref/configuration/nonroot.html","Running the Salt Master/Minion as an Unprivileged User","Running the Salt Master/Minion as an Unprivileged User While the default setup runs the master and minion as the root user, some may consider it an extra measure of security to run the master as a non-root user. Keep in mind that doing so does not change the master&#39;s capability to access minions...",""],
["ref/exe-modules.html","Execution Modules (salt.modules)","Execution Modules (salt.modules) salt.modules.pkg salt.modules.aliases salt.modules.alternatives salt.modules.apache salt.modules.aptpkg salt.modules.archive salt.modules.artifactory salt.modules.at salt.modules.augeas_cfg salt.modules.aws_sqs salt.modules.blockdev salt.modules.bluez salt.module...",""],
["ref/file_server/all/salt.fileserver.gitfs.html","salt.fileserver.gitfs","salt.fileserver.gitfs Git Fileserver Backend With this backend, branches and tags in a remote git repository are exposed to salt as different environments. To enable, add git to the fileserver_backend option in the Master config file. fileserver_backend: - git As of Salt 2014.7.0, the Git filese...",""],
["ref/file_server/all/salt.fileserver.hgfs.html","salt.fileserver.hgfs","salt.fileserver.hgfs Mercurial Fileserver Backend To enable, add hg to the fileserver_backend option in the Master config file. fileserver_backend: - hg After enabling this backend, branches, bookmarks, and tags in a remote mercurial repository are exposed to salt as different environments. This...",""],
["ref/file_server/all/salt.fileserver.minionfs.html","salt.fileserver.minionfs","salt.fileserver.minionfs Fileserver backend which serves files pushed to the Master The cp.push function allows Minions to push files up to the Master. Using this backend, these pushed files are exposed to other Minions via the Salt fileserver. To enable minionfs, file_recv needs to be set to Tr...",""],
["ref/file_server/all/salt.fileserver.roots.html","salt.fileserver.roots","salt.fileserver.roots The default file server backend This fileserver backend serves files from the Master&#39;s local filesystem. If fileserver_backend is not defined in the Master config file, then this backend is enabled by default. If it is defined then roots must be in the fileserver_backend li...",""],
["ref/file_server/all/salt.fileserver.s3fs.html","salt.fileserver.s3fs","salt.fileserver.s3fs Amazon S3 Fileserver Backend This backend exposes directories in S3 buckets as Salt environments. To enable this backend, add s3 to the fileserver_backend option in the Master config file. fileserver_backend: - s3 S3 credentials must also be set in the master config file: s3...",""],
["ref/file_server/all/salt.fileserver.svnfs.html","salt.fileserver.svnfs","salt.fileserver.svnfs Subversion Fileserver Backend After enabling this backend, branches, and tags in a remote subversion repository are exposed to salt as different environments. To enable this backend, add svn to the fileserver_backend option in the Master config file. fileserver_backend: - s...",""],
["ref/file_server/backends.html","File Server Backends","File Server Backends In Salt 0.12.0, the modular fileserver was introduced. This feature added the ability for the Salt Master to integrate different file server backends. File server backends allow the Salt file server to act as a transparent bridge to external resources. A good example of this...",""],
["ref/file_server/dynamic-modules.html","Dynamic Module Distribution","Dynamic Module Distribution New in version 0.9.5. Salt Python modules can be distributed automatically via the Salt file server. Under the root of any environment defined via the file_roots option on the master server directories corresponding to the type of module can be used. The directories a...",""],
["ref/file_server/file_roots.html","File Server Configuration","File Server Configuration The Salt file server is a high performance file server written in ZeroMQ. It manages large files quickly and with little overhead, and has been optimized to handle small files in an extremely efficient manner. The Salt file server is an environment aware file server. Th...",""],
["ref/fileserver.html","Fileserver (salt.fileserver)","Fileserver (salt.fileserver) salt.fileserver.gitfs salt.fileserver.hgfs salt.fileserver.minionfs salt.fileserver.roots salt.fileserver.s3fs salt.fileserver.svnfs Next ",""],
["ref/log.html","Log Handlers (salt.log)","Log Handlers (salt.log) Logstash Logging Handler Sentry Logging Handler Next ",""],
["ref/modules/all/salt.modules.aliases.html","salt.modules.aliases","salt.modules.aliases Manage the information in the aliases file get_target Syntax salt.modules.aliases.get_target( alias ) Details Return the target associated with an alias CLI Example: salt &#39;*&#39; aliases.get_target alias has_target Syntax salt.modules.aliases.has_target( alias, target ) Details ...",""],
["ref/modules/all/salt.modules.alternatives.html","salt.modules.alternatives","salt.modules.alternatives Support for Alternatives system codeauthor Radek Rada auto Syntax salt.modules.alternatives.auto( name ) Details Trigger alternatives to set the path for as specified by priority. CLI Example: salt &#39;*&#39; alternatives.auto name check_installed Syntax salt.modules.alternati...",""],
["ref/modules/all/salt.modules.apache.html","salt.modules.apache","salt.modules.apache Support for Apache Note: The functions in here are generic functions designed to work with all implementations of Apache. Debian-specific functions have been moved into deb_apache.py, but will still load under the apache namespace when a Debian-based system is detected. confi...",""],
["ref/modules/all/salt.modules.aptpkg.html","salt.modules.aptpkg","salt.modules.aptpkg Support for APT (Advanced Packaging Tool) Note: For virtual package support, either the python-apt or dctrl-tools package must be installed. For repository management, the python-apt package must be installed. autoremove Syntax salt.modules.aptpkg.autoremove( list_only=False ...",""],
["ref/modules/all/salt.modules.archive.html","salt.modules.archive","salt.modules.archive A module to wrap (non-Windows) archive calls New in version 2014.1.0. cmd_unzip Syntax salt.modules.archive.cmd_unzip( zip_file, dest, excludes=None, template=None, options=None, runas=None ) New in version 2015.2.0: In versions 2014.7.x and earlier, this function was known ...",""],
["ref/modules/all/salt.modules.artifactory.html","salt.modules.artifactory","salt.modules.artifactory Module for fetching artifacts from Artifactory Exception: ArtifactoryError Syntax salt.modules.artifactory.ArtifactoryError( value ) get_latest_snapshot Syntax salt.modules.artifactory.get_latest_snapshot( artifactory_url, repository, group_id, artifact_id, packaging, ta...",""],
["ref/modules/all/salt.modules.at.html","salt.modules.at","salt.modules.at Wrapper module for at(1) Also, a &#39;tag&#39; feature has been added to more easily tag jobs. at Syntax salt.modules.at.at( *args, **kwargs ) Details Add a job to the queue. The &#39;timespec&#39; follows the format documented in the at(1) manpage. CLI Example: salt &#39;*&#39; at.at [tag= ] [runas= ] ...",""],
["ref/modules/all/salt.modules.augeas_cfg.html","salt.modules.augeas_cfg","salt.modules.augeas_cfg Manages configuration files via augeas This module requires the augeas Python module. Important: Minimal installations of Debian and Ubuntu have been seen to have packaging bugs with python-augeas, causing the augeas module to fail to import. If the minion has the augeas ...",""],
["ref/modules/all/salt.modules.aws_sqs.html","salt.modules.aws_sqs","salt.modules.aws_sqs Support for the Amazon Simple Queue Service. create_queue Syntax salt.modules.aws_sqs.create_queue( name, region, opts=None, user=None ) Creates a queue with the correct name. Arguments Name Description name Name of the SQS queue to create region Region to create the SQS que...",""],
["ref/modules/all/salt.modules.blockdev.html","salt.modules.blockdev","salt.modules.blockdev Module for managing block devices New in version 2014.7.0. dump Syntax salt.modules.blockdev.dump( device, args=None ) Details Return all contents of dumpe2fs for a specified device CLI Example: .. code-block:: bash salt &#39;*&#39; extfs.dump /dev/sda1 resize2fs Syntax salt.module...",""],
["ref/modules/all/salt.modules.bluez.html","salt.modules.bluez","salt.modules.bluez Support for Bluetooth (using BlueZ in Linux). The following packages are required packages for this module: bluez = 5.7 bluez-libs = 5.7 bluez-utils = 5.7 pybluez = 0.18 address_ Syntax salt.modules.bluez.address_( ) Details Get the many addresses of the Bluetooth adapter CLI ...",""],
["ref/modules/all/salt.modules.boto_asg.html","salt.modules.boto_asg","salt.modules.boto_asg Connection module for Amazon Autoscale Groups New in version 2014.7.0. configuration This module accepts explicit autoscale credentials but can also utilize IAM roles assigned to the instance trough Instance Profiles. Dynamic credentials are then automatically obtained from...",""],
["ref/modules/all/salt.modules.boto_cfn.html","salt.modules.boto_cfn","salt.modules.boto_cfn Connection module for Amazon Cloud Formation configuration This module accepts explicit AWS credentials but can also utilize IAM roles assigned to the instance trough Instance Profiles. Dynamic credentials are then automatically obtained from AWS API and no further configur...",""],
["ref/modules/all/salt.modules.boto_cloudwatch.html","salt.modules.boto_cloudwatch","salt.modules.boto_cloudwatch Connection module for Amazon CloudWatch New in version 2014.7.0. configuration This module accepts explicit credentials but can also utilize IAM roles assigned to the instance trough Instance Profiles. Dynamic credentials are then automatically obtained from AWS API ...",""],
["ref/modules/all/salt.modules.boto_dynamodb.html","salt.modules.boto_dynamodb","salt.modules.boto_dynamodb Connection module for Amazon DynamoDB New in version 2015.2. configuration This module accepts explicit DynamoDB credentials but can also utilize IAM roles assigned to the instance trough Instance Profiles. Dynamic credentials are then automatically obtained from AWS A...",""],
["ref/modules/all/salt.modules.boto_elasticache.html","salt.modules.boto_elasticache","salt.modules.boto_elasticache Connection module for Amazon Elasticache New in version 2014.7.0. configuration This module accepts explicit elasticache credentials but can also utilize IAM roles assigned to the instance trough Instance Profiles. Dynamic credentials are then automatically obtained...",""],
["ref/modules/all/salt.modules.boto_elb.html","salt.modules.boto_elb","salt.modules.boto_elb Connection module for Amazon ELB New in version 2014.7.0. configuration This module accepts explicit elb credentials but can also utilize IAM roles assigned to the instance trough Instance Profiles. Dynamic credentials are then automatically obtained from AWS API and no fur...",""],
["ref/modules/all/salt.modules.boto_iam.html","salt.modules.boto_iam","salt.modules.boto_iam Connection module for Amazon IAM New in version 2014.7.0. configuration This module accepts explicit iam credentials but can also utilize IAM roles assigned to the instance trough Instance Profiles. Dynamic credentials are then automatically obtained from AWS API and no fur...",""],
["ref/modules/all/salt.modules.boto_route53.html","salt.modules.boto_route53","salt.modules.boto_route53 Connection module for Amazon Route53 New in version 2014.7.0. configuration This module accepts explicit route53 credentials but can also utilize IAM roles assigned to the instance trough Instance Profiles. Dynamic credentials are then automatically obtained from AWS AP...",""],
["ref/modules/all/salt.modules.boto_secgroup.html","salt.modules.boto_secgroup","salt.modules.boto_secgroup Connection module for Amazon Security Groups New in version 2014.7.0. configuration This module accepts explicit ec2 credentials but can also utilize IAM roles assigned to the instance trough Instance Profiles. Dynamic credentials are then automatically obtained from A...",""],
["ref/modules/all/salt.modules.boto_sns.html","salt.modules.boto_sns","salt.modules.boto_sns Connection module for Amazon SNS configuration This module accepts explicit sns credentials but can also utilize IAM roles assigned to the instance trough Instance Profiles. Dynamic credentials are then automatically obtained from AWS API and no further configuration is nec...",""],
["ref/modules/all/salt.modules.boto_sqs.html","salt.modules.boto_sqs","salt.modules.boto_sqs Connection module for Amazon SQS New in version 2014.7.0. configuration This module accepts explicit sqs credentials but can also utilize IAM roles assigned to the instance trough Instance Profiles. Dynamic credentials are then automatically obtained from AWS API and no fur...",""],
["ref/modules/all/salt.modules.boto_vpc.html","salt.modules.boto_vpc","salt.modules.boto_vpc Connection module for Amazon VPC New in version 2014.7.0. configuration This module accepts explicit VPC credentials but can also utilize IAM roles assigned to the instance trough Instance Profiles. Dynamic credentials are then automatically obtained from AWS API and no fur...",""],
["ref/modules/all/salt.modules.brew.html","salt.modules.brew","salt.modules.brew Homebrew for Mac OS X install Syntax salt.modules.brew.install( name=None, pkgs=None, taps=None, options=None, **kwargs ) Install the passed package(s) with brew install Arguments Name Description name The name of the formula to be installed. Note that this parameter is ignored...",""],
["ref/modules/all/salt.modules.bridge.html","salt.modules.bridge","salt.modules.bridge Module for gathering and managing bridging information add Syntax salt.modules.bridge.add( br=None ) Details Creates a bridge CLI Example: salt &#39;*&#39; bridge.add br0 addif Syntax salt.modules.bridge.addif( br=None, iface=None ) Details Adds an interface to a bridge CLI Example: ...",""],
["ref/modules/all/salt.modules.bsd_shadow.html","salt.modules.bsd_shadow","salt.modules.bsd_shadow Manage the password database on BSD systems default_hash Syntax salt.modules.bsd_shadow.default_hash( ) Details Returns the default hash used for unset passwords CLI Example: salt &#39;*&#39; shadow.default_hash info Syntax salt.modules.bsd_shadow.info( name ) Details Return info...",""],
["ref/modules/all/salt.modules.btrfs.html","salt.modules.btrfs","salt.modules.btrfs Module for managing BTRFS file systems. add Syntax salt.modules.btrfs.add( mountpoint, *devices, **kwargs ) Details Add a devices to a BTRFS filesystem. General options: nodiscard: Do not perform whole device TRIM force: Force overwrite existing filesystem on the disk CLI Exam...",""],
["ref/modules/all/salt.modules.cassandra.html","salt.modules.cassandra","salt.modules.cassandra Cassandra NoSQL Database Module depends pycassa Cassandra Python adapter configuration The location of the &#39;nodetool&#39; command, host, and thrift port needs to be specified via pillar: cassandra.nodetool: /usr/local/bin/nodetool cassandra.host: localhost cassandra.thrift_por...",""],
["ref/modules/all/salt.modules.chef.html","salt.modules.chef","salt.modules.chef Execute chef in server or solo mode client Syntax salt.modules.chef.client( whyrun=False, localmode=False, logfile=None, **kwargs ) Execute a chef client run and return a dict with the stderr, stdout, return code, and pid. CLI Example: salt &#39;*&#39; chef.client server=https://localh...",""],
["ref/modules/all/salt.modules.chocolatey.html","salt.modules.chocolatey","salt.modules.chocolatey A dead simple module wrapping calls to the Chocolatey package manager ( http://chocolatey.org ) New in version 2014.1.0. bootstrap Syntax salt.modules.chocolatey.bootstrap( force=False ) Download and install the latest version of the Chocolatey package manager via the off...",""],
["ref/modules/all/salt.modules.cloud.html","salt.modules.cloud","salt.modules.cloud Salt-specific interface for calling Salt Cloud directly action Syntax salt.modules.cloud.action( fun=None, cloudmap=None, names=None, provider=None, instance=None, **kwargs ) Details Execute a single action on the given provider/instance CLI Example: salt &#39;*&#39; cloud.action star...",""],
["ref/modules/all/salt.modules.cmdmod.html","salt.modules.cmdmod","salt.modules.cmdmod A module for shelling out Keep in mind that this module is insecure, in that it can give whomever has access to the master root execution access to all salt minions. exec_code Syntax salt.modules.cmdmod.exec_code( lang, code, cwd=None ) Details Pass in two strings, the first ...",""],
["ref/modules/all/salt.modules.composer.html","salt.modules.composer","salt.modules.composer Use composer to install PHP dependencies for a directory did_composer_install Syntax salt.modules.composer.did_composer_install( dir ) Test to see if the vendor directory exists in this directory Arguments Name Description dir Directory location of the composer.json file De...",""],
["ref/modules/all/salt.modules.config.html","salt.modules.config","salt.modules.config Return config information backup_mode Syntax salt.modules.config.backup_mode( backup=&#39;&#39; ) Details Return the backup mode CLI Example: salt &#39;*&#39; config.backup_mode dot_vals Syntax salt.modules.config.dot_vals( value ) Details Pass in a configuration value that should be precede...",""],
["ref/modules/all/salt.modules.container_resource.html","salt.modules.container_resource","salt.modules.container_resource Common resources for LXC and systemd-nspawn containers These functions are not designed to be called directly, but instead from the lxc and the (future) nspawn execution modules. run Syntax salt.modules.container_resource.run( name, cmd, output=None, no_start=Fals...",""],
["ref/modules/all/salt.modules.cp.html","salt.modules.cp","salt.modules.cp Minion side functions for salt-cp cache_dir Syntax salt.modules.cp.cache_dir( path, saltenv=&#39;base&#39;, include_empty=False, include_pat=None, exclude_pat=None, env=None ) Download and cache everything under a directory from the master Arguments Name Description include_pat Glob or r...",""],
["ref/modules/all/salt.modules.cpan.html","salt.modules.cpan","salt.modules.cpan Manage Perl modules using CPAN New in version 2015.2.0. install Syntax salt.modules.cpan.install( module ) Details Install a Perl module from CPAN CLI Example: salt &#39;*&#39; cpan.install Template::Alloy list_ Syntax salt.modules.cpan.list_( ) Details List installed Perl modules, and...",""],
["ref/modules/all/salt.modules.cron.html","salt.modules.cron","salt.modules.cron Work with cron list_tab Syntax salt.modules.cron.list_tab( user ) Details Return the contents of the specified user&#39;s crontab CLI Example: salt &#39;*&#39; cron.list_tab root ls Syntax salt.modules.cron.ls( user ) Details Return the contents of the specified user&#39;s crontab CLI Example:...",""],
["ref/modules/all/salt.modules.cyg.html","salt.modules.cyg","salt.modules.cyg Manage cygwin packages. Module file to accompany the cyg state. check_valid_package Syntax salt.modules.cyg.check_valid_package( package, cyg_arch=&#39;x86_64&#39;, mirrors=None ) Details Check if the package is valid on the given mirrors. install Syntax salt.modules.cyg.install( packag...",""],
["ref/modules/all/salt.modules.daemontools.html","salt.modules.daemontools","salt.modules.daemontools daemontools service module. This module will create daemontools type service watcher. This module is compatible with the service states, so it can be used to maintain services using the provider argument: myservice: service.running: - provider: daemontools available Synt...",""],
["ref/modules/all/salt.modules.darwin_sysctl.html","salt.modules.darwin_sysctl","salt.modules.darwin_sysctl Module for viewing and modifying sysctl parameters assign Syntax salt.modules.darwin_sysctl.assign( name, value ) Assign a single sysctl parameter for this minion Arguments Name Description name The name of the sysctl value to edit. value The sysctl value to apply. Det...",""],
["ref/modules/all/salt.modules.data.html","salt.modules.data","salt.modules.data Manage a local persistent data structure that can hold any arbitrary data specific to the minion cas Syntax salt.modules.data.cas( key, value, old_value ) Details Check and set a value in the minion datastore CLI Example: salt &#39;*&#39; data.cas clear Syntax salt.modules.data.clear( ...",""],
["ref/modules/all/salt.modules.ddns.html","salt.modules.ddns","salt.modules.ddns Support for RFC 2136 dynamic DNS updates. depends dnspython Python module configuration If you want to use TSIG authentication for the server, there are a couple of optional configuration parameters made available to support this (the keyname is only needed if the keyring conta...",""],
["ref/modules/all/salt.modules.deb_apache.html","salt.modules.deb_apache","salt.modules.deb_apache Support for Apache Please note: The functions in here are Debian-specific. Placing them in this separate file will allow them to load only on Debian-based systems, while still loading under the apache namespace. a2dismod Syntax salt.modules.deb_apache.a2dismod( mod ) Deta...",""],
["ref/modules/all/salt.modules.debconfmod.html","salt.modules.debconfmod","salt.modules.debconfmod Support for Debconf get_selections Syntax salt.modules.debconfmod.get_selections( fetchempty=True ) Details Answers to debconf questions for all packages in the following format: {&#39;package&#39;: [[&#39;question&#39;, &#39;type&#39;, &#39;value&#39;], ...]} CLI Example: salt &#39;*&#39; debconf.get_selection...",""],
["ref/modules/all/salt.modules.debian_ip.html","salt.modules.debian_ip","salt.modules.debian_ip The networking module for Debian based distros References: http://www.debian.org/doc/manuals/debian-reference/ch05.en.html apply_network_settings Syntax salt.modules.debian_ip.apply_network_settings( **settings ) Details Apply global network configuration. CLI Example: sal...",""],
["ref/modules/all/salt.modules.debian_service.html","salt.modules.debian_service","salt.modules.debian_service Service support for Debian systems (uses update-rc.d and /sbin/service) available Syntax salt.modules.debian_service.available( name ) Details Returns True if the specified service is available, otherwise returns False . CLI Example: salt &#39;*&#39; service.available sshd di...",""],
["ref/modules/all/salt.modules.defaults.html","salt.modules.defaults","salt.modules.defaults get Syntax salt.modules.defaults.get( key, default=&#39;&#39; ) Details defaults.get is used much like pillar.get except that it will read a default value for a pillar from defaults.json or defaults.yaml files that are stored in the root of a salt formula. When called from the CLI ...",""],
["ref/modules/all/salt.modules.devmap.html","salt.modules.devmap","salt.modules.devmap Device-Mapper module multipath_flush Syntax salt.modules.devmap.multipath_flush( device ) Details Device-Mapper Multipath flush CLI Example: salt &#39;*&#39; devmap.multipath_flush mpath1 multipath_list Syntax salt.modules.devmap.multipath_list( ) Details Device-Mapper Multipath list...",""],
["ref/modules/all/salt.modules.dig.html","salt.modules.dig","salt.modules.dig Compendium of generic DNS utilities A Syntax salt.modules.dig.A( host, nameserver=None ) Details Return the A record for host . Always returns a list. CLI Example: salt ns1 dig.A www.google.com AAAA Syntax salt.modules.dig.AAAA( host, nameserver=None ) Details Return the AAAA re...",""],
["ref/modules/all/salt.modules.disk.html","salt.modules.disk","salt.modules.disk Module for gathering disk information blkid Syntax salt.modules.disk.blkid( device=None ) Details Return block device attributes: UUID, LABEL, etc. This function only works on systems where blkid is available. CLI Example: salt &#39;*&#39; disk.blkid salt &#39;*&#39; disk.blkid /dev/sda inodeu...",""],
["ref/modules/all/salt.modules.djangomod.html","salt.modules.djangomod","salt.modules.djangomod Manage Django sites collectstatic Syntax salt.modules.djangomod.collectstatic( settings_module, bin_env=None, no_post_process=False, ignore=None, dry_run=False, clear=False, link=False, no_default_ignore=False, pythonpath=None, env=None ) Details Collect static files from ...",""],
["ref/modules/all/salt.modules.dnsmasq.html","salt.modules.dnsmasq","salt.modules.dnsmasq Module for managing dnsmasq fullversion Syntax salt.modules.dnsmasq.fullversion( ) Details Shows installed version of dnsmasq and compile options. CLI Example: salt &#39;*&#39; dnsmasq.version get_config Syntax salt.modules.dnsmasq.get_config( config_file=&#39;/etc/dnsmasq.conf&#39; ) Detai...",""],
["ref/modules/all/salt.modules.dnsutil.html","salt.modules.dnsutil","salt.modules.dnsutil Compendium of generic DNS utilities A Syntax salt.modules.dnsutil.A( host, nameserver=None ) Details Return the A record for &#39;host&#39;. Always returns a list. CLI Example: salt ns1 dig.A www.google.com MX Syntax salt.modules.dnsutil.MX( domain, resolve=False, nameserver=None ) ...",""],
["ref/modules/all/salt.modules.dockerio.html","salt.modules.dockerio","salt.modules.dockerio Management of Docker Containers New in version 2014.1.0. Note: The DockerIO integration is still in beta; the API is subject to change General Notes As we use states, we don&#39;t want to be continuously popping dockers, so we will map each container id (or image) with a grain ...",""],
["ref/modules/all/salt.modules.dpkg.html","salt.modules.dpkg","salt.modules.dpkg Support for DEB packages file_dict Syntax salt.modules.dpkg.file_dict( *packages ) Details List the files that belong to a package, grouped by package. Not specifying any packages will return a list of _every_ file on the system&#39;s package database (not generally recommended). C...",""],
["ref/modules/all/salt.modules.drac.html","salt.modules.drac","salt.modules.drac Manage Dell DRAC change_password Syntax salt.modules.drac.change_password( username, password, uid=None ) Details Change users password CLI Example: salt dell drac.change_password [USERNAME] [PASSWORD] [UID - optional] salt dell drac.change_password diana secret create_user Syn...",""],
["ref/modules/all/salt.modules.drbd.html","salt.modules.drbd","salt.modules.drbd DRBD administration module overview Syntax salt.modules.drbd.overview( ) Details Show status of the DRBD devices CLI Example: salt &#39;*&#39; drbd.overview Next ",""],
["ref/modules/all/salt.modules.ebuild.html","salt.modules.ebuild","salt.modules.ebuild Support for Portage optdepends portage Python adapter For now all package names MUST include the package category, i.e. &#39;vim&#39; will not work, &#39;app-editors/vim&#39; will. check_db Syntax salt.modules.ebuild.check_db( *names, **kwargs ) Details New in version 0.17.0. Returns a dict ...",""],
["ref/modules/all/salt.modules.eix.html","salt.modules.eix","salt.modules.eix Support for Eix sync Syntax salt.modules.eix.sync( ) Details Sync portage/overlay trees and update the eix database CLI Example: salt &#39;*&#39; eix.sync update Syntax salt.modules.eix.update( ) Details Update the eix database CLI Example: salt &#39;*&#39; eix.update Next ",""],
["ref/modules/all/salt.modules.environ.html","salt.modules.environ","salt.modules.environ Support for getting and setting the environment variables of the current salt process. get Syntax salt.modules.environ.get( key, default=&#39;&#39; ) Get a single salt process environment variable. Arguments Name Description key String used as the key for environment lookup. default...",""],
["ref/modules/all/salt.modules.eselect.html","salt.modules.eselect","salt.modules.eselect Support for eselect, Gentoo&#39;s configuration and management tool. exec_action Syntax salt.modules.eselect.exec_action( module, action, module_parameter=None, action_parameter=None, state_only=False ) Execute an arbitrary action on a module. Arguments Name Description module n...",""],
["ref/modules/all/salt.modules.etcd_mod.html","salt.modules.etcd_mod","salt.modules.etcd_mod Execution module to work with etcd depends python-etcd In order to use an etcd server, a profile should be created in the master configuration file: my_etd_config: etcd.host: 127.0.0.1 etcd.port: 4001 It is technically possible to configure etcd without using a profile, but...",""],
["ref/modules/all/salt.modules.event.html","salt.modules.event","salt.modules.event Use the Salt Event System to fire events from the master to the minion and vice-versa. fire Syntax salt.modules.event.fire( data, tag ) Details Fire an event on the local minion event bus. Data must be formed as a dict. CLI Example: salt &#39;*&#39; event.fire &#39;{\"data\":\"my event data\"...",""],
["ref/modules/all/salt.modules.extfs.html","salt.modules.extfs","salt.modules.extfs Module for managing ext2/3/4 file systems attributes Syntax salt.modules.extfs.attributes( device, args=None ) Details Return attributes from dumpe2fs for a specified device CLI Example: salt &#39;*&#39; extfs.attributes /dev/sda1 blocks Syntax salt.modules.extfs.blocks( device, args=...",""],
["ref/modules/all/salt.modules.file.html","salt.modules.file","salt.modules.file Manage information about regular files, directories, and special files on the minion, set/read user, group, mode, and data access Syntax salt.modules.file.access( path, mode ) Details New in version 2014.1.0. Test whether the Salt process has the specified access to the file. O...",""],
["ref/modules/all/salt.modules.firewalld.html","salt.modules.firewalld","salt.modules.firewalld Support for firewalld add_service Syntax salt.modules.firewalld.add_service( name, zone=None, permanent=True ) Details Add a service for zone. If zone is omitted, default zone will be used. CLI Example: To assign a service to a specific zone default_zone Syntax salt.module...",""],
["ref/modules/all/salt.modules.freebsd_sysctl.html","salt.modules.freebsd_sysctl","salt.modules.freebsd_sysctl Module for viewing and modifying sysctl parameters assign Syntax salt.modules.freebsd_sysctl.assign( name, value ) Details Assign a single sysctl parameter for this minion CLI Example: salt &#39;*&#39; sysctl.assign net.inet.icmp.icmplim 50 get Syntax salt.modules.freebsd_sys...",""],
["ref/modules/all/salt.modules.freebsdjail.html","salt.modules.freebsdjail","salt.modules.freebsdjail The jail module for FreeBSD fstab Syntax salt.modules.freebsdjail.fstab( jail ) Details Display contents of a fstab(5) file defined in specified jail&#39;s configuration. If no file is defined, return False. CLI Example: salt &#39;*&#39; jail.fstab get_enabled Syntax salt.modules.fr...",""],
["ref/modules/all/salt.modules.freebsdkmod.html","salt.modules.freebsdkmod","salt.modules.freebsdkmod Module to manage FreeBSD kernel modules available Syntax salt.modules.freebsdkmod.available( ) Details Return a list of all available kernel modules CLI Example: salt &#39;*&#39; kmod.available check_available Syntax salt.modules.freebsdkmod.check_available( mod ) Details Check ...",""],
["ref/modules/all/salt.modules.freebsdpkg.html","salt.modules.freebsdpkg","salt.modules.freebsdpkg Remote package support using pkg_add(1) Important: This module has been completely rewritten. Up to and including version 0.17.0, it supported pkg_add(1) , but checked for the existence of a pkgng local database and, if found, would provide some of pkgng&#39;s functionality. ...",""],
["ref/modules/all/salt.modules.freebsdports.html","salt.modules.freebsdports","salt.modules.freebsdports Install software from the FreeBSD ports(7) system New in version 2014.1.0. This module allows you to install ports using BATCH=yes to bypass configuration prompts. It is recommended to use the ports state to install ports, but it it also possible to use this module excl...",""],
["ref/modules/all/salt.modules.freebsdservice.html","salt.modules.freebsdservice","salt.modules.freebsdservice The service module for FreeBSD available Syntax salt.modules.freebsdservice.available( name ) Details Check that the given service is available. CLI Example: salt &#39;*&#39; service.available sshd disable Syntax salt.modules.freebsdservice.disable( name, **kwargs ) Details D...",""],
["ref/modules/all/salt.modules.fsutils.html","salt.modules.fsutils","salt.modules.fsutils Run-time utilities Next ",""],
["ref/modules/all/salt.modules.gem.html","salt.modules.gem","salt.modules.gem Manage ruby gems. install Syntax salt.modules.gem.install( gems, ruby=None, gem_bin=None, runas=None, version=None, rdoc=False, ri=False, pre_releases=False, proxy=None ) Installs one or several gems. Arguments Name Description gems The gems to install gem_bin Full path to gem b...",""],
["ref/modules/all/salt.modules.genesis.html","salt.modules.genesis","salt.modules.genesis Module for managing container and VM images New in version 2014.7.0. avail_platforms Syntax salt.modules.genesis.avail_platforms( ) Details Return which platforms are available CLI Example: salt myminion genesis.avail_platforms bootstrap Syntax salt.modules.genesis.bootstrap...",""],
["ref/modules/all/salt.modules.gentoo_service.html","salt.modules.gentoo_service","salt.modules.gentoo_service Top level package command wrapper, used to translate the os detected by grains to the correct service manager available Syntax salt.modules.gentoo_service.available( name ) Details Returns True if the specified service is available, otherwise returns False . CLI Examp...",""],
["ref/modules/all/salt.modules.gentoolkitmod.html","salt.modules.gentoolkitmod","salt.modules.gentoolkitmod Support for Gentoolkit eclean_dist Syntax salt.modules.gentoolkitmod.eclean_dist( destructive=False, package_names=False, size_limit=0, time_limit=0, fetch_restricted=False, exclude_file=&#39;/etc/eclean/distfiles.exclude&#39; ) Clean obsolete portage sources Arguments Name De...",""],
["ref/modules/all/salt.modules.git.html","salt.modules.git","salt.modules.git Support for the Git SCM add Syntax salt.modules.git.add( cwd, file_name, user=None, opts=None ) add a file to git Arguments Name Description cwd The path to the Git repository file_name Path to the file in the cwd opts Any additional options to add to the command line user Run g...",""],
["ref/modules/all/salt.modules.glance.html","salt.modules.glance","salt.modules.glance Module for handling openstack glance calls. optdepends glanceclient Python adapter configuration This module is not usable until the following are specified either in a pillar or in the minion&#39;s config file: keystone.user: admin keystone.password: verybadpass keystone.tenant:...",""],
["ref/modules/all/salt.modules.glusterfs.html","salt.modules.glusterfs","salt.modules.glusterfs Manage a glusterfs pool add_volume_bricks Syntax salt.modules.glusterfs.add_volume_bricks( name, bricks ) Add brick(s) to an existing volume Arguments Name Description name Volume name bricks List of bricks to add to the volume create Syntax salt.modules.glusterfs.create( ...",""],
["ref/modules/all/salt.modules.gnomedesktop.html","salt.modules.gnomedesktop","salt.modules.gnomedesktop GNOME implementations get Syntax salt.modules.gnomedesktop.get( schema=None, key=None, user=None, **kwargs ) Details Get key in a particular GNOME schema CLI Example: salt &#39;*&#39; gnome.get user= schema=org.gnome.desktop.screensaver key=idle-activation-enabled getClockForma...",""],
["ref/modules/all/salt.modules.gpg.html","salt.modules.gpg","salt.modules.gpg Manage a GPG keychains, add keys, create keys, retrieve keys from keyservers. Sign, encrypt and sign &#38; encrypt text and files. New in version 2015.2.0. Note: The python-gnupg library and gpg binary are required to be installed. create_key Syntax salt.modules.gpg.create_key( key_...",""],
["ref/modules/all/salt.modules.grains.html","salt.modules.grains","salt.modules.grains Return/control aspects of the grains data append Syntax salt.modules.grains.append( key, val, convert=False ) New in version 0.17.0. Append a value to a list in the grains config file. If the grain doesn&#39;t exist, the grain key is added and the value is appended to the new gra...",""],
["ref/modules/all/salt.modules.groupadd.html","salt.modules.groupadd","salt.modules.groupadd Manage groups on Linux, OpenBSD and NetBSD add Syntax salt.modules.groupadd.add( name, gid=None, system=False ) Details Add the specified group CLI Example: salt &#39;*&#39; group.add foo 3456 adduser Syntax salt.modules.groupadd.adduser( name, username ) Details Add a user in the ...",""],
["ref/modules/all/salt.modules.grub_legacy.html","salt.modules.grub_legacy","salt.modules.grub_legacy Support for GRUB Legacy conf Syntax salt.modules.grub_legacy.conf( ) Details Parse GRUB conf file CLI Example: salt &#39;*&#39; grub.conf version Syntax salt.modules.grub_legacy.version( ) Details Return server version from grub --version CLI Example: salt &#39;*&#39; grub.version Next ",""],
["ref/modules/all/salt.modules.guestfs.html","salt.modules.guestfs","salt.modules.guestfs Interact with virtual machine images via libguestfs depends libguestfs mount Syntax salt.modules.guestfs.mount( location, access=&#39;rw&#39; ) Details Mount an image CLI Example: salt &#39;*&#39; guest.mount /srv/images/fedora.qcow Next ",""],
["ref/modules/all/salt.modules.hadoop.html","salt.modules.hadoop","salt.modules.hadoop Support for hadoop maintainer Yann Jouanin maturity new depends platform linux dfs Syntax salt.modules.hadoop.dfs( command=None, *args ) Details Execute a command on DFS CLI Example: salt &#39;*&#39; hadoop.dfs ls / dfs_absent Syntax salt.modules.hadoop.dfs_absent( path ) Details Che...",""],
["ref/modules/all/salt.modules.haproxyconn.html","salt.modules.haproxyconn","salt.modules.haproxyconn Support for haproxy New in version 2014.7.0. disable_server Syntax salt.modules.haproxyconn.disable_server( name, backend, socket=&#39;/var/run/haproxy.sock&#39; ) Disable server in haproxy. Arguments Name Description name Server to disable backend haproxy backend socket haproxy...",""],
["ref/modules/all/salt.modules.hashutil.html","salt.modules.hashutil","salt.modules.hashutil A collection of hashing and encoding functions base64_decodestring Syntax salt.modules.hashutil.base64_decodestring( instr ) Details Decode a base64-encoded string New in version 2014.7.0. CLI Example: salt &#39;*&#39; hashutil.base64_decodestring &#39;Z2V0IHNhbHRlZA==\\n&#39; base64_encode...",""],
["ref/modules/all/salt.modules.hg.html","salt.modules.hg","salt.modules.hg Support for the Mercurial SCM archive Syntax salt.modules.hg.archive( cwd, output, rev=&#39;tip&#39;, fmt=None, prefix=None, user=None ) Export a tarball from the repository Arguments Name Description cwd The path to the Mercurial repository output The path to the archive tarball rev: ti...",""],
["ref/modules/all/salt.modules.hosts.html","salt.modules.hosts","salt.modules.hosts Manage the information in the hosts file add_host Syntax salt.modules.hosts.add_host( ip, alias ) Details Add a host to an existing entry, if the entry is not in place then create it with the given host CLI Example: salt &#39;*&#39; hosts.add_host get_alias Syntax salt.modules.hosts.g...",""],
["ref/modules/all/salt.modules.htpasswd.html","salt.modules.htpasswd","salt.modules.htpasswd Support for htpasswd command New in version 2014.1.0. The functions here will load inside the webutil module. This allows other functions that don&#39;t use htpasswd to use the webutil module name. useradd Syntax salt.modules.htpasswd.useradd( pwfile, user, password, opts=&#39;&#39; ) ...",""],
["ref/modules/all/salt.modules.http.html","salt.modules.http","salt.modules.http Module for making various web calls. Primarily designed for webhooks and the like, but also useful for basic http testing. New in version 2015.2. query Syntax salt.modules.http.query( url, **kwargs ) Details Query a resource, and decode the return data CLI Example: salt &#39;*&#39; htt...",""],
["ref/modules/all/salt.modules.ilo.html","salt.modules.ilo","salt.modules.ilo Manage HP ILO depends hponcfg (SmartStart Scripting Toolkit Linux Edition) change_password Syntax salt.modules.ilo.change_password( username, password ) Details Reset a users password CLI Example: salt &#39;*&#39; ilo.change_password damianMyerscough change_username Syntax salt.modules....",""],
["ref/modules/all/salt.modules.img.html","salt.modules.img","salt.modules.img Virtual machine image management tools bootstrap Syntax salt.modules.img.bootstrap( location, size, fmt ) HIGHLY EXPERIMENTAL Bootstrap a virtual machine image Arguments Name Description location: The location to create the image size: The size of the image to create in megabyte...",""],
["ref/modules/all/salt.modules.incron.html","salt.modules.incron","salt.modules.incron Work with incron list_tab Syntax salt.modules.incron.list_tab( user ) Details Return the contents of the specified user&#39;s incrontab CLI Example: salt &#39;*&#39; incron.list_tab root ls Syntax salt.modules.incron.ls( user ) Details Return the contents of the specified user&#39;s incronta...",""],
["ref/modules/all/salt.modules.influx.html","salt.modules.influx","salt.modules.influx InfluxDB - A distributed time series database Module to provide InfluxDB compatibility to Salt (compatible with InfluxDB version 0.5+) New in version 2014.7.0. depends influxdb Python module configuration This module accepts connection configuration details either as paramete...",""],
["ref/modules/all/salt.modules.ini_manage.html","salt.modules.ini_manage","salt.modules.ini_manage Edit ini files maintainer maturity new depends re platform all Use section as DEFAULT_IMPLICIT if your ini file does not have any section (for example /etc/sysctl.conf) get_option Syntax salt.modules.ini_manage.get_option( file_name, section, option ) Details Get value of...",""],
["ref/modules/all/salt.modules.introspect.html","salt.modules.introspect","salt.modules.introspect Functions to perform introspection on a minion, and return data in a format usable by Salt States enabled_service_owners Syntax salt.modules.introspect.enabled_service_owners( ) Details Return which packages own each of the services that are currently enabled. CLI Example...",""],
["ref/modules/all/salt.modules.ipset.html","salt.modules.ipset","salt.modules.ipset Support for ipset add Syntax salt.modules.ipset.add( set=None, entry=None, family=&#39;ipv4&#39;, **kwargs ) Details Append an entry to the specified set. CLI Example: salt &#39;*&#39; ipset.add setname 192.168.1.26 salt &#39;*&#39; ipset.add setname 192.168.0.3,AA:BB:CC:DD:EE:FF check Syntax salt.mo...",""],
["ref/modules/all/salt.modules.iptables.html","salt.modules.iptables","salt.modules.iptables Support for iptables append Syntax salt.modules.iptables.append( table=&#39;filter&#39;, chain=None, rule=None, family=&#39;ipv4&#39; ) Append a rule to the specified table/chain. Arguments Name Description This function accepts a rule in a standard iptables command format, starting with t...",""],
["ref/modules/all/salt.modules.jboss7.html","salt.modules.jboss7","salt.modules.jboss7 Module for managing JBoss AS 7 through the CLI interface. In order to run each function, jboss_config dictionary with the following properties must be passed: cli_path: the path to jboss-cli script, for example: &#39;/opt/jboss/jboss-7.0/bin/jboss-cli.sh&#39; controller: the ip addre...",""],
["ref/modules/all/salt.modules.jboss7_cli.html","salt.modules.jboss7_cli","salt.modules.jboss7_cli Module for low-level interaction with JbossAS7 through CLI. This module exposes two ways of interaction with the CLI, either through commands or operations. Note: Following JBoss documentation ( https://developer.jboss.org/wiki/CommandLineInterface ): \"Operations are cons...",""],
["ref/modules/all/salt.modules.junos.html","salt.modules.junos","salt.modules.junos Module for interfacing to Junos devices ALPHA QUALITY code. commit Syntax salt.modules.junos.commit( ) diff Syntax salt.modules.junos.diff( ) facts_refresh Syntax salt.modules.junos.facts_refresh( ) Details Reload the facts dictionary from the device. Usually only needed if th...",""],
["ref/modules/all/salt.modules.key.html","salt.modules.key","salt.modules.key Functions to view the minion&#39;s public key information finger Syntax salt.modules.key.finger( ) Details Return the minion&#39;s public key fingerprint CLI Example: salt &#39;*&#39; key.finger finger_master Syntax salt.modules.key.finger_master( ) Details Return the fingerprint of the master&#39;...",""],
["ref/modules/all/salt.modules.keyboard.html","salt.modules.keyboard","salt.modules.keyboard Module for managing keyboards on supported POSIX-like systems using systemd, or such as Redhat, Debian and Gentoo. get_sys Syntax salt.modules.keyboard.get_sys( ) Details Get current system keyboard setting CLI Example: salt &#39;*&#39; keyboard.get_sys get_x Syntax salt.modules.ke...",""],
["ref/modules/all/salt.modules.keystone.html","salt.modules.keystone","salt.modules.keystone Module for handling openstack keystone calls. optdepends keystoneclient Python adapter configuration This module is not usable until the following are specified either in a pillar or in the minion&#39;s config file: keystone.user: admin keystone.password: verybadpass keystone.t...",""],
["ref/modules/all/salt.modules.kmod.html","salt.modules.kmod","salt.modules.kmod Module to manage Linux kernel modules available Syntax salt.modules.kmod.available( ) Details Return a list of all available kernel modules CLI Example: salt &#39;*&#39; kmod.available check_available Syntax salt.modules.kmod.check_available( mod ) Details Check to see if the specified...",""],
["ref/modules/all/salt.modules.launchctl.html","salt.modules.launchctl","salt.modules.launchctl Module for the management of MacOS systems that use launchd/launchctl depends plistlib Python module available Syntax salt.modules.launchctl.available( job_label ) Details Check that the given service is available. CLI Example: salt &#39;*&#39; service.available com.openssh.sshd g...",""],
["ref/modules/all/salt.modules.layman.html","salt.modules.layman","salt.modules.layman Support for Layman add Syntax salt.modules.layman.add( overlay ) Details Add the given overlay from the cached remote list to your locally installed overlays. Specify &#39;ALL&#39; to add all overlays from the remote list. Return a list of the new overlay(s) added: CLI Example: salt ...",""],
["ref/modules/all/salt.modules.ldapmod.html","salt.modules.ldapmod","salt.modules.ldapmod Salt interface to LDAP commands depends ldap Python module configuration In order to connect to LDAP, certain configuration is required in the minion config on the LDAP server. The minimum configuration items that must be set are: ldap.basedn: dc=acme,dc=com (example values,...",""],
["ref/modules/all/salt.modules.linux_acl.html","salt.modules.linux_acl","salt.modules.linux_acl Support for Linux File Access Control Lists delfacl Syntax salt.modules.linux_acl.delfacl( acl_type, acl_name, *args, **kwargs ) Details Remove specific FACL from the specified file(s) CLI Examples: salt &#39;*&#39; acl.delfacl user myuser /tmp/house/kitchen salt &#39;*&#39; acl.delfacl d...",""],
["ref/modules/all/salt.modules.linux_lvm.html","salt.modules.linux_lvm","salt.modules.linux_lvm Support for Linux LVM2 fullversion Syntax salt.modules.linux_lvm.fullversion( ) Details Return all version info from lvm version CLI Example: salt &#39;*&#39; lvm.fullversion lvcreate Syntax salt.modules.linux_lvm.lvcreate( lvname, vgname, size=None, extents=None, snapshot=None, p...",""],
["ref/modules/all/salt.modules.linux_sysctl.html","salt.modules.linux_sysctl","salt.modules.linux_sysctl Module for viewing and modifying sysctl parameters assign Syntax salt.modules.linux_sysctl.assign( name, value ) Details Assign a single sysctl parameter for this minion CLI Example: salt &#39;*&#39; sysctl.assign net.ipv4.ip_forward 1 default_config Syntax salt.modules.linux_s...",""],
["ref/modules/all/salt.modules.localemod.html","salt.modules.localemod","salt.modules.localemod Module for managing locales on POSIX-like systems. avail Syntax salt.modules.localemod.avail( locale ) Details Check if a locale is available. New in version 2014.7.0. CLI Example: salt &#39;*&#39; locale.avail &#39;en_US.UTF-8&#39; gen_locale Syntax salt.modules.localemod.gen_locale( loc...",""],
["ref/modules/all/salt.modules.locate.html","salt.modules.locate","salt.modules.locate Module for using the locate utilities locate Syntax salt.modules.locate.locate( pattern, database=&#39;&#39;, limit=0, **kwargs ) Details Performs a file lookup. Valid options (and their defaults) are: basename=False count=False existing=False follow=True ignore=False nofollow=False ...",""],
["ref/modules/all/salt.modules.logadm.html","salt.modules.logadm","salt.modules.logadm Module for managing Solaris logadm based log rotations. remove Syntax salt.modules.logadm.remove( name, conf_file=&#39;/etc/logadm.conf&#39; ) Details Remove log pattern from logadm CLI Example: salt &#39;*&#39; logadm.remove myapplog rotate Syntax salt.modules.logadm.rotate( name, pattern=F...",""],
["ref/modules/all/salt.modules.logrotate.html","salt.modules.logrotate","salt.modules.logrotate Module for managing logrotate. set_ Syntax salt.modules.logrotate.set_( key, value, setting=None, conf_file=&#39;/etc/logrotate.conf&#39; ) Details Set a new value for a specific configuration line CLI Example: salt &#39;*&#39; logrotate.set rotate 2 Can also be used to set a single value...",""],
["ref/modules/all/salt.modules.lvs.html","salt.modules.lvs","salt.modules.lvs Support for LVS (Linux Virtual Server) add_server Syntax salt.modules.lvs.add_server( protocol=None, service_address=None, server_address=None, packet_forward_method=&#39;dr&#39;, weight=1, **kwargs ) Add a real server to a virtual service. Arguments Name Description protocol The servic...",""],
["ref/modules/all/salt.modules.lxc.html","salt.modules.lxc","salt.modules.lxc Control Linux Containers via Salt depends lxc package for distribution lxc = 1.0 (even beta alpha) is required apply_network_profile Syntax salt.modules.lxc.apply_network_profile( name, network_profile, nic_opts=None ) New in version 2015.2.0. Apply a network profile to a contai...",""],
["ref/modules/all/salt.modules.mac_group.html","salt.modules.mac_group","salt.modules.mac_group Manage groups on Mac OS 10.7+ add Syntax salt.modules.mac_group.add( name, gid=None, **kwargs ) Details Add the specified group CLI Example: salt &#39;*&#39; group.add foo 3456 chgid Syntax salt.modules.mac_group.chgid( name, gid ) Details Change the gid for a named group CLI Exam...",""],
["ref/modules/all/salt.modules.mac_user.html","salt.modules.mac_user","salt.modules.mac_user Manage users on Mac OS 10.7+ add Syntax salt.modules.mac_user.add( name, uid=None, gid=None, groups=None, home=None, shell=None, fullname=None, createhome=True, **kwargs ) Details Add a user to the minion CLI Example: salt &#39;*&#39; user.add name chfullname Syntax salt.modules.ma...",""],
["ref/modules/all/salt.modules.macports.html","salt.modules.macports","salt.modules.macports Support for MacPorts under Mac OSX. This module has some caveats. 1. Updating the database of available ports is quite resource-intensive. However, refresh=True is the default for all operations that need an up-to-date copy of available ports. Consider refresh=False when yo...",""],
["ref/modules/all/salt.modules.makeconf.html","salt.modules.makeconf","salt.modules.makeconf Support for modifying make.conf under Gentoo append_cflags Syntax salt.modules.makeconf.append_cflags( value ) Details Add to or create a new CFLAGS in the make.conf Return a dict containing the new value for variable: {&#39; &#39;: {&#39;old&#39;: &#39; &#39;, &#39;new&#39;: &#39; &#39;}} CLI Example: salt &#39;*&#39; m...",""],
["ref/modules/all/salt.modules.match.html","salt.modules.match","salt.modules.match The match module allows for match routines to be run and determine target specs compound Syntax salt.modules.match.compound( tgt, minion_id=None ) Return True if the minion ID matches the given compound target Arguments Name Description minion_id Specify the minion ID to match...",""],
["ref/modules/all/salt.modules.mdadm.html","salt.modules.mdadm","salt.modules.mdadm Salt module to manage RAID arrays with mdadm assemble Syntax salt.modules.mdadm.assemble( name, devices, test_mode=False, **kwargs ) Assemble a RAID device. CLI Examples: salt &#39;*&#39; raid.assemble /dev/md0 [&#39;/dev/xvdd&#39;, &#39;/dev/xvde&#39;] Note: Adding test_mode=True as an argument will...",""],
["ref/modules/all/salt.modules.memcached.html","salt.modules.memcached","salt.modules.memcached Module for Management of Memcached Keys New in version 2014.1.0. add Syntax salt.modules.memcached.add( key, value, host=&#39;127.0.0.1&#39;, port=11211, time=0, min_compress_len=0 ) Details Add a key to the memcached server, but only if it does not exist. Returns False if the key...",""],
["ref/modules/all/salt.modules.mine.html","salt.modules.mine","salt.modules.mine The function cache system allows for data to be stored on the master so it can be easily read by other minions delete Syntax salt.modules.mine.delete( fun ) Details Remove specific function contents of minion. Returns True on success. CLI Example: salt &#39;*&#39; mine.delete &#39;network....",""],
["ref/modules/all/salt.modules.mod_random.html","salt.modules.mod_random","salt.modules.mod_random New in version 2014.7.0. Provides access to randomness generators. get_str Syntax salt.modules.mod_random.get_str( length=20 ) New in version 2014.7.0. Returns a random string of the specified length. Arguments Name Description length Any valid number of bytes. Details CL...",""],
["ref/modules/all/salt.modules.modjk.html","salt.modules.modjk","salt.modules.modjk Control Modjk via the Apache Tomcat \"Status\" worker ( http://tomcat.apache.org/connectors-doc/reference/status.html ) Below is an example of the configuration needed for this module. This configuration data can be placed either in grains or pillar . If using grains, this can b...",""],
["ref/modules/all/salt.modules.mongodb.html","salt.modules.mongodb","salt.modules.mongodb Module to provide MongoDB functionality to Salt configuration This module uses PyMongo, and accepts configuration details as parameters as well as configuration settings: mongodb.host: &#39;localhost&#39; mongodb.port: 27017 mongodb.user: &#39;&#39; mongodb.password: &#39;&#39; This data can also b...",""],
["ref/modules/all/salt.modules.monit.html","salt.modules.monit","salt.modules.monit Monit service module. This module will create a monit type service watcher. monitor Syntax salt.modules.monit.monitor( name ) Details monitor service via monit CLI Example: salt &#39;*&#39; monit.monitor restart Syntax salt.modules.monit.restart( name ) Details Restart service via mon...",""],
["ref/modules/all/salt.modules.moosefs.html","salt.modules.moosefs","salt.modules.moosefs Module for gathering and managing information about MooseFS dirinfo Syntax salt.modules.moosefs.dirinfo( path, opts=None ) Details Return information on a directory located on the Moose CLI Example: salt &#39;*&#39; moosefs.dirinfo /path/to/dir/ [-[n][h&#124;H]] fileinfo Syntax salt.modu...",""],
["ref/modules/all/salt.modules.mount.html","salt.modules.mount","salt.modules.mount Salt module to manage unix mounts and the fstab file active Syntax salt.modules.mount.active( extended=False ) Details List the active mounts. CLI Example: salt &#39;*&#39; mount.active automaster Syntax salt.modules.mount.automaster( config=&#39;/etc/auto_salt&#39; ) Details List the content...",""],
["ref/modules/all/salt.modules.munin.html","salt.modules.munin","salt.modules.munin Run munin plugins/checks from salt and format the output as data. list_plugins Syntax salt.modules.munin.list_plugins( ) Details List all the munin plugins CLI Example: salt &#39;*&#39; munin.list_plugins run Syntax salt.modules.munin.run( plugins ) Details Run one or more named munin...",""],
["ref/modules/all/salt.modules.mysql.html","salt.modules.mysql","salt.modules.mysql Module to provide MySQL compatibility to salt. depends MySQLdb Python module Note: On CentOS 5 (and possibly RHEL 5) both MySQL-python and python26-mysqldb need to be installed. configuration In order to connect to MySQL, certain configuration is required in /etc/salt/minion o...",""],
["ref/modules/all/salt.modules.nagios.html","salt.modules.nagios","salt.modules.nagios Run nagios plugins/checks from salt and get the return as data. list_plugins Syntax salt.modules.nagios.list_plugins( ) Details List all the nagios plugins CLI Example: salt &#39;*&#39; nagios.list_plugins retcode Syntax salt.modules.nagios.retcode( plugin, args=&#39;&#39;, key_name=None ) D...",""],
["ref/modules/all/salt.modules.netbsd_sysctl.html","salt.modules.netbsd_sysctl","salt.modules.netbsd_sysctl Module for viewing and modifying sysctl parameters assign Syntax salt.modules.netbsd_sysctl.assign( name, value ) Details Assign a single sysctl parameter for this minion CLI Example: salt &#39;*&#39; sysctl.assign net.inet.icmp.icmplim 50 get Syntax salt.modules.netbsd_sysctl...",""],
["ref/modules/all/salt.modules.netbsdservice.html","salt.modules.netbsdservice","salt.modules.netbsdservice The service module for NetBSD available Syntax salt.modules.netbsdservice.available( name ) Details Returns True if the specified service is available, otherwise returns False . CLI Example: salt &#39;*&#39; service.available sshd disable Syntax salt.modules.netbsdservice.disa...",""],
["ref/modules/all/salt.modules.netscaler.html","salt.modules.netscaler","salt.modules.netscaler server_add Syntax salt.modules.netscaler.server_add( s_name, s_ip, s_state=None, **connection_args ) Details Add a server Note: The default server state is ENABLED CLI Example: salt &#39;*&#39; netscaler.server_add &#39;serverName&#39; &#39;serverIpAddress&#39; salt &#39;*&#39; netscaler.server_add &#39;serv...",""],
["ref/modules/all/salt.modules.network.html","salt.modules.network","salt.modules.network Module for gathering and managing network information active_tcp Syntax salt.modules.network.active_tcp( ) Details Return a dict containing information on all of the running TCP connections CLI Example: salt &#39;*&#39; network.active_tcp arp Syntax salt.modules.network.arp( ) Detai...",""],
["ref/modules/all/salt.modules.neutron.html","salt.modules.neutron","salt.modules.neutron Module for handling OpenStack Neutron calls depends neutronclient Python module configuration This module is not usable until the user, password, tenant, and auth URL are specified either in a pillar or in the minion&#39;s config file. For example: keystone.user: &#39;admin&#39; keyston...",""],
["ref/modules/all/salt.modules.nfs3.html","salt.modules.nfs3","salt.modules.nfs3 Module for managing NFS version 3. del_export Syntax salt.modules.nfs3.del_export( exports=&#39;/etc/exports&#39;, path=None ) Details Remove an export CLI Example: salt &#39;*&#39; nfs.del_export /media/storage list_exports Syntax salt.modules.nfs3.list_exports( exports=&#39;/etc/exports&#39; ) Detai...",""],
["ref/modules/all/salt.modules.nftables.html","salt.modules.nftables","salt.modules.nftables Support for nftables append Syntax salt.modules.nftables.append( table=&#39;filter&#39;, chain=None, rule=None, family=&#39;ipv4&#39; ) Append a rule to the specified table &#38; chain. Arguments Name Description This function accepts a rule in a standard nftables command format, starting with...",""],
["ref/modules/all/salt.modules.nginx.html","salt.modules.nginx","salt.modules.nginx Support for nginx configtest Syntax salt.modules.nginx.configtest( ) Details test configuration and exit CLI Example: salt &#39;*&#39; nginx.configtest signal Syntax salt.modules.nginx.signal( signal=None ) Details Signals nginx to start, reload, reopen or stop. CLI Example: salt &#39;*&#39; ...",""],
["ref/modules/all/salt.modules.nova.html","salt.modules.nova","salt.modules.nova Module for handling OpenStack Nova calls depends novaclient Python module configuration This module is not usable until the user, password, tenant, and auth URL are specified either in a pillar or in the minion&#39;s config file. For example: keystone.user: admin keystone.password:...",""],
["ref/modules/all/salt.modules.npm.html","salt.modules.npm","salt.modules.npm Manage and query NPM packages. install Syntax salt.modules.npm.install( pkg=None, pkgs=None, dir=None, runas=None, registry=None, env=None ) Install an NPM package. If no directory is specified, the package will be installed globally. If no package is specified, the dependencies...",""],
["ref/modules/all/salt.modules.omapi.html","salt.modules.omapi","salt.modules.omapi This module interacts with an ISC DHCP Server via OMAPI. server_ip and server_port params may be set in the minion config or pillar: omapi.server_ip: 127.0.0.1 omapi.server_port: 7991 depends pypureomapi Python module add_host Syntax salt.modules.omapi.add_host( mac, name=None...",""],
["ref/modules/all/salt.modules.openbsd_sysctl.html","salt.modules.openbsd_sysctl","salt.modules.openbsd_sysctl Module for viewing and modifying OpenBSD sysctl parameters assign Syntax salt.modules.openbsd_sysctl.assign( name, value ) Details Assign a single sysctl parameter for this minion CLI Example: salt &#39;*&#39; sysctl.assign net.inet.ip.forwarding 1 get Syntax salt.modules.ope...",""],
["ref/modules/all/salt.modules.openbsdpkg.html","salt.modules.openbsdpkg","salt.modules.openbsdpkg Package support for OpenBSD install Syntax salt.modules.openbsdpkg.install( name=None, pkgs=None, sources=None, **kwargs ) Details Install the passed package Return a dict containing the new package names and versions: {&#39; &#39;: {&#39;old&#39;: &#39; &#39;, &#39;new&#39;: &#39; &#39;}} CLI Example, Install ...",""],
["ref/modules/all/salt.modules.openbsdrcctl.html","salt.modules.openbsdrcctl","salt.modules.openbsdrcctl The rcctl service module for OpenBSD available Syntax salt.modules.openbsdrcctl.available( name ) Details Return True if the named service is available. CLI Example: salt &#39;*&#39; service.available sshd disable Syntax salt.modules.openbsdrcctl.disable( name, **kwargs ) Detai...",""],
["ref/modules/all/salt.modules.openbsdservice.html","salt.modules.openbsdservice","salt.modules.openbsdservice The service module for OpenBSD available Syntax salt.modules.openbsdservice.available( name ) Details New in version 2014.7.0. Returns True if the specified service is available, otherwise returns False . CLI Example: salt &#39;*&#39; service.available sshd disabled Syntax sa...",""],
["ref/modules/all/salt.modules.openstack_config.html","salt.modules.openstack_config","salt.modules.openstack_config Modify, retrieve, or delete values from OpenStack configuration files. maintainer Jeffrey C. Ollie maturity new depends platform linux delete Syntax salt.modules.openstack_config.delete( filename, section, parameter ) Delete a value from an OpenStack configuration f...",""],
["ref/modules/all/salt.modules.oracle.html","salt.modules.oracle","salt.modules.oracle Oracle DataBase connection module maintainer Vladimir Bormotov maturity new depends cx_Oracle platform all configuration module provide connections for multiple Oracle DB instances. OS Environment ORACLE_HOME: path to oracle product PATH: path to Oracle Client libs need to be...",""],
["ref/modules/all/salt.modules.osxdesktop.html","salt.modules.osxdesktop","salt.modules.osxdesktop Mac OS X implementations of various commands in the \"desktop\" interface get_output_volume Syntax salt.modules.osxdesktop.get_output_volume( ) Details Get the output volume (range 0 to 100) CLI Example: salt &#39;*&#39; desktop.get_output_volume lock Syntax salt.modules.osxdesktop...",""],
["ref/modules/all/salt.modules.pacman.html","salt.modules.pacman","salt.modules.pacman A module to wrap pacman calls, since Arch is the best ( https://wiki.archlinux.org/index.php/Arch_is_the_best ) file_dict Syntax salt.modules.pacman.file_dict( *packages ) Details List the files that belong to a package, grouped by package. Not specifying any packages will re...",""],
["ref/modules/all/salt.modules.pagerduty.html","salt.modules.pagerduty","salt.modules.pagerduty Module for Firing Events via PagerDuty New in version 2014.1.0. configuration This module can be used by specifying the name of a configuration profile in the minion config, minion pillar, or master config. For example: my-pagerduty-account: pagerduty.api_key: F3Rbyjbve43r...",""],
["ref/modules/all/salt.modules.pam.html","salt.modules.pam","salt.modules.pam Support for pam read_file Syntax salt.modules.pam.read_file( file_name ) Details This is just a test function, to make sure parsing works CLI Example: salt &#39;*&#39; pam.read_file /etc/pam.d/login Next ",""],
["ref/modules/all/salt.modules.parted.html","salt.modules.parted","salt.modules.parted Module for managing partitions on POSIX-like systems. depends parted, partprobe, lsblk (usually parted and util-linux packages) Some functions may not be available, depending on your version of parted. Check the manpage for parted(8) for more information, or the online docs a...",""],
["ref/modules/all/salt.modules.pecl.html","salt.modules.pecl","salt.modules.pecl Manage PHP pecl extensions. install Syntax salt.modules.pecl.install( pecls, defaults=False, force=False, preferred_state=&#39;stable&#39; ) New in version 0.17.0. Installs one or several pecl extensions. Arguments Name Description pecls The pecl extensions to install. defaults Use def...",""],
["ref/modules/all/salt.modules.pillar.html","salt.modules.pillar","salt.modules.pillar Extract the pillar data for this minion ext Syntax salt.modules.pillar.ext( external, pillar=None ) Generate the pillar and apply an explicit external pillar CLI Example: Arguments Name Description pillar If specified, allows for a dictionary of pillar data to be made availab...",""],
["ref/modules/all/salt.modules.pip.html","salt.modules.pip","salt.modules.pip Install Python packages with pip to either the system or a virtualenv freeze Syntax salt.modules.pip.freeze( bin_env=None, user=None, cwd=None, use_vt=False ) Return a list of installed packages either globally or in the specified virtualenv Arguments Name Description bin_env pa...",""],
["ref/modules/all/salt.modules.pkg.html","salt.modules.pkg","salt.modules.pkg pkg is a virtual module that is fulfilled by one of the following modules: salt.modules.aptpkg salt.modules.brew salt.modules.ebuild salt.modules.freebsdpkg salt.modules.openbsdpkg salt.modules.pacman salt.modules.pkgin salt.modules.pkgng salt.modules.pkgutil salt.modules.solari...",""],
["ref/modules/all/salt.modules.pkg_resource.html","salt.modules.pkg_resource","salt.modules.pkg_resource Resources needed by pkg providers add_pkg Syntax salt.modules.pkg_resource.add_pkg( pkgs, name, version ) Details Add a package to a dict of installed packages. CLI Example: salt &#39;*&#39; pkg_resource.add_pkg &#39;{}&#39; bind 9 check_extra_requirements Syntax salt.modules.pkg_resou...",""],
["ref/modules/all/salt.modules.pkgin.html","salt.modules.pkgin","salt.modules.pkgin Package support for pkgin based systems, inspired from freebsdpkg module available_version Syntax salt.modules.pkgin.available_version( *names, **kwargs ) Details Return the latest version of the named package available for upgrade or installation. If the latest version of a g...",""],
["ref/modules/all/salt.modules.pkgng.html","salt.modules.pkgng","salt.modules.pkgng Support for pkgng , the new package manager for FreeBSD Important: This module has been completely rewritten. Up to and including version 0.17.x, it was available as the pkgng module, ( pkgng.install , pkgng.delete , etc.), but moving forward this module will no longer be avai...",""],
["ref/modules/all/salt.modules.pkgutil.html","salt.modules.pkgutil","salt.modules.pkgutil Pkgutil support for Solaris install Syntax salt.modules.pkgutil.install( name=None, refresh=False, version=None, pkgs=None, **kwargs ) Install packages using the pkgutil tool. CLI Example: salt &#39;*&#39; pkg.install salt &#39;*&#39; pkg.install SMClgcc346 Multiple Package Installation Opt...",""],
["ref/modules/all/salt.modules.portage_config.html","salt.modules.portage_config","salt.modules.portage_config Configure portage(5) append_to_package_conf Syntax salt.modules.portage_config.append_to_package_conf( conf, atom=&#39;&#39;, flags=None, string=&#39;&#39;, overwrite=False ) Details Append a string or a list of flags for a given package or DEPEND atom to a given configuration file. ...",""],
["ref/modules/all/salt.modules.postfix.html","salt.modules.postfix","salt.modules.postfix Support for Postfix This module is currently little more than a config file viewer and editor. It is able to read the master.cf file (which is one style) and files in the style of main.cf (which is a different style, that is used in multiple postfix configuration files). The...",""],
["ref/modules/all/salt.modules.postgres.html","salt.modules.postgres","salt.modules.postgres Module to provide Postgres compatibility to salt. configuration In order to connect to Postgres, certain configuration is required in /etc/salt/minion on the relevant minions. Some sample configs might look like: postgres.host: &#39;localhost&#39; postgres.port: &#39;5432&#39; postgres.use...",""],
["ref/modules/all/salt.modules.poudriere.html","salt.modules.poudriere","salt.modules.poudriere Support for poudriere bulk_build Syntax salt.modules.poudriere.bulk_build( jail, pkg_file, keep=False ) Details Run bulk build on poudriere server. Return number of pkg builds, failures, and errors, on error dump to CLI CLI Example: salt -N buildbox_group poudriere.bulk_bu...",""],
["ref/modules/all/salt.modules.powerpath.html","salt.modules.powerpath","salt.modules.powerpath powerpath support. Assumes RedHat add_license Syntax salt.modules.powerpath.add_license( key ) Details Add a license has_powerpath Syntax salt.modules.powerpath.has_powerpath( ) list_licenses Syntax salt.modules.powerpath.list_licenses( ) Details returns a list of applied ...",""],
["ref/modules/all/salt.modules.ps.html","salt.modules.ps","salt.modules.ps A salt interface to psutil, a system and process library. See http://code.google.com/p/psutil . depends psutil Python module, version 0.3.0 or later python-utmp package (optional) boot_time Syntax salt.modules.ps.boot_time( time_format=None ) Return the boot time in number of sec...",""],
["ref/modules/all/salt.modules.publish.html","salt.modules.publish","salt.modules.publish Publish a command from a minion to a target full_data Syntax salt.modules.publish.full_data( tgt, fun, arg=None, expr_form=&#39;glob&#39;, returner=&#39;&#39;, timeout=5 ) Details Return the full data about the publication, this is invoked in the same way as the publish function CLI Example...",""],
["ref/modules/all/salt.modules.puppet.html","salt.modules.puppet","salt.modules.puppet Execute puppet routines disable Syntax salt.modules.puppet.disable( ) Details New in version 2014.7.0. Disable the puppet agent CLI Example: salt &#39;*&#39; puppet.disable enable Syntax salt.modules.puppet.enable( ) Details New in version 2014.7.0. Enable the puppet agent CLI Exampl...",""],
["ref/modules/all/salt.modules.pw_group.html","salt.modules.pw_group","salt.modules.pw_group Manage groups on FreeBSD add Syntax salt.modules.pw_group.add( name, gid=None, **kwargs ) Details Add the specified group CLI Example: salt &#39;*&#39; group.add foo 3456 chgid Syntax salt.modules.pw_group.chgid( name, gid ) Details Change the gid for a named group CLI Example: sal...",""],
["ref/modules/all/salt.modules.pw_user.html","salt.modules.pw_user","salt.modules.pw_user Manage users with the useradd command add Syntax salt.modules.pw_user.add( name, uid=None, gid=None, groups=None, home=None, shell=None, unique=True, fullname=&#39;&#39;, roomnumber=&#39;&#39;, workphone=&#39;&#39;, homephone=&#39;&#39;, createhome=True, **kwargs ) Details Add a user to the minion CLI Exam...",""],
["ref/modules/all/salt.modules.pyenv.html","salt.modules.pyenv","salt.modules.pyenv Manage python installations with pyenv. New in version v2014.04. default Syntax salt.modules.pyenv.default( python=None, runas=None ) Returns or sets the currently defined default python. Arguments Name Description python=None The version to set as the default. Should match on...",""],
["ref/modules/all/salt.modules.qemu_img.html","salt.modules.qemu_img","salt.modules.qemu_img Qemu-img Command Wrapper The qemu img command is wrapped for specific functions depends qemu-img make_image Syntax salt.modules.qemu_img.make_image( location, size, fmt ) Details Create a blank virtual machine image file of the specified size in megabytes. The image can be ...",""],
["ref/modules/all/salt.modules.qemu_nbd.html","salt.modules.qemu_nbd","salt.modules.qemu_nbd Qemu Command Wrapper The qemu system comes with powerful tools, such as qemu-img and qemu-nbd which are used here to build up kvm images. clear Syntax salt.modules.qemu_nbd.clear( mnt ) Details Pass in the mnt dict returned from nbd_mount to unmount and disconnect the image...",""],
["ref/modules/all/salt.modules.quota.html","salt.modules.quota","salt.modules.quota Module for managing quotas on POSIX-like systems. get_mode Syntax salt.modules.quota.get_mode( device ) Details Report whether the quota system for this device is on or off CLI Example: salt &#39;*&#39; quota.get_mode off Syntax salt.modules.quota.off( device ) Details Turns off the q...",""],
["ref/modules/all/salt.modules.rabbitmq.html","salt.modules.rabbitmq","salt.modules.rabbitmq Module to provide RabbitMQ compatibility to Salt. Todo: A lot, need to add cluster support, logging, and minion configuration data. add_user Syntax salt.modules.rabbitmq.add_user( name, password=None, runas=None ) Details Add a rabbitMQ user via rabbitmqctl user_add CLI Exa...",""],
["ref/modules/all/salt.modules.raet_publish.html","salt.modules.raet_publish","salt.modules.raet_publish Publish a command from a minion to a target full_data Syntax salt.modules.raet_publish.full_data( tgt, fun, arg=None, expr_form=&#39;glob&#39;, returner=&#39;&#39;, timeout=5 ) Details Return the full data about the publication, this is invoked in the same way as the publish function C...",""],
["ref/modules/all/salt.modules.rbenv.html","salt.modules.rbenv","salt.modules.rbenv Manage ruby installations with rbenv. New in version 0.16.0. default Syntax salt.modules.rbenv.default( ruby=None, runas=None ) Returns or sets the currently defined default ruby. Arguments Name Description ruby=None The version to set as the default. Should match one of the v...",""],
["ref/modules/all/salt.modules.rdp.html","salt.modules.rdp","salt.modules.rdp Manage RDP Service on Windows servers disable Syntax salt.modules.rdp.disable( ) Details Disable RDP the service on the server CLI Example: salt &#39;*&#39; rdp.disable enable Syntax salt.modules.rdp.enable( ) Details Enable RDP the service on the server CLI Example: salt &#39;*&#39; rdp.enable...",""],
["ref/modules/all/salt.modules.redismod.html","salt.modules.redis","salt.modules.redis Module to provide redis functionality to Salt New in version 2014.7.0. configuration This module requires the redis python module and uses the following defaults which may be overridden in the minion configuration: redis.host: &#39;localhost&#39; redis.port: 6379 redis.db: 0 redis.pas...",""],
["ref/modules/all/salt.modules.reg.html","salt.modules.reg","salt.modules.reg Manage the registry on Windows depends winreg Python module create_key Syntax salt.modules.reg.create_key( hkey, path, key, value=None, reflection=True ) Details Create a registry key CLI Example: salt &#39;*&#39; reg.create_key HKEY_CURRENT_USER &#39;SOFTWARE\\Salt&#39; &#39;version&#39; &#39;0.97&#39; delete_...",""],
["ref/modules/all/salt.modules.rest_package.html","salt.modules.rest_package","salt.modules.rest_package Service support for the REST example install Syntax salt.modules.rest_package.install( name=None, refresh=False, fromrepo=None, pkgs=None, sources=None, **kwargs ) installed Syntax salt.modules.rest_package.installed( name, version=None, refresh=False, fromrepo=None, sk...",""],
["ref/modules/all/salt.modules.rest_sample.html","salt.modules.rest_sample","salt.modules.rest_sample Module for interfacing to the REST example pre-pre-ALPHA QUALITY code. grains_refresh Syntax salt.modules.rest_sample.grains_refresh( ) Details Refresh the cache. ping Syntax salt.modules.rest_sample.ping( ) Next ",""],
["ref/modules/all/salt.modules.rest_service.html","salt.modules.rest_service","salt.modules.rest_service Service support for the REST example list_ Syntax salt.modules.rest_service.list_( ) Details List services. CLI Example: salt &#39;*&#39; rest_service.list restart Syntax salt.modules.rest_service.restart( name ) Details Restart the named service CLI Example: salt &#39;*&#39; rest_serv...",""],
["ref/modules/all/salt.modules.ret.html","salt.modules.ret","salt.modules.ret Module to integrate with the returner system and retrieve data sent to a salt returner get_fun Syntax salt.modules.ret.get_fun( returner, fun ) Details Return info about last time fun was called on each minion CLI Example: salt &#39;*&#39; ret.get_fun mysql network.interfaces get_jid Sy...",""],
["ref/modules/all/salt.modules.rh_ip.html","salt.modules.rh_ip","salt.modules.rh_ip The networking module for RHEL/Fedora based distros apply_network_settings Syntax salt.modules.rh_ip.apply_network_settings( **settings ) Details Apply global network configuration. CLI Example: salt &#39;*&#39; ip.apply_network_settings build_bond Syntax salt.modules.rh_ip.build_bond...",""],
["ref/modules/all/salt.modules.rh_service.html","salt.modules.rh_service","salt.modules.rh_service Service support for RHEL-based systems, including support for both upstart and sysvinit available Syntax salt.modules.rh_service.available( name, limit=&#39;&#39; ) Details Return True if the named service is available. Use the limit param to restrict results to services of that ...",""],
["ref/modules/all/salt.modules.riak.html","salt.modules.riak","salt.modules.riak Riak Salt Module Next ",""],
["ref/modules/all/salt.modules.rpm.html","salt.modules.rpm","salt.modules.rpm Support for rpm diff Syntax salt.modules.rpm.diff( package, path ) Return a formatted diff between current file and original in a package. NOTE: this function includes all files (configuration and not), but does not work on binary content. Arguments Details Value Description Par...",""],
["ref/modules/all/salt.modules.rsync.html","salt.modules.rsync","salt.modules.rsync Wrapper for rsync New in version 2014.1.0. This data can also be passed into pillar . Options passed into opts will overwrite options passed into pillar. config Syntax salt.modules.rsync.config( confile=&#39;/etc/rsyncd.conf&#39; ) Details Return rsync config CLI Example: salt &#39;*&#39; rsy...",""],
["ref/modules/all/salt.modules.runit.html","salt.modules.runit","salt.modules.runit runit service module This module is compatible with the service states, so it can be used to maintain services using the provider argument: myservice: service: - running - provider: runit Note that the enabled argument is not available with this provider. available Syntax salt...",""],
["ref/modules/all/salt.modules.rvm.html","salt.modules.rvm","salt.modules.rvm Manage ruby installations and gemsets with RVM, the Ruby Version Manager. do Syntax salt.modules.rvm.do( ruby, command, runas=None, cwd=None ) Execute a command in an RVM controlled environment. Arguments Name Description ruby: The ruby to use. command: The command to execute. r...",""],
["ref/modules/all/salt.modules.s3.html","salt.modules.s3","salt.modules.s3 Connection module for Amazon S3 configuration This module accepts explicit s3 credentials but can also utilize IAM roles assigned to the instance trough Instance Profiles. Dynamic credentials are then automatically obtained from AWS API and no further configuration is necessary. ...",""],
["ref/modules/all/salt.modules.saltcloudmod.html","salt.modules.saltcloudmod","salt.modules.saltcloudmod Control a salt cloud system create Syntax salt.modules.saltcloudmod.create( name, profile ) Details Create the named vm CLI Example: salt saltcloud.create webserver rackspace_centos_512 Next ",""],
["ref/modules/all/salt.modules.saltutil.html","salt.modules.saltutil","salt.modules.saltutil The Saltutil module is used to manage the state of the salt minion itself. It is used to manage minion modules as well as automate updates to the salt minion. depends esky Python module for update functionality clear_cache Syntax salt.modules.saltutil.clear_cache( ) Details...",""],
["ref/modules/all/salt.modules.schedule.html","salt.modules.schedule","salt.modules.schedule Module for managing the Salt schedule on a minion New in version 2014.7.0. add Syntax salt.modules.schedule.add( name, **kwargs ) Details Add a job to the schedule CLI Example: salt &#39;*&#39; schedule.add job1 function=&#39;test.ping&#39; seconds=3600 # If function have some arguments, u...",""],
["ref/modules/all/salt.modules.scsi.html","salt.modules.scsi","salt.modules.scsi SCSI administration module ls_ Syntax salt.modules.scsi.ls_( ) Details List SCSI devices, with details CLI Example: salt &#39;*&#39; scsi.ls rescan_all Syntax salt.modules.scsi.rescan_all( host ) Details List scsi devices CLI Example: salt &#39;*&#39; scsi.rescan_all(0) Next ",""],
["ref/modules/all/salt.modules.sdb.html","salt.modules.sdb","salt.modules.sdb Module for Manipulating Data via the Salt DB API get Syntax salt.modules.sdb.get( uri ) Details Get a value from a db, using a uri in the form of sdb:// / . If the uri provided does not start with sdb://, then it will be returned as-is. CLI Example: salt &#39;*&#39; sdb.get sdb://mymemc...",""],
["ref/modules/all/salt.modules.seed.html","salt.modules.seed","salt.modules.seed Virtual machine image management tools apply_ Syntax salt.modules.seed.apply_( path, id_=None, config=None, approve_key=True, install=True, prep_install=False ) Seed a location (disk image, directory, or block device) with the minion config, approve the minion&#39;s key, and/or ins...",""],
["ref/modules/all/salt.modules.selinux.html","salt.modules.selinux","salt.modules.selinux Execute calls on selinux Note: This module requires the semanage and setsebool commands to be available on the minion. On RHEL-based distros, this means that the policycoreutils and policycoreutils-python packages must be installed. If not on a RHEL-based distribution, consu...",""],
["ref/modules/all/salt.modules.sensors.html","salt.modules.sensors","salt.modules.sensors Read lm-sensors New in version 2014.1.3. sense Syntax salt.modules.sensors.sense( chip, fahrenheit=False ) Details Gather lm-sensors data from a given chip To determine the chip to query, use the &#39;sensors&#39; command and see the leading line in the block. Example: /usr/bin/sens...",""],
["ref/modules/all/salt.modules.serverdensity_device.html","salt.modules.serverdensity_device","salt.modules.serverdensity_device Wrapper around Server Density API New in version 2014.7.0. create Syntax salt.modules.serverdensity_device.create( name, **params ) Details Function to create device in Server Density. For more info, see the API docs . CLI Example: salt &#39;*&#39; serverdensity_device....",""],
["ref/modules/all/salt.modules.service.html","salt.modules.service","salt.modules.service The default service module, if not otherwise specified salt will fall back to this basic module available Syntax salt.modules.service.available( name ) Details Returns True if the specified service is available, otherwise returns False . CLI Example: salt &#39;*&#39; service.availab...",""],
["ref/modules/all/salt.modules.shadow.html","salt.modules.shadow","salt.modules.shadow Manage the shadow file default_hash Syntax salt.modules.shadow.default_hash( ) Details Returns the default hash used for unset passwords CLI Example: salt &#39;*&#39; shadow.default_hash del_password Syntax salt.modules.shadow.del_password( name ) Details New in version 2014.7.0. Del...",""],
["ref/modules/all/salt.modules.smartos_imgadm.html","salt.modules.smartos_imgadm","salt.modules.smartos_imgadm Module for running imgadm command on SmartOS avail Syntax salt.modules.smartos_imgadm.avail( search=None ) Details Return a list of available images CLI Example: salt &#39;*&#39; imgadm.avail [percona] delete Syntax salt.modules.smartos_imgadm.delete( uuid=None ) Details Remo...",""],
["ref/modules/all/salt.modules.smartos_vmadm.html","salt.modules.smartos_vmadm","salt.modules.smartos_vmadm Module for managing VMs on SmartOS destroy Syntax salt.modules.smartos_vmadm.destroy( uuid=None ) Details Hard power down the virtual machine, this is equivalent to pulling the power CLI Example: salt &#39;*&#39; virt.destroy get_macs Syntax salt.modules.smartos_vmadm.get_macs...",""],
["ref/modules/all/salt.modules.smf.html","salt.modules.smf","salt.modules.smf Service support for Solaris 10 and 11, should work with other systems that use SMF also. (e.g. SmartOS) available Syntax salt.modules.smf.available( name ) Details Returns True if the specified service is available, otherwise returns False . We look up the name with the svcs com...",""],
["ref/modules/all/salt.modules.smtp.html","salt.modules.smtp","salt.modules.smtp Module for Sending Messages via SMTP New in version 2014.7.0. depends smtplib python module configuration This module can be used by either passing a jid and password directly to send_message, or by specifying the name of a configuration profile in the minion config, minion pil...",""],
["ref/modules/all/salt.modules.softwareupdate.html","salt.modules.softwareupdate","salt.modules.softwareupdate Support for the softwareupdate command on MacOS. download Syntax salt.modules.softwareupdate.download( *updates ) Details Download a named update so that it can be installed later with the install or upgrade function. It returns a list of all updates that are now down...",""],
["ref/modules/all/salt.modules.solaris_group.html","salt.modules.solaris_group","salt.modules.solaris_group Manage groups on Solaris add Syntax salt.modules.solaris_group.add( name, gid=None, **kwargs ) Details Add the specified group CLI Example: salt &#39;*&#39; group.add foo 3456 chgid Syntax salt.modules.solaris_group.chgid( name, gid ) Details Change the gid for a named group C...",""],
["ref/modules/all/salt.modules.solaris_shadow.html","salt.modules.solaris_shadow","salt.modules.solaris_shadow Manage the password database on Solaris systems default_hash Syntax salt.modules.solaris_shadow.default_hash( ) Details Returns the default hash used for unset passwords CLI Example: salt &#39;*&#39; shadow.default_hash info Syntax salt.modules.solaris_shadow.info( name ) Det...",""],
["ref/modules/all/salt.modules.solaris_user.html","salt.modules.solaris_user","salt.modules.solaris_user Manage users with the useradd command add Syntax salt.modules.solaris_user.add( name, uid=None, gid=None, groups=None, home=None, shell=None, unique=True, fullname=&#39;&#39;, roomnumber=&#39;&#39;, workphone=&#39;&#39;, homephone=&#39;&#39;, createhome=True, **kwargs ) Details Add a user to the minio...",""],
["ref/modules/all/salt.modules.solarisips.html","salt.modules.solarisips","salt.modules.solarisips IPS pkg support for Solaris This module provides support for Solaris 11 new package management - IPS (Image Packaging System). In order to manage the IPS packages using salt, you need to override the pkg provider by setting the providers parameter in your Minion config fi...",""],
["ref/modules/all/salt.modules.solarispkg.html","salt.modules.solarispkg","salt.modules.solarispkg Package support for Solaris install Syntax salt.modules.solarispkg.install( name=None, sources=None, saltenv=&#39;base&#39;, **kwargs ) Details Install the passed package. Can install packages from the following sources: * Locally (package already exists on the minion * HTTP/HTTP...",""],
["ref/modules/all/salt.modules.solr.html","salt.modules.solr","salt.modules.solr Apache Solr Salt Module Author: Jed Glazner Version: 0.2.1 Modified: 12/09/2011 This module uses HTTP requests to talk to the apache solr request handlers to gather information and report errors. Because of this the minion doesn&#39;t necessarily need to reside on the actual slave....",""],
["ref/modules/all/salt.modules.sqlite3.html","salt.modules.sqlite3","salt.modules.sqlite3 Support for SQLite3 fetch Syntax salt.modules.sqlite3.fetch( db=None, sql=None ) Details Retrieve data from an sqlite3 db (returns all rows, be careful!) CLI Example: salt &#39;*&#39; sqlite3.fetch /root/test.db &#39;SELECT * FROM test;&#39; indexes Syntax salt.modules.sqlite3.indexes( db=N...",""],
["ref/modules/all/salt.modules.ssh.html","salt.modules.ssh","salt.modules.ssh Manage client ssh components Note: This module requires the use of MD5 hashing. Certain security audits may not permit the use of MD5. For those cases, this module should be disabled or removed. auth_keys Syntax salt.modules.ssh.auth_keys( user=None, config=&#39;.ssh/authorized_keys...",""],
["ref/modules/all/salt.modules.state.html","salt.modules.state","salt.modules.state Control the state system on the minion apply_ Syntax salt.modules.state.apply_( mods=None, **kwargs ) Details New in version 2015.2.0. Apply states! This function will call highstate or state.sls based on the arguments passed in, state.apply is intended to be the main gateway ...",""],
["ref/modules/all/salt.modules.status.html","salt.modules.status","salt.modules.status Module for returning various status data about a minion. These data can be useful for compiling into stats later. all_status Syntax salt.modules.status.all_status( ) Details Return a composite of all status data and info for this minion. Warning: There is a LOT here! CLI Exam...",""],
["ref/modules/all/salt.modules.sudo.html","salt.modules.sudo","salt.modules.sudo Allow for the calling of execution modules via sudo salt_call Syntax salt.modules.sudo.salt_call( runas, fun, *args, **kwargs ) Details Wrap a shell execution out to salt call with sudo CLI Example: salt &#39;*&#39; sudo.salt_call root test.ping Next ",""],
["ref/modules/all/salt.modules.supervisord.html","salt.modules.supervisord","salt.modules.supervisord Provide the service module for system supervisord or supervisord in a virtualenv add Syntax salt.modules.supervisord.add( name, user=None, conf_file=None, bin_env=None ) Activates any updates in config for process/group. Arguments Name Description user user to run superv...",""],
["ref/modules/all/salt.modules.svn.html","salt.modules.svn","salt.modules.svn Subversion SCM add Syntax salt.modules.svn.add( cwd, targets, user=None, username=None, password=None, *opts ) Add files to be tracked by the Subversion working-copy checkout Arguments Name Description cwd The path to the Subversion repository targets files and directories to pa...",""],
["ref/modules/all/salt.modules.swift.html","salt.modules.swift","salt.modules.swift Module for handling OpenStack Swift calls Author: Anthony Stanton Inspired by the S3 and Nova modules depends swiftclient Python module configuration This module is not usable until the user, password, tenant, and auth URL are specified either in a pillar or in the minion&#39;s co...",""],
["ref/modules/all/salt.modules.sysbench.html","salt.modules.sysbench","salt.modules.sysbench The &#39;sysbench&#39; module is used to analyze the performance of the minions, right from the master! It measures various system parameters such as CPU, Memory, File I/O, Threads and Mutex. cpu Syntax salt.modules.sysbench.cpu( ) Details Tests for the CPU performance of minions. ...",""],
["ref/modules/all/salt.modules.syslog_ng.html","salt.modules.syslog_ng","salt.modules.syslog_ng Module for getting information about syslog-ng maintainer Tibor Benke maturity new depends cmd platform all This module is capable of managing syslog-ng instances which were installed via a package manager or from source. Users can use a directory as a parameter in the cas...",""],
["ref/modules/all/salt.modules.sysmod.html","salt.modules.sysmod","salt.modules.sysmod The sys module provides information about the available functions on the minion argspec Syntax salt.modules.sysmod.argspec( module=&#39;&#39; ) Details Return the argument specification of functions in Salt execution modules. CLI Example: salt &#39;*&#39; sys.argspec pkg.install salt &#39;*&#39; sys...",""],
["ref/modules/all/salt.modules.sysrc.html","salt.modules.sysrc","salt.modules.sysrc sysrc module for FreeBSD get Syntax salt.modules.sysrc.get( **kwargs ) Details Return system rc configuration variables CLI Example: salt &#39;*&#39; sysrc.get includeDefaults=True remove Syntax salt.modules.sysrc.remove( name, **kwargs ) Details Remove system rc configuration variabl...",""],
["ref/modules/all/salt.modules.system.html","salt.modules.system","salt.modules.system Support for reboot, shutdown, etc halt Syntax salt.modules.system.halt( ) Details Halt a running system CLI Example: salt &#39;*&#39; system.halt init Syntax salt.modules.system.init( runlevel ) Details Change the system runlevel on sysV compatible systems CLI Example: salt &#39;*&#39; syste...",""],
["ref/modules/all/salt.modules.systemd.html","salt.modules.systemd","salt.modules.systemd Provide the service module for systemd available Syntax salt.modules.systemd.available( name ) Details Check that the given service is available taking into account template units. CLI Example: salt &#39;*&#39; service.available sshd disable Syntax salt.modules.systemd.disable( name...",""],
["ref/modules/all/salt.modules.test.html","salt.modules.test","salt.modules.test Module for running arbitrary tests arg Syntax salt.modules.test.arg( *args, **kwargs ) Details Print out the data passed into the function *args and `kwargs , this is used to both test the publication data and cli argument passing, but also to display the information available ...",""],
["ref/modules/all/salt.modules.test_virtual.html","salt.modules.test_virtual","salt.modules.test_virtual Module for running arbitrary tests with a __virtual__ function ping Syntax salt.modules.test_virtual.ping( ) Next ",""],
["ref/modules/all/salt.modules.timezone.html","salt.modules.timezone","salt.modules.timezone Module for managing timezone on POSIX-like systems. get_hwclock Syntax salt.modules.timezone.get_hwclock( ) Details Get current hardware clock setting (UTC or localtime) CLI Example: salt &#39;*&#39; timezone.get_hwclock get_offset Syntax salt.modules.timezone.get_offset( ) Details...",""],
["ref/modules/all/salt.modules.tls.html","salt.modules.tls","salt.modules.tls A salt module for SSL/TLS. Can create a Certificate Authority (CA) or use Self-Signed certificates. depends PyOpenSSL Python module configuration Add the following values in /etc/salt/minion for the CA module to function properly: ca.cert_base_path: &#39;/etc/pki&#39; ca_exists Syntax s...",""],
["ref/modules/all/salt.modules.tomcat.html","salt.modules.tomcat","salt.modules.tomcat Support for Tomcat This module uses the manager webapp to manage Apache tomcat webapps. If the manager webapp is not configured some of the functions won&#39;t work. Note: The config format was changed in 2014.7.0, but backwards compatibility for the old-style config will be in t...",""],
["ref/modules/all/salt.modules.twilio_notify.html","salt.modules.twilio_notify","salt.modules.twilio_notify Module for notifications via Twilio New in version 2014.7.0. depends twilio python module configuration Configure this module by specifying the name of a configuration profile in the minion config, minion pillar, or master config. For example: my-twilio-account: twilio...",""],
["ref/modules/all/salt.modules.upstart.html","salt.modules.upstart","salt.modules.upstart Module for the management of upstart systems. The Upstart system only supports service starting, stopping and restarting. Currently (as of Ubuntu 12.04) there is no tool available to disable Upstart services (like update-rc.d). This[1] is the recommended way to disable an Up...",""],
["ref/modules/all/salt.modules.useradd.html","salt.modules.useradd","salt.modules.useradd Manage users with the useradd command add Syntax salt.modules.useradd.add( name, uid=None, gid=None, groups=None, home=None, shell=None, unique=True, system=False, fullname=&#39;&#39;, roomnumber=&#39;&#39;, workphone=&#39;&#39;, homephone=&#39;&#39;, createhome=True, loginclass=None ) Details Add a user t...",""],
["ref/modules/all/salt.modules.uwsgi.html","salt.modules.uwsgi","salt.modules.uwsgi uWSGI stats server http://uwsgi-docs.readthedocs.org/en/latest/StatsServer.html maintainer Peter Baumgartner maturity new platform all stats Syntax salt.modules.uwsgi.stats( socket ) Return the data from uwsgi --connect-and-read as a dictionary. Arguments Name Description sock...",""],
["ref/modules/all/salt.modules.varnish.html","salt.modules.varnish","salt.modules.varnish Support for Varnish New in version 2014.7.0. Note: These functions are designed to work with all implementations of Varnish from 3.x onwards ban Syntax salt.modules.varnish.ban( ban_expression ) Details Add ban to the varnish cache CLI Example: salt &#39;*&#39; varnish.ban ban_expre...",""],
["ref/modules/all/salt.modules.vbox_guest.html","salt.modules.vbox_guest","salt.modules.vbox_guest VirtualBox Guest Additions installer additions_install Syntax salt.modules.vbox_guest.additions_install( *args, **kwargs ) Install VirtualBox Guest Additions. Uses the CD, connected by VirtualBox. To connect VirtualBox Guest Additions via VirtualBox graphical interface pr...",""],
["ref/modules/all/salt.modules.virt.html","salt.modules.virt","salt.modules.virt Work with virtual machines managed by libvirt depends libvirt Python module create Syntax salt.modules.virt.create( vm_ ) Details Start a defined domain CLI Example: salt &#39;*&#39; virt.create create_xml_path Syntax salt.modules.virt.create_xml_path( path ) Details Start a domain bas...",""],
["ref/modules/all/salt.modules.virtualenv_mod.html","salt.modules.virtualenv","salt.modules.virtualenv Create virtualenv environments create Syntax salt.modules.virtualenv_mod.create( path, venv_bin=None, system_site_packages=False, distribute=False, clear=False, python=None, extra_search_dir=None, never_download=None, prompt=None, pip=False, symlinks=None, upgrade=None, u...",""],
["ref/modules/all/salt.modules.win_autoruns.html","salt.modules.win_autoruns","salt.modules.win_autoruns Module for listing programs that automatically run on startup (very alpha...not tested on anything but my Win 7x64) list_ Syntax salt.modules.win_autoruns.list_( ) Details Get a list of automatically running programs CLI Example: salt &#39;*&#39; autoruns.list Next ",""],
["ref/modules/all/salt.modules.win_disk.html","salt.modules.win_disk","salt.modules.win_disk Module for gathering disk information on Windows depends win32api Python module usage Syntax salt.modules.win_disk.usage( ) Details Return usage information for volumes mounted on this minion CLI Example: salt &#39;*&#39; disk.usage Next ",""],
["ref/modules/all/salt.modules.win_dns_client.html","salt.modules.win_dns_client","salt.modules.win_dns_client Module for configuring DNS Client on Windows systems add_dns Syntax salt.modules.win_dns_client.add_dns( ip, interface=&#39;Local Area Connection&#39;, index=1 ) Details Add the DNS server to the network interface (index starts from 1) Note: if the interface DNS is configured...",""],
["ref/modules/all/salt.modules.win_file.html","salt.modules.win_file","salt.modules.win_file Manage information about files on the minion, set/read user, group data depends win32api win32file win32security chgrp Syntax salt.modules.win_file.chgrp( path, group ) Details Change the group of a file Under Windows, this will do nothing. While a file in Windows does have...",""],
["ref/modules/all/salt.modules.win_firewall.html","salt.modules.win_firewall","salt.modules.win_firewall Module for configuring Windows Firewall add_rule Syntax salt.modules.win_firewall.add_rule( name, localport, protocol=&#39;tcp&#39;, action=&#39;allow&#39;, dir=&#39;in&#39; ) Details New in version 2015.2.0. Add a new firewall rule CLI Example: salt &#39;*&#39; firewall.add_rule \"test\" \"tcp\" \"8080\" d...",""],
["ref/modules/all/salt.modules.win_groupadd.html","salt.modules.win_groupadd","salt.modules.win_groupadd Manage groups on Windows add Syntax salt.modules.win_groupadd.add( name, gid=None, system=False ) Details Add the specified group CLI Example: salt &#39;*&#39; group.add foo adduser Syntax salt.modules.win_groupadd.adduser( name, username ) Details add a user to a group CLI Exa...",""],
["ref/modules/all/salt.modules.win_ip.html","salt.modules.win_ip","salt.modules.win_ip The networking module for Windows based systems disable Syntax salt.modules.win_ip.disable( iface ) Details Disable an interface CLI Example: salt -G &#39;os_family:Windows&#39; ip.disable &#39;Local Area Connection #2&#39; enable Syntax salt.modules.win_ip.enable( iface ) Details Enable an ...",""],
["ref/modules/all/salt.modules.win_network.html","salt.modules.win_network","salt.modules.win_network Module for gathering and managing network information dig Syntax salt.modules.win_network.dig( host ) Details Performs a DNS lookup with dig Note: dig must be installed on the Windows minion CLI Example: salt &#39;*&#39; network.dig archlinux.org hw_addr Syntax salt.modules.win_...",""],
["ref/modules/all/salt.modules.win_ntp.html","salt.modules.win_ntp","salt.modules.win_ntp Management of NTP servers on Windows New in version 2014.1.0. get_servers Syntax salt.modules.win_ntp.get_servers( ) Details Get list of configured NTP servers CLI Example: salt &#39;*&#39; ntp.get_servers set_servers Syntax salt.modules.win_ntp.set_servers( *servers ) Details Set W...",""],
["ref/modules/all/salt.modules.win_path.html","salt.modules.win_path","salt.modules.win_path Manage the Windows System PATH Note that not all Windows applications will rehash the PATH environment variable, Only the ones that listen to the WM_SETTINGCHANGE message http://support.microsoft.com/kb/104011 add Syntax salt.modules.win_path.add( path, index=0 ) Details Ad...",""],
["ref/modules/all/salt.modules.win_pkg.html","salt.modules.win_pkg","salt.modules.win_pkg A module to manage software on Windows depends win32com win32con win32api pywintypes get_repo_data Syntax salt.modules.win_pkg.get_repo_data( saltenv=&#39;base&#39; ) Details Returns the cached winrepo data CLI Example: salt &#39;*&#39; pkg.get_repo_data install Syntax salt.modules.win_pkg....",""],
["ref/modules/all/salt.modules.win_repo.html","salt.modules.win_repo","salt.modules.win_repo Module to manage Windows software repo on a Standalone Minion The following options must be set in the Minion config: file_client: local win_repo_cachefile: c:saltfile_rootswinrepowinrepo.p win_repo: c:saltfile_rootswinrepo Place all Windows package files in the &#39;win_repo&#39; ...",""],
["ref/modules/all/salt.modules.win_servermanager.html","salt.modules.win_servermanager","salt.modules.win_servermanager Manage Windows features via the ServerManager powershell module install Syntax salt.modules.win_servermanager.install( feature, recurse=False ) Details Install a feature Note: Some features requires reboot after un/installation, if so until the server is restarted ...",""],
["ref/modules/all/salt.modules.win_service.html","salt.modules.win_service","salt.modules.win_service Windows Service module. available Syntax salt.modules.win_service.available( name ) Details Returns True if the specified service is available, otherwise returns False . CLI Example: salt &#39;*&#39; service.available create_win_salt_restart_task Syntax salt.modules.win_service....",""],
["ref/modules/all/salt.modules.win_shadow.html","salt.modules.win_shadow","salt.modules.win_shadow Manage the shadow file info Syntax salt.modules.win_shadow.info( name ) Details Return information for the specified user This is just returns dummy data so that salt states can work. CLI Example: salt &#39;*&#39; shadow.info root set_password Syntax salt.modules.win_shadow.set_p...",""],
["ref/modules/all/salt.modules.win_status.html","salt.modules.win_status","salt.modules.win_status Module for returning various status data about a minion. These data can be useful for compiling into stats later. depends pythoncom wmi master Syntax salt.modules.win_status.master( master=None, connected=True ) Details New in version 2015.2.0. Fire an event if the minion...",""],
["ref/modules/all/salt.modules.win_system.html","salt.modules.win_system","salt.modules.win_system Support for reboot, shutdown, etc get_computer_desc Syntax salt.modules.win_system.get_computer_desc( ) Details Get the Windows computer description CLI Example: salt &#39;minion-id&#39; system.get_computer_desc get_computer_name Syntax salt.modules.win_system.get_computer_name( ...",""],
["ref/modules/all/salt.modules.win_timezone.html","salt.modules.win_timezone","salt.modules.win_timezone Module for managing timezone on Windows systems. get_hwclock Syntax salt.modules.win_timezone.get_hwclock( ) Details Get current hardware clock setting (UTC or localtime) CLI Example: salt &#39;*&#39; timezone.get_hwclock get_offset Syntax salt.modules.win_timezone.get_offset( ...",""],
["ref/modules/all/salt.modules.win_update.html","salt.modules.win_update","salt.modules.win_update Module for running windows updates. depends win32com win32con win32api pywintypes New in version 2014.7.0. download_updates Syntax salt.modules.win_update.download_updates( includes=None, retries=5, categories=None ) Downloads all available updates, skipping those that re...",""],
["ref/modules/all/salt.modules.win_useradd.html","salt.modules.win_useradd","salt.modules.win_useradd Manage Windows users with ADSI Can manage local user accounts or domain accounts (if salt-minion is running as a user w/access to AD (or localsystem on a DC), AD accounts should be managed as LDAP objects... add Syntax salt.modules.win_useradd.add( name, password=None, f...",""],
["ref/modules/all/salt.modules.xapi.html","salt.modules.xapi","salt.modules.xapi This module (mostly) uses the XenAPI to manage Xen virtual machines. Big fat warning: the XenAPI used in this file is the one bundled with Xen Source, NOT XenServer nor Xen Cloud Platform. As a matter of fact it will fail under those platforms. From what I&#39;ve read, little work ...",""],
["ref/modules/all/salt.modules.xfs.html","salt.modules.xfs","salt.modules.xfs Module for managing XFS file systems. defragment Syntax salt.modules.xfs.defragment( device ) Details Defragment mounted XFS filesystem. In order to mount a filesystem, device should be properly mounted and writable. CLI Example: salt &#39;*&#39; xfs.defragment /dev/sda1 devices Syntax ...",""],
["ref/modules/all/salt.modules.xmpp.html","salt.modules.xmpp","salt.modules.xmpp Module for Sending Messages via XMPP (a.k.a. Jabber) New in version 2014.1.0. depends sleekxmpp python module configuration This module can be used by either passing a jid and password directly to send_message, or by specifying the name of a configuration profile in the minion ...",""],
["ref/modules/all/salt.modules.yumpkg.html","salt.modules.yumpkg","salt.modules.yumpkg Support for YUM Note: This module makes heavy use of the repoquery utility, from the yum-utils package. This package will be installed as a dependency if salt is installed via EPEL. However, if salt has been installed using pip, or a host is being managed using salt-ssh, then...",""],
["ref/modules/all/salt.modules.zcbuildout.html","salt.modules.zcbuildout","salt.modules.zcbuildout Management of zc.buildout New in version 2014.1.0. This module is inspired by minitage&#39;s buildout maker Note: The zc.buildout integration is still in beta; the API is subject to change General notes You have those following methods: upgrade_bootstrap bootstrap run_buildou...",""],
["ref/modules/all/salt.modules.zfs.html","salt.modules.zfs","salt.modules.zfs Salt interface to ZFS commands codeauthor Nitin Madhok create Syntax salt.modules.zfs.create( name, **kwargs ) Details New in version 2015.2.0. Create a ZFS File System. CLI Example: salt &#39;*&#39; zfs.create myzpool/mydataset [create_parent=True&#124;False] Note: ZFS properties can be spe...",""],
["ref/modules/all/salt.modules.zk_concurrency.html","salt.modules.zk_concurrency","salt.modules.zk_concurrency Concurrency controls in zookeeper This module allows you to acquire and release a slot. This is primarily useful for ensureing that no more than N hosts take a specific action at once. This can also be used to coordinate between masters. lock Syntax salt.modules.zk_co...",""],
["ref/modules/all/salt.modules.znc.html","salt.modules.znc","salt.modules.znc znc - An advanced IRC bouncer New in version 2014.7.0. Provides an interface to basic ZNC functionality buildmod Syntax salt.modules.znc.buildmod( *modules ) Details Build module using znc-buildmod CLI Example: salt &#39;*&#39; znc.buildmod module.cpp [...] dumpconf Syntax salt.modules....",""],
["ref/modules/all/salt.modules.zpool.html","salt.modules.zpool","salt.modules.zpool Module for running ZFS zpool command codeauthor Nitin Madhok add Syntax salt.modules.zpool.add( pool_name, *vdevs ) Details Add the specified vdev&#39;s to the given pool CLI Example: salt &#39;*&#39; zpool.add myzpool /path/to/vdev1 /path/to/vdev2 [...] create Syntax salt.modules.zpool.c...",""],
["ref/modules/all/salt.modules.zypper.html","salt.modules.zypper","salt.modules.zypper Package support for openSUSE via the zypper package manager depends zypp Python module. Install with zypper install python-zypp add_lock Syntax salt.modules.zypper.add_lock( name=None, pkgs=None, **kwargs ) Details Add a package lock. Specify packages to lock by exact name. C...",""],
["ref/modules/all/sub_salt-modules-riak_riak-salt-module.html","Riak Salt Module","Riak Salt Module Author: David Boucha cluster_commit Syntax salt.modules.riak.cluster_commit( ) Details Commit Cluster Changes CLI Example: salt &#39;*&#39; riak.cluster_commit cluster_join Syntax salt.modules.riak.cluster_join( riak_user=None, riak_host=None ) Details Join a Riak cluster CLI Example: s...",""],
["ref/netapi/all/salt.netapi.rest_cherrypy.html","rest_cherrypy","rest_cherrypy A REST API for Salt New in version 2014.7.0. depends CherryPy Python module (strongly recommend 3.2.x versions due to an as yet unknown SSL error). optdepends ws4py Python module for websockets support. configuration All authentication is done through Salt&#39;s external auth system wh...",""],
["ref/netapi/all/salt.netapi.rest_tornado.html","rest_tornado","rest_tornado A non-blocking REST API for Salt depends tornado Python module configuration All authentication is done through Salt&#39;s external auth system which requires additional configuration not described here. In order to run rest_tornado with the salt-master add the following to the Salt mas...",""],
["ref/netapi/all/salt.netapi.rest_wsgi.html","rest_wsgi","rest_wsgi A minimalist REST API for Salt This rest_wsgi module provides a no-frills REST interface for sending commands to the Salt master. There are no dependencies. Extra care must be taken when deploying this module into production. Please read this documentation in entirety. All authenticati...",""],
["ref/output/all/salt.output.compact.html","salt.output.compact","salt.output.compact Display compact output data structure Example output:: &#39;saltdev&#39;: {&#39;test_&#124;-always-passes_&#124;-foo_&#124;-succeed_without_changes&#39;: {&#39;comment&#39;: &#39;Success!&#39;, &#39;name&#39;: &#39;foo&#39;, &#39;start_time&#39;: &#39;05:16:26.111814&#39;, &#39;result&#39;: True, &#39;duration&#39;: 1, &#39;__run_num__&#39;: 0, &#39;changes&#39;: {}}, &#39;test_&#124;-my-custo...",""],
["ref/output/all/salt.output.highstate.html","salt.output.highstate","salt.output.highstate Outputter for displaying results of state runs The return data from the Highstate command is a standard data structure which is parsed by the highstate outputter to deliver a clean and readable set of information about the HighState run on minions. Two configurations can be...",""],
["ref/output/all/salt.output.json_out.html","salt.output.json_out","salt.output.json_out Display return data in JSON format configuration The output format can be configured in two ways: Using the --out-indent CLI flag and specifying a positive integer or a negative integer to group JSON from each minion to a single line. Or setting the output_indent setting in ...",""],
["ref/output/all/salt.output.key.html","salt.output.key","salt.output.key Display salt-key output The salt-key command makes use of this outputter to format its output. output Syntax salt.output.key.output( data ) Details Read in the dict structure generated by the salt key API methods and print the structure. Next ",""],
["ref/output/all/salt.output.nested.html","salt.output.nested","salt.output.nested Recursively display nested data This is the default outputter for most execution functions. Example output: myminion: ---------- foo: ---------- bar: baz dictionary: ---------- abc: 123 def: 456 list: - Hello - World output Syntax salt.output.nested.output( ret ) Details Displ...",""],
["ref/output/all/salt.output.newline_values_only.html","salt.output.newline_values_only","salt.output.newline_values_only Display values only, separated by newlines New in version 2015.2.0. This outputter is designed for Salt CLI return data. It will do the following to the return dict: Get just the values (ignoring the minion IDs). Each value, if it is iterable, is split a separate ...",""],
["ref/output/all/salt.output.no_out.html","salt.output.no_out","salt.output.no_out Display no output No output is produced when this outputter is selected output Syntax salt.output.no_out.output( ret ) Details Don&#39;t display data. Used when you only are interested in the return. Next ",""],
["ref/output/all/salt.output.no_return.html","salt.output.no_return","salt.output.no_return Display output for minions that did not return This outputter is used to display notices about which minions failed to return when a salt function is run with -v or --verbose . It should not be called directly from the CLI. Example output: virtucentos: Minion did not return...",""],
["ref/output/all/salt.output.overstatestage.html","salt.output.overstatestage","salt.output.overstatestage Display clean output of an overstate stage This outputter is used to display OverState stages, and should not be called directly. output Syntax salt.output.overstatestage.output( data ) Details Format the data for printing stage information from the overstate system Ne...",""],
["ref/output/all/salt.output.pprint_out.html","salt.output.pprint_out","salt.output.pprint_out Python pretty-print (pprint) The python pretty-print system was once the default outputter. It simply passes the return data through to pprint.pformat and prints the results. Example output: {&#39;saltmine&#39;: {&#39;foo&#39;: {&#39;bar&#39;: &#39;baz&#39;, &#39;dictionary&#39;: {&#39;abc&#39;: 123, &#39;def&#39;: 456}, &#39;list&#39;...",""],
["ref/output/all/salt.output.progress.html","salt.output.progress","salt.output.progress Display return data as a progress bar output Syntax salt.output.progress.output( ret, bar ) Details Update the progress bar progress_iter Syntax salt.output.progress.progress_iter( progress ) Details Initialize and return a progress bar iter Next ",""],
["ref/output/all/salt.output.raw.html","salt.output.raw","salt.output.raw Display raw output data structure This outputter simply displays the output as a python data structure, by printing a string representation of it. It is similar to the pprint outputter, only the data is not nicely formatted/indented. This was the original outputter used by Salt b...",""],
["ref/output/all/salt.output.txt.html","salt.output.txt","salt.output.txt Simple text outputter The txt outputter has been developed to make the output from shell commands on minions appear as they do when the command is executed on the minion. output Syntax salt.output.txt.output( data ) Details Output the data in lines, very nice for running commands...",""],
["ref/output/all/salt.output.virt_query.html","salt.output.virt_query","salt.output.virt_query virt.query outputter Used to display the output from the virt.query runner. output Syntax salt.output.virt_query.output( data ) Details Display output for the salt-run virt.query function Next ",""],
["ref/output/all/salt.output.yaml_out.html","salt.output.yaml_out","salt.output.yaml_out Display return data in YAML format This outputter defaults to printing in YAML block mode for better readability. Example output: saltmine: foo: bar: baz dictionary: abc: 123 def: 456 list: - Hello - World output Syntax salt.output.yaml_out.output( data ) Details Print out Y...",""],
["ref/outputters.html","Output Modules (salt.output)","Output Modules (salt.output) salt.output.compact salt.output.highstate salt.output.json_out salt.output.key salt.output.nested salt.output.newline_values_only salt.output.no_out salt.output.no_return salt.output.overstatestage salt.output.pprint_out salt.output.progress salt.output.raw salt.outp...",""],
["ref/overview.html","About This Guide","This guide contains reference information for salt modules, command line interfaces, APIs, and other components.",""],
["ref/peer.html","Peer Communication","Peer Communication Salt 0.9.0 introduced the capability for Salt minions to publish commands. The intent of this feature is not for Salt minions to act as independent brokers one with another, but to allow Salt minions to pass commands to each other. In Salt 0.10.0 the ability to execute runners...",""],
["ref/pillar/all/salt.pillar.cmd_json.html","salt.pillar.cmd_json","salt.pillar.cmd_json Execute a command and read the output as JSON. The JSON data is then directly overlaid onto the minion&#39;s Pillar data. ext_pillar Syntax salt.pillar.cmd_json.ext_pillar( minion_id, pillar, command ) Details Execute a command and read the output as JSON Next ",""],
["ref/pillar/all/salt.pillar.cmd_yaml.html","salt.pillar.cmd_yaml","salt.pillar.cmd_yaml Execute a command and read the output as YAML. The YAML data is then directly overlaid onto the minion&#39;s Pillar data ext_pillar Syntax salt.pillar.cmd_yaml.ext_pillar( minion_id, pillar, command ) Details Execute a command and read the output as YAML Next ",""],
["ref/pillar/all/salt.pillar.cmd_yamlex.html","salt.pillar.cmd_yamlex","salt.pillar.cmd_yamlex Execute a command and read the output as YAMLEX. The YAMLEX data is then directly overlaid onto the minion&#39;s Pillar data ext_pillar Syntax salt.pillar.cmd_yamlex.ext_pillar( minion_id, pillar, command ) Details Execute a command and read the output as YAMLEX Next ",""],
["ref/pillar/all/salt.pillar.cobbler.html","salt.pillar.cobbler","salt.pillar.cobbler A module to pull data from Cobbler via its API into the Pillar dictionary Configuring the Cobbler ext_pillar The same cobbler.* parameters are used for both the Cobbler tops and Cobbler pillar modules. ext_pillar: - cobbler: key: cobbler # Nest results within this key. By def...",""],
["ref/pillar/all/salt.pillar.django_orm.html","salt.pillar.django_orm","salt.pillar.django_orm Generate Pillar data from Django models through the Django ORM maintainer Micah Hausler maturity new Configuring the django_orm ext_pillar To use this module, your Django project must be on the salt master server with database access. This assumes you are using virtualenv ...",""],
["ref/pillar/all/salt.pillar.ec2_pillar.html","salt.pillar.ec2_pillar","salt.pillar.ec2_pillar Retrieve EC2 instance data for minions. The minion id must be the instance-id retrieved from AWS. As an option, use_grain can be set to True. This allows the use of an instance-id grain instead of the minion-id. Since this is a potential security risk, the configuration ca...",""],
["ref/pillar/all/salt.pillar.etcd_pillar.html","salt.pillar.etcd_pillar","salt.pillar.etcd_pillar Use etcd data as a Pillar source New in version 2014.7.0. depends python-etcd In order to use an etcd server, a profile must be created in the master configuration file: my_etcd_config: etcd.host: 127.0.0.1 etcd.port: 4001 After the profile is created, configure the exter...",""],
["ref/pillar/all/salt.pillar.file_tree.html","salt.pillar.file_tree","salt.pillar.file_tree Recursively iterate over directories and add all files as Pillar data. Example configuration: ext_pillar: - file_tree: root_dir: /path/to/root/directory follow_dir_links: False raw_data: False The root_dir parameter is required and points to the directory where files for ea...",""],
["ref/pillar/all/salt.pillar.foreman.html","salt.pillar.foreman","salt.pillar.foreman A module to pull data from Foreman via its API into the Pillar dictionary Configuring the Foreman ext_pillar Set the following Salt config to setup Foreman as external pillar source: ext_pillar: - foreman: key: foreman # Nest results within this key only: [&#39;hostgroup_name&#39;, &#39;...",""],
["ref/pillar/all/salt.pillar.git_pillar.html","salt.pillar.git_pillar","salt.pillar.git_pillar Clone a remote git repository and use the filesystem as a Pillar source This external Pillar source can be configured in the master config file like so: ext_pillar: - git: master git://gitserver/git-pillar.git root=subdirectory The root= parameter is optional and used to s...",""],
["ref/pillar/all/salt.pillar.hiera.html","salt.pillar.hiera","salt.pillar.hiera Use hiera data as a Pillar source ext_pillar Syntax salt.pillar.hiera.ext_pillar( minion_id, pillar, conf ) Details Execute hiera and return the data Next ",""],
["ref/pillar/all/salt.pillar.libvirt.html","salt.pillar.libvirt","salt.pillar.libvirt Load up the libvirt keys into Pillar for a given minion if said keys have been generated using the libvirt key runner ext_pillar Syntax salt.pillar.libvirt.ext_pillar( minion_id, pillar, command ) Details Read in the generated libvirt keys gen_hyper_keys Syntax salt.pillar.li...",""],
["ref/pillar/all/salt.pillar.mongo.html","salt.pillar.mongo","salt.pillar.mongo Read Pillar data from a mongodb collection depends pymongo (for salt-master) This module will load a node-specific pillar dictionary from a mongo collection. It uses the node&#39;s id for lookups and can load either the whole document, or just a specific field from that document as...",""],
["ref/pillar/all/salt.pillar.mysql.html","salt.pillar.mysql","salt.pillar.mysql Retrieve Pillar data by doing a MySQL query MariaDB provides Python support through the MySQL Python package. Therefore, you may use this module with both MySQL or MariaDB. maturity new depends python-mysqldb platform all Theory of mysql ext_pillar Ok, here&#39;s the theory for how...",""],
["ref/pillar/all/salt.pillar.pepa.html","salt.pillar.pepa","salt.pillar.pepa Configuring Pepa extension_modules: /srv/salt/ext ext_pillar: - pepa: resource: host # Name of resource directory and sub-key in pillars sequence: # Sequence used for hierarchical substitution - hostname: # Name of key name: input # Alias used for template directory base_only: T...",""],
["ref/pillar/all/salt.pillar.pillar_ldap.html","salt.pillar.pillar_ldap","salt.pillar.pillar_ldap Use LDAP data as a Pillar source This pillar module parses a config file (specified in the salt master config), and executes a series of LDAP searches based on that config. Data returned by these searches is aggregated, with data items found later in the LDAP search order...",""],
["ref/pillar/all/salt.pillar.puppet.html","salt.pillar.puppet","salt.pillar.puppet Execute an unmodified puppet_node_classifier and read the output as YAML. The YAML data is then directly overlaid onto the minion&#39;s Pillar data. ext_pillar Syntax salt.pillar.puppet.ext_pillar( minion_id, pillar, command ) Details Execute an unmodified puppet_node_classifier a...",""],
["ref/pillar/all/salt.pillar.reclass_adapter.html","salt.pillar.reclass_adapter","salt.pillar.reclass_adapter Use the \"reclass\" database as a Pillar source This ext_pillar plugin provides access to the reclass database, such that Pillar data for a specific minion are fetched using reclass. You can find more information about reclass at http://reclass.pantsfullofunix.net . To ...",""],
["ref/pillar/all/salt.pillar.redismod.html","salt.pillar.redismod","salt.pillar.redismod Read pillar data from a Redis backend New in version 2014.7.0. depends redis Python module (on master) Salt Master Redis Configuration The module shares the same base Redis connection variables as salt.returners.redis_return . These variables go in your master config file. r...",""],
["ref/pillar/all/salt.pillar.s3.html","salt.pillar.s3","salt.pillar.s3 Copy pillar data from a bucket in Amazon S3 The S3 pillar can be configured in the master config file with the following options ext_pillar: - s3: bucket: my.fancy.pillar.bucket keyid: KASKFJWAKJASJKDAJKSD key: ksladfDLKDALSFKSD93q032sdDasdfasdflsadkf multiple_env: False environme...",""],
["ref/pillar/all/salt.pillar.svn_pillar.html","salt.pillar.svn_pillar","salt.pillar.svn_pillar Clone a remote SVN repository and use the filesystem as a Pillar source This external Pillar source can be configured in the master config file like so: ext_pillar: - svn: trunk svn://svnserver/repo root=subdirectory The root= parameter is optional and used to set the subd...",""],
["ref/pillar/all/salt.pillar.varstack_pillar.html","salt.pillar.varstack_pillar","salt.pillar.varstack_pillar Use varstack data as a Pillar source ext_pillar Syntax salt.pillar.varstack_pillar.ext_pillar( minion_id, pillar, conf ) Details Parse varstack data and return the result Next ",""],
["ref/pillar/all/salt.pillar.virtkey.html","salt.pillar.virtkey","salt.pillar.virtkey Accept a key from a hypervisor if the virt runner has already submitted an authorization request ext_pillar Syntax salt.pillar.virtkey.ext_pillar( hyper_id, pillar, name, key ) Details Accept the key for the VM on the hyper, if authorized. Next ",""],
["ref/pillar-modules.html","Pillar Modules (salt.pillar)","Pillar Modules (salt.pillar) salt.pillar.cmd_json salt.pillar.cmd_yaml salt.pillar.cmd_yamlex salt.pillar.cobbler salt.pillar.django_orm salt.pillar.ec2_pillar salt.pillar.etcd_pillar salt.pillar.file_tree salt.pillar.foreman salt.pillar.git_pillar salt.pillar.hiera salt.pillar.libvirt salt.pill...",""],
["ref/renderers/all/salt.renderers.cheetah.html","salt.renderers.cheetah","salt.renderers.cheetah Cheetah Renderer for Salt render Syntax salt.renderers.cheetah.render( cheetah_data, saltenv=&#39;base&#39;, sls=&#39;&#39;, method=&#39;xml&#39;, **kws ) Render a Cheetah template. Arguments Details Value Description Return type A Python data structure Next ",""],
["ref/renderers/all/salt.renderers.genshi.html","salt.renderers.genshi","salt.renderers.genshi Genshi Renderer for Salt render Syntax salt.renderers.genshi.render( genshi_data, saltenv=&#39;base&#39;, sls=&#39;&#39;, method=&#39;xml&#39;, **kws ) Render a Genshi template. A method should be passed in as part of the kwargs. If no method is passed in, xml is assumed. Valid methods are: code-b...",""],
["ref/renderers/all/salt.renderers.gpg.html","salt.renderers.gpg","salt.renderers.gpg Renderer that will decrypt GPG ciphers Any key in the SLS file can be a GPG cipher, and this renderer will decrypt it before passing it off to Salt. This allows you to safely store secrets in source control, in such a way that only your Salt master can decrypt them and distrib...",""],
["ref/renderers/all/salt.renderers.jinja.html","salt.renderers.jinja","salt.renderers.jinja Jinja loading utils to enable a more powerful backend for jinja templates Jinja in States The most basic usage of Jinja in state files is using control structures to wrap conditional or redundant state elements: {% if grains[&#39;os&#39;] != &#39;FreeBSD&#39; %} tcsh: pkg: - installed {% en...",""],
["ref/renderers/all/salt.renderers.json.html","salt.renderers.json","salt.renderers.json JSON Renderer for Salt render Syntax salt.renderers.json.render( json_data, saltenv=&#39;base&#39;, sls=&#39;&#39;, **kws ) Accepts JSON as a string or as a file object and runs it through the JSON parser. Arguments Details Value Description Return type A Python data structure Next ",""],
["ref/renderers/all/salt.renderers.mako.html","salt.renderers.mako","salt.renderers.mako Mako Renderer for Salt render Syntax salt.renderers.mako.render( template_file, saltenv=&#39;base&#39;, sls=&#39;&#39;, context=None, tmplpath=None, **kws ) Render the template_file, passing the functions and grains into the Mako rendering system. Arguments Details Value Description Return t...",""],
["ref/renderers/all/salt.renderers.msgpack.html","salt.renderers.msgpack","salt.renderers.msgpack render Syntax salt.renderers.msgpack.render( msgpack_data, saltenv=&#39;base&#39;, sls=&#39;&#39;, **kws ) Accepts a message pack string or a file object, renders said data back to a python dict. note: This renderer is NOT intended for use in creating sls files by hand, but exists to allo...",""],
["ref/renderers/all/salt.renderers.py.html","salt.renderers.py","salt.renderers.py Pure python state renderer The SLS file should contain a function called run which returns high state data. In this module, a few objects are defined for you, giving access to Salt&#39;s execution functions, grains, pillar, etc. They are: __salt__ - Execution functions (i.e. __salt...",""],
["ref/renderers/all/salt.renderers.pydsl.html","salt.renderers.pydsl","salt.renderers.pydsl A Python-based DSL maintainer Jack Kuan maturity new platform all The pydsl renderer allows one to author salt formulas (.sls files) in pure Python using a DSL that&#39;s easy to write and easy to read. Here&#39;s an example: #!pydsl apache = state(&#39;apache&#39;) apache.pkg.installed() a...",""],
["ref/renderers/all/salt.renderers.pyobjects.html","salt.renderers.pyobjects","salt.renderers.pyobjects Python renderer that includes a Pythonic Object based interface maintainer Evan Borgstrom Let&#39;s take a look at how you use pyobjects in a state file. Here&#39;s a quick example that ensures the /tmp directory is in the correct state. #!pyobjects File.managed(\"/tmp\", user=&#39;ro...",""],
["ref/renderers/all/salt.renderers.stateconf.html","salt.renderers.stateconf","salt.renderers.stateconf maintainer Jack Kuan maturity new platform all This module provides a custom renderer that processes a salt file with a specified templating engine (e.g. Jinja) and a chosen data renderer (e.g. YAML), extracts arguments for any stateconf.set state, and provides the extra...",""],
["ref/renderers/all/salt.renderers.wempy.html","salt.renderers.wempy","salt.renderers.wempy render Syntax salt.renderers.wempy.render( template_file, saltenv=&#39;base&#39;, sls=&#39;&#39;, argline=&#39;&#39;, context=None, **kws ) Render the data passing the functions and grains into the rendering system Arguments Details Value Description Return type string Next ",""],
["ref/renderers/all/salt.renderers.yaml.html","salt.renderers.yaml","salt.renderers.yaml Understanding YAML The default renderer for SLS files is the YAML renderer. YAML is a markup language with many powerful features. However, Salt uses a small subset of YAML that maps over very commonly used data structures, like lists and dictionaries. It is the job of the YA...",""],
["ref/renderers/all/salt.renderers.yamlex.html","salt.renderers.yamlex","salt.renderers.yamlex YAMLEX renderer is a replacement of the YAML renderer. It&#39;s 100% YAML with a pinch of Salt magic: All mappings are automatically OrderedDict All strings are automatically str obj data aggregation with !aggregation yaml tag, based on the salt.utils.aggregation module. data a...",""],
["ref/renderers.html","Renderers (salt.renderers)","Renderers (salt.renderers) salt.renderers.cheetah salt.renderers.genshi salt.renderers.gpg salt.renderers.jinja salt.renderers.json salt.renderers.mako salt.renderers.msgpack salt.renderers.py salt.renderers.pydsl salt.renderers.pyobjects salt.renderers.stateconf salt.renderers.wempy salt.render...",""],
["ref/rest-api.html","REST API Modules (salt.netapi)","REST API Modules (salt.netapi) rest_cherrypy rest_tornado rest_wsgi Next ",""],
["ref/returners/all/salt.returners.carbon_return.html","salt.returners.carbon_return","salt.returners.carbon_return Take data from salt and \"return\" it into a carbon receiver Add the following configuration to the minion configuration file: carbon.host: carbon.port: 2003 Errors when trying to convert data to numbers may be ignored by setting carbon.skip_on_error to True: carbon.sk...",""],
["ref/returners/all/salt.returners.cassandra_return.html","salt.returners.cassandra_return","salt.returners.cassandra_return Return data to a Cassandra ColumnFamily Here&#39;s an example Keyspace / ColumnFamily setup that works with this returner: create keyspace salt; use salt; create column family returns with key_validation_class=&#39;UTF8Type&#39; and comparator=&#39;UTF8Type&#39; and default_validatio...",""],
["ref/returners/all/salt.returners.couchbase_return.html","salt.returners.couchbase_return","salt.returners.couchbase_return Simple returner for Couchbase. Optional configuration settings are listed below, along with sane defaults. couchbase.host: &#39;salt&#39; couchbase.port: 8091 couchbase.bucket: &#39;salt&#39; couchbase.skip_verify_views: False To use the couchbase returner, append &#39;--return couch...",""],
["ref/returners/all/salt.returners.couchdb_return.html","salt.returners.couchdb_return","salt.returners.couchdb_return Simple returner for CouchDB. Optional configuration settings are listed below, along with sane defaults: couchdb.db: &#39;salt&#39; couchdb.url: &#39;http://salt:5984/&#39; Alternative configuration values can be used by prefacing the configuration. Any values not found in the alte...",""],
["ref/returners/all/salt.returners.django_return.html","salt.returners.django_return","salt.returners.django_return A returner that will infor a Django system that returns are available using Django&#39;s signal system. https://docs.djangoproject.com/en/dev/topics/signals/ It is up to the Django developer to register necessary handlers with the signals provided by this returner and pr...",""],
["ref/returners/all/salt.returners.etcd_return.html","salt.returners.etcd_return","salt.returners.etcd_return Return data to an etcd server or cluster depends python-etcd In order to return to an etcd server, a profile should be created in the master configuration file: my_etcd_config: etcd.host: 127.0.0.1 etcd.port: 4001 It is technically possible to configure etcd without us...",""],
["ref/returners/all/salt.returners.kafka_return.html","salt.returners.kafka_return","salt.returners.kafka_return Return data to a Kafka topic maintainer Christer Edwards ( christer.edwards@gmail.com ) maturity 0.1 depends kafka-python platform all To enable this returner install kafka-python and enable the following settings in the minion config: returner.kafka.hostnames: \"serve...",""],
["ref/returners/all/salt.returners.local.html","salt.returners.local","salt.returners.local The local returner is used to test the returner interface, it just prints the return data to the console to verify that it is being passed properly To use the local returner, append &#39;--return local&#39; to the salt command. ex: \" salt &#39;*&#39; test.ping --return local \" event_return ...",""],
["ref/returners/all/salt.returners.local_cache.html","salt.returners.local_cache","salt.returners.local_cache Return data to local job cache clean_old_jobs Syntax salt.returners.local_cache.clean_old_jobs( ) Details Clean out the old jobs from the job cache get_jid Syntax salt.returners.local_cache.get_jid( jid ) Details Return the information returned when the specified job i...",""],
["ref/returners/all/salt.returners.memcache_return.html","salt.returners.memcache_return","salt.returners.memcache_return Return data to a memcache server To enable this returner the minion will need the python client for memcache installed and the following values configured in the minion or master config, these are the defaults. memcache.host: &#39;localhost&#39; memcache.port: &#39;11211&#39; Alte...",""],
["ref/returners/all/salt.returners.mongo_future_return.html","salt.returners.mongo_future_return","salt.returners.mongo_future_return Return data to a mongodb server Required python modules: pymongo This returner will send data from the minions to a MongoDB server. To configure the settings for your MongoDB server, add the following lines to the minion config files: Alternative configuration ...",""],
["ref/returners/all/salt.returners.mongo_return.html","salt.returners.mongo_return","salt.returners.mongo_return Return data to a mongodb server Required python modules: pymongo This returner will send data from the minions to a MongoDB server. To configure the settings for your MongoDB server, add the following lines to the minion config files. mongo.db: mongo.host: mongo.user:...",""],
["ref/returners/all/salt.returners.multi_returner.html","salt.returners.multi_returner","salt.returners.multi_returner Read/Write multiple returners clean_old_jobs Syntax salt.returners.multi_returner.clean_old_jobs( ) Details Clean out the old jobs from all returners (if you have it) get_jid Syntax salt.returners.multi_returner.get_jid( jid ) Details Merge the return data from all ...",""],
["ref/returners/all/salt.returners.mysql.html","salt.returners.mysql","salt.returners.mysql Return data to a mysql server maintainer Dave Boucha , Seth House maturity new depends python-mysqldb platform all To enable this returner the minion will need the python client for mysql installed and the following values configured in the minion or master config, these are...",""],
["ref/returners/all/salt.returners.odbc.html","salt.returners.odbc","salt.returners.odbc Return data to an ODBC compliant server. This driver was developed with Microsoft SQL Server in mind, but theoretically could be used to return data to any compliant ODBC database as long as there is a working ODBC driver for it on your minion platform. maintainer Oldham ( cr...",""],
["ref/returners/all/salt.returners.postgres.html","salt.returners.postgres","salt.returners.postgres Return data to a postgresql server maintainer None maturity New depends psycopg2 platform all To enable this returner the minion will need the psycopg2 installed and the following values configured in the minion or master config: returner.postgres.host: &#39;salt&#39; returner.po...",""],
["ref/returners/all/salt.returners.postgres_local_cache.html","salt.returners.postgres_local_cache","salt.returners.postgres_local_cache Use a postgresql server for the master job cache. This helps the job cache to cope with scale. maintainer gjredelinghuys@gmail.com maturity New depends psycopg2 platform all To enable this returner the minion will need the psycopg2 installed and the following ...",""],
["ref/returners/all/salt.returners.redis_return.html","salt.returners.redis_return","salt.returners.redis_return Return data to a redis server To enable this returner the minion will need the python client for redis installed and the following values configured in the minion or master config, these are the defaults: redis.db: &#39;0&#39; redis.host: &#39;salt&#39; redis.port: 6379 Alternative c...",""],
["ref/returners/all/salt.returners.sentry_return.html","salt.returners.sentry_return","salt.returners.sentry_return Salt returner that report execution results back to sentry. The returner will inspect the payload to identify errors and flag them as such. Pillar needs something like: raven: servers: - http://192.168.1.1 - https://sentry.example.com public_key: deadbeefdeadbeefdead...",""],
["ref/returners/all/salt.returners.sms_return.html","salt.returners.sms_return","salt.returners.sms_return Return data by SMS. New in version 2015.2.0. maintainer Damian Myerscough maturity new depends twilio platform all To enable this returner the minion will need the python twilio library installed and the following values configured in the minion or master config: twilio...",""],
["ref/returners/all/salt.returners.smtp_return.html","salt.returners.smtp_return","salt.returners.smtp_return Return salt data via email The following fields can be set in the minion conf file: smtp.from (required) smtp.to (required) smtp.host (required) smtp.port (optional, defaults to 25) smtp.username (optional) smtp.password (optional) smtp.tls (optional, defaults to False...",""],
["ref/returners/all/salt.returners.sqlite3_return.html","salt.returners.sqlite3","salt.returners.sqlite3 Insert minion return data into a sqlite3 database maintainer Mickey Malone maturity New depends None platform All Sqlite3 is a serverless database that lives in a single file. In order to use this returner the database file must exist, have the appropriate schema defined, ...",""],
["ref/returners/all/salt.returners.syslog_return.html","salt.returners.syslog_return","salt.returners.syslog_return Return data to the host operating system&#39;s syslog facility Required python modules: syslog, json The syslog returner simply reuses the operating system&#39;s syslog facility to log return data To use the syslog returner, append &#39;--return syslog&#39; to the salt command. salt...",""],
["ref/returners/all/salt.returners.xmpp_return.html","salt.returners.xmpp_return","salt.returners.xmpp_return Return salt data via xmpp The following fields can be set in the minion conf file: xmpp.jid (required) xmpp.password (required) xmpp.recipient (required) xmpp.profile (optional) Alternative configuration values can be used by prefacing the configuration. Any values not...",""],
["ref/returners.html","Returners (salt.returners)","Returners (salt.returners) salt.returners.carbon_return salt.returners.cassandra_return salt.returners.couchbase_return salt.returners.couchdb_return salt.returners.django_return salt.returners.elasticsearch_return salt.returners.etcd_return salt.returners.kafka_return salt.returners.local_cache...",""],
["ref/roster/all/salt.roster.ansible.html","salt.roster.ansible","salt.roster.ansible Read in an Ansible inventory file or script Flat inventory files should be in the regular ansible inventory format. [servers] salt.gtmanfred.com ansible_ssh_user=gtmanfred ansible_ssh_host=127.0.0.1 ansible_ssh_port=22 ansible_ssh_pass=&#39;password&#39; [desktop] home ansible_ssh_us...",""],
["ref/roster/all/salt.roster.cache.html","salt.roster.cache","salt.roster.cache Use the minion cache on the master to derive IP addresses based on minion ID. Currently only contains logic to return an IPv4 address; does not handle IPv6, or authentication (passwords, keys, etc). It is possible to configure this roster to prefer a particular type of IP over ...",""],
["ref/roster/all/salt.roster.cloud.html","salt.roster.cloud","salt.roster.cloud Use the cloud cache on the master to derive IPv4 addresses based on minion ID. This roster requires that the minion in question was created using at least the 2015.2.0 version of Salt Cloud. Starting with the 2015.2.0 release, Salt Cloud maintains an index of minions that it cr...",""],
["ref/roster/all/salt.roster.clustershell.html","salt.roster.clustershell","salt.roster.clustershell requires clustershell https://github.com/cea-hpc/clustershell This roster resolves hostname in a pdsh/clustershell style. When you want to use host globs for target matching, use --roster clustershell. Example: salt-ssh --roster clustershell &#39;server_[1-10,21-30],test_ser...",""],
["ref/roster/all/salt.roster.flat.html","salt.roster.flat","salt.roster.flat Read in the roster from a flat file using the renderer system targets Syntax salt.roster.flat.targets( tgt, tgt_type=&#39;glob&#39;, **kwargs ) Details Return the targets from the flat yaml file, checks opts for location but defaults to /etc/salt/roster RosterMatcher Class Syntax salt.r...",""],
["ref/roster/all/salt.roster.scan.html","salt.roster.scan","salt.roster.scan Scan a netmask or ipaddr for open ssh ports targets Syntax salt.roster.scan.targets( tgt, tgt_type=&#39;glob&#39;, **kwargs ) Details Return the targets from the flat yaml file, checks opts for location but defaults to /etc/salt/roster RosterMatcher Class Syntax salt.roster.scan.RosterM...",""],
["ref/runners/all/salt.runners.cache.html","salt.runners.cache","salt.runners.cache Return cached data from minions clear_all Syntax salt.runners.cache.clear_all( tgt=None, expr_form=&#39;glob&#39; ) Details Clear the cached pillar, grains, and mine data of the targeted minions CLI Example: salt-run cache.clear_all clear_grains Syntax salt.runners.cache.clear_grains(...",""],
["ref/runners/all/salt.runners.cloud.html","salt.runners.cloud","salt.runners.cloud The Salt Cloud Runner This runner wraps the functionality of salt cloud making salt cloud routines available to all internal apis via the runner system action Syntax salt.runners.cloud.action( fun=None, cloudmap=None, instances=None, provider=None, instance=None, **kwargs ) De...",""],
["ref/runners/all/salt.runners.doc.html","salt.runners.doc","salt.runners.doc A runner module to collect and display the inline documentation from the various module types execution Syntax salt.runners.doc.execution( ) Details Collect all the sys.doc output from each minion and return the aggregate CLI Example: salt-run doc.execution runner Syntax salt.ru...",""],
["ref/runners/all/salt.runners.drac.html","salt.runners.drac","salt.runners.drac Manage Dell DRAC from the Master The login credentials need to be configured in the Salt master configuration file. code-block: yaml drac: username: admin password: secret poweroff Syntax salt.runners.drac.poweroff( hostname, timeout=20 ) Details Power server off CLI Example: s...",""],
["ref/runners/all/salt.runners.error.html","salt.runners.error","salt.runners.error Error generator to enable integration testing of salt runner error handling error Syntax salt.runners.error.error( name=None, message=&#39;&#39; ) Details If name is None Then return empty dict Otherwise raise an exception with __name__ from name, message from message CLI Example: sal...",""],
["ref/runners/all/salt.runners.f5.html","salt.runners.f5","salt.runners.f5 Runner to provide F5 Load Balancer functionality depends pycontrol Python module configuration In order to connect to a F5 Load Balancer, you must specify in the Salt master configuration the currently avilable load balancers load_balancers: bigip1.example.com username: admin pas...",""],
["ref/runners/all/salt.runners.fileserver.html","salt.runners.fileserver","salt.runners.fileserver Directly manage the Salt fileserver plugins clear_cache Syntax salt.runners.fileserver.clear_cache( backend=None ) New in version 2015.2.0. Clear the fileserver cache from VCS fileserver backends ( git , hg , svn ). Executing this runner with no arguments will clear the c...",""],
["ref/runners/all/salt.runners.git_pillar.html","salt.runners.git_pillar","salt.runners.git_pillar Directly manage the salt git_pillar plugin update Syntax salt.runners.git_pillar.update( branch, repo ) Details Execute an update for the configured git fileserver backend for Pillar CLI Example: salt-run git_pillar.update branch=&#39;branch&#39; repo=&#39;location&#39; Next ",""],
["ref/runners/all/salt.runners.http.html","salt.runners.http","salt.runners.http Module for making various web calls. Primarily designed for webhooks and the like, but also useful for basic http testing. New in version 2015.2. query Syntax salt.runners.http.query( url, output=True, **kwargs ) Details Query a resource, and decode the return data CLI Example:...",""],
["ref/runners/all/salt.runners.jobs.html","salt.runners.jobs","salt.runners.jobs A convenience system to manage jobs, both active and already run active Syntax salt.runners.jobs.active( outputter=None, display_progress=False ) Details Return a report on all actively running jobs from a job id centric perspective CLI Example: salt-run jobs.active list_job Sy...",""],
["ref/runners/all/salt.runners.launchd.html","salt.runners.launchd","salt.runners.launchd Manage launchd plist files write_launchd_plist Syntax salt.runners.launchd.write_launchd_plist( program ) Details Write a launchd plist for managing salt-master or salt-minion CLI Example: salt-run launchd.write_launchd_plist salt-master Next ",""],
["ref/runners/all/salt.runners.lxc.html","salt.runners.lxc","salt.runners.lxc Control Linux Containers via Salt depends lxc execution module cloud_init Syntax salt.runners.lxc.cloud_init( names, host=None, quiet=False, **kwargs ) Wrapper for using lxc.init in saltcloud compatibility mode Arguments Name Description names Name of the containers, supports a ...",""],
["ref/runners/all/salt.runners.manage.html","salt.runners.manage","salt.runners.manage General management functions for salt, tools like seeing what hosts are up and what hosts are down bootstrap Syntax salt.runners.manage.bootstrap( version=&#39;develop&#39;, script=None, hosts=&#39;&#39;, root_user=True ) Bootstrap minions with salt-bootstrap Arguments Name Description versi...",""],
["ref/runners/all/salt.runners.mine.html","salt.runners.mine","salt.runners.mine A runner to access data from the salt mine get Syntax salt.runners.mine.get( tgt, fun, tgt_type=&#39;glob&#39;, output=None ) Details Gathers the data from the specified minions&#39; mine, pass in the target, function to look up and the target type CLI Example: salt-run mine.get &#39;*&#39; networ...",""],
["ref/runners/all/salt.runners.nacl.html","salt.runners.nacl","salt.runners.nacl requires libnacl https://github.com/saltstack/libnacl This runner helps create encrypted passwords that can be included in pillars. This is often usefull if you wish to store your pillars in source control or share your pillar data with others that you trust. I dont advise maki...",""],
["ref/runners/all/salt.runners.network.html","salt.runners.network","salt.runners.network Network tools to run from the Master wol Syntax salt.runners.network.wol( mac, bcast=&#39;255.255.255.255&#39;, destport=9 ) Details Send a \"Magic Packet\" to wake up a Minion CLI Example: salt-run network.wol 08-00-27-13-69-77 salt-run network.wol 080027136977 255.255.255.255 7 salt...",""],
["ref/runners/all/salt.runners.pagerduty.html","salt.runners.pagerduty","salt.runners.pagerduty Runner Module for Firing Events via PagerDuty New in version 2014.1.0. configuration This module can be used by specifying the name of a configuration profile in the master config. For example: my-pagerduty-account: pagerduty.api_key: F3Rbyjbve43rfFWf2214 pagerduty.subdoma...",""],
["ref/runners/all/salt.runners.pillar.html","salt.runners.pillar","salt.runners.pillar Functions to interact with the pillar compiler on the master show_pillar Syntax salt.runners.pillar.show_pillar( minion=&#39;*&#39;, **kwargs ) Details Returns the compiled pillar either of a specific minion or just the global available pillars. I assume that no minion is using the i...",""],
["ref/runners/all/salt.runners.queue.html","salt.runners.queue","salt.runners.queue General management and processing of queues. This runner facilitates interacting with various queue backends such as the included sqlite3 queue or the planned AWS SQS and Redis queues The queue functions such as insert, delete, and pop can be used for typical management of the...",""],
["ref/runners/all/salt.runners.sdb.html","salt.runners.sdb","salt.runners.sdb Runner for setting and querying data via the sdb API on the master get Syntax salt.runners.sdb.get( uri ) Details Get a value from a db, using a uri in the form of sdb:// / . If the uri provided does not start with sdb://, then it will be returned as-is. CLI Example: salt &#39;*&#39; sd...",""],
["ref/runners/all/salt.runners.state.html","salt.runners.state","salt.runners.state Execute overstate functions event Syntax salt.runners.state.event( tagmatch=&#39;*&#39;, count=-1, quiet=False, sock_dir=None, pretty=False ) Watch Salt&#39;s event bus and block until the given tag is matched New in version 2014.7.0. This is useful for utilizing Salt&#39;s event bus from she...",""],
["ref/runners/all/salt.runners.survey.html","salt.runners.survey","salt.runners.survey A general map/reduce style salt runner for aggregating results returned by several different minions. New in version 2014.7.0. Aggregated results are sorted by the size of the minion pools which returned matching results. Useful for playing the game: \" some of these things ar...",""],
["ref/runners/all/salt.runners.test.html","salt.runners.test","salt.runners.test This runner is used only for test purposes and servers no production purpose arg Syntax salt.runners.test.arg( *args, **kwargs ) Details Output the given args and kwargs Kwargs will be filtered for &#39;private&#39; keynames. raw_arg Syntax salt.runners.test.raw_arg( *args, **kwargs ) ...",""],
["ref/runners/all/salt.runners.thin.html","salt.runners.thin","salt.runners.thin The thin runner is used to manage the salt thin systems. Salt Thin is a transport-less version of Salt that can be used to run routines in a standalone way. This runner has tools which generate the standalone salt system for easy consumption. generate Syntax salt.runners.thin.g...",""],
["ref/runners/all/salt.runners.virt.html","salt.runners.virt","salt.runners.virt Control virtual machines via Salt force_off Syntax salt.runners.virt.force_off( name ) Details Force power down the named virtual machine hyper_info Syntax salt.runners.virt.hyper_info( hyper=None ) Details Return information about the hypervisors connected to this master init ...",""],
["ref/runners/all/salt.runners.winrepo.html","salt.runners.winrepo","salt.runners.winrepo Runner to manage Windows software repo genrepo Syntax salt.runners.winrepo.genrepo( ) Details Generate win_repo_cachefile based on sls files in the win_repo CLI Example: salt-run winrepo.genrepo update_git_repos Syntax salt.runners.winrepo.update_git_repos( ) Details Checkou...",""],
["ref/runners.html","Runners (salt.runners)","Runners (salt.runners) salt.runners.cache salt.runners.cloud salt.runners.doc salt.runners.drac salt.runners.error salt.runners.f5 salt.runners.fileserver salt.runners.git_pillar salt.runners.http salt.runners.jobs salt.runners.launchd salt.runners.lxc salt.runners.manage salt.runners.mine salt....",""],
["ref/sdb/all/salt.sdb.etcd_db.html","salt.sdb.etcd_db","salt.sdb.etcd_db etcd Database Module maintainer SaltStack maturity New depends python-etcd platform all New in version 2015.2.0. This module allows access to the etcd database using an sdb:// URI. This package is located at https://pypi.python.org/pypi/python-etcd . Like all sdb modules, the et...",""],
["ref/sdb/all/salt.sdb.keyring_db.html","salt.sdb.keyring_db","salt.sdb.keyring_db Keyring Database Module maintainer SaltStack maturity New depends keyring platform all This module allows access to the keyring package using an sdb:// URI. This package is located at https://pypi.python.org/pypi/keyring . Care must be taken when using keyring. Not all keyend...",""],
["ref/sdb/all/salt.sdb.memcached.html","salt.sdb.memcached","salt.sdb.memcached Memcached sdb Module maintainer SaltStack maturity New depends python-memcached platform all This module allows access to memcached using an sdb:// URI. This package is located at https://pypi.python.org/pypi/python-memcached . Like all sdb modules, the memcached module requir...",""],
["ref/sdb/all/salt.sdb.sqlite3.html","salt.sdb.sqlite3","salt.sdb.sqlite3 SQLite sdb Module maintainer SaltStack maturity New platform all This module allows access to sqlite3 using an sdb:// URI Like all sdb modules, the sqlite3 module requires a configuration profile to be configured in either the minion or master configuration file. This profile re...",""],
["ref/sdb.html","SDB (salt.sdb)","SDB (salt.sdb) salt.sdb.etcd_db salt.sdb.keyring_db salt.sdb.memcached salt.sdb.sqlite3 Next ",""],
["ref/ssh-roster.html","SSH Roster Modules (salt.roster)","SSH Roster Modules (salt.roster) salt.roster.ansible salt.roster.cache salt.roster.cloud salt.roster.clustershell salt.roster.flat salt.roster.scan Next ",""],
["ref/state-modules.html","State Modules (salt.states)","State Modules (salt.states) salt.states.alias salt.states.alternatives salt.states.apache salt.states.apache_module salt.states.apt salt.states.archive salt.states.jboss7 salt.states.at salt.states.augeas salt.states.aws_sqs salt.states.blockdev salt.states.boto_asg salt.states.boto_cloudwatch_a...",""],
["ref/states/aggregate.html","Mod Aggregate State Runtime Modifications","Mod Aggregate State Runtime Modifications New in version 2014.7.0. The mod_aggregate system was added in the 2014.7.0 release of Salt and allows for runtime modification of the executing state data. Simply put, it allows for the data used by Salt&#39;s state system to be changed on the fly at runtim...",""],
["ref/states/all/salt.states.alias.html","salt.states.alias","salt.states.alias Configuration of email aliases The mail aliases file can be managed to contain definitions for specific email aliases: username: alias.present: - target: user@example.com thomas: alias.present: - target: thomas@example.com absent Syntax salt.states.alias.absent( name ) Ensure t...",""],
["ref/states/all/salt.states.alternatives.html","salt.states.alternatives","salt.states.alternatives Configuration of the alternatives system Control the alternatives system {% set my_hadoop_conf = &#39;/opt/hadoop/conf&#39; %} {{ my_hadoop_conf }}: file.directory hadoop-0.20-conf: alternatives.install: - name: hadoop-0.20-conf - link: /etc/hadoop-0.20/conf - path: {{ my_hadoop...",""],
["ref/states/all/salt.states.apache.html","salt.states.apache","salt.states.apache Apache state New in version 2014.7.0. Allows for inputting a yaml dictionary into a file for apache configuration files. The variable this is special and signifies what should be included with the above word between angle brackets ( ). /etc/httpd/conf.d/website.com.conf: apach...",""],
["ref/states/all/salt.states.apache_module.html","salt.states.apache_module","salt.states.apache_module Manage Apache Modules New in version 2014.7.0. Enable and disable apache modules. Enable cgi module: apache_module.enable: - name: cgi Disable cgi module: apache_module.disable: - name: cgi disable Syntax salt.states.apache_module.disable( name ) Ensure an Apache module...",""],
["ref/states/all/salt.states.apt.html","salt.states.apt","salt.states.apt Package management operations specific to APT- and DEB-based systems held Syntax salt.states.apt.held( name ) Set package in &#39;hold&#39; state, meaning it will not be upgraded. Arguments Name Description name The name of the package, e.g., &#39;tmux&#39; Next ",""],
["ref/states/all/salt.states.archive.html","salt.states.archive","salt.states.archive Extract an archive New in version 2014.1.0. extracted Syntax salt.states.archive.extracted( name, source, archive_format, archive_user=None, tar_options=None, source_hash=None, if_missing=None, keep=False ) New in version 2014.1.0. State that make sure an archive is extracted...",""],
["ref/states/all/salt.states.artifactory.html","salt.states.jboss7","salt.states.jboss7 This state downloads artifacts from artifactory. downloaded Syntax salt.states.artifactory.downloaded( name, artifact, target_dir=&#39;/tmp&#39;, target_file=None ) Ensures that the artifact from artifactory exists at given location. If it doesn&#39;t exist, then it will be downloaded. It...",""],
["ref/states/all/salt.states.at.html","salt.states.at","salt.states.at Configuration disposable regularly scheduled tasks for at. The at state can be add disposable regularly scheduled tasks for your system. absent Syntax salt.states.at.absent( name, jobid=None, **kwargs ) Remove a job from queue The &#39;kwargs&#39; can include hour. minute. day. month. yea...",""],
["ref/states/all/salt.states.augeas.html","salt.states.augeas","salt.states.augeas Configuration management using Augeas New in version 0.17.0. This state requires the augeas Python module. Augeas can be used to manage configuration files. Important: Minimal installations of Debian and Ubuntu have been seen to have packaging bugs with python-augeas, causing ...",""],
["ref/states/all/salt.states.aws_sqs.html","salt.states.aws_sqs","salt.states.aws_sqs Manage SQS Queues Create and destroy SQS queues. Be aware that this interacts with Amazon&#39;s services, and so may incur charges. This module uses the awscli tool provided by Amazon. This can be downloaded from pip. Also check the documentation for awscli for configuration info...",""],
["ref/states/all/salt.states.blockdev.html","salt.states.blockdev","salt.states.blockdev Management of Block Devices A state module to manage blockdevices /dev/sda: blockdev.tuned: - read-only: True master-data: blockdev.tuned:: - name : /dev/vg/master-data - read-only: True - read-ahead: 1024 New in version 2014.7.0. formatted Syntax salt.states.blockdev.format...",""],
["ref/states/all/salt.states.boto_asg.html","salt.states.boto_asg","salt.states.boto_asg Manage Autoscale Groups New in version 2014.7.0. Create and destroy autoscale groups. Be aware that this interacts with Amazon&#39;s services, and so may incur charges. This module uses boto, which can be installed via package, or pip. This module accepts explicit autoscale cred...",""],
["ref/states/all/salt.states.boto_cloudwatch_alarm.html","salt.states.boto_cloudwatch_alarm","salt.states.boto_cloudwatch_alarm Manage Cloudwatch alarms New in version 2014.7.0. Create and destroy cloudwatch alarms. Be aware that this interacts with Amazon&#39;s services, and so may incur charges. This module uses boto, which can be installed via package, or pip. This module accepts explicit...",""],
["ref/states/all/salt.states.boto_dynamodb.html","salt.states.boto_dynamodb","salt.states.boto_dynamodb Manage DynamoDB Tables New in version 2015.2. Create and destroy DynamoDB tables. Be aware that this interacts with Amazon&#39;s services, and so may incur charges. This module uses boto , which can be installed via package, or pip. This module accepts explicit DynamoDB cre...",""],
["ref/states/all/salt.states.boto_elasticache.html","salt.states.boto_elasticache","salt.states.boto_elasticache Manage Elasticache New in version 2014.7.0. Create, destroy and update Elasticache clusters. Be aware that this interacts with Amazon&#39;s services, and so may incur charges. Note: This module currently only supports creation and deletion of elasticache resources and wi...",""],
["ref/states/all/salt.states.boto_elb.html","salt.states.boto_elb","salt.states.boto_elb Manage ELBs New in version 2014.7.0. Create and destroy ELBs. Be aware that this interacts with Amazon&#39;s services, and so may incur charges. This module uses boto , which can be installed via package, or pip. This module accepts explicit elb credentials but can also utilize ...",""],
["ref/states/all/salt.states.boto_iam_role.html","salt.states.boto_iam_role","salt.states.boto_iam_role Manage IAM roles New in version 2014.7.0. This module uses boto , which can be installed via package, or pip. This module accepts explicit IAM credentials but can also utilize IAM roles assigned to the instance through Instance Profiles. Dynamic credentials are then aut...",""],
["ref/states/all/salt.states.boto_lc.html","salt.states.boto_lc","salt.states.boto_lc Manage Launch Configurations New in version 2014.7.0. Create and destroy Launch Configurations. Be aware that this interacts with Amazon&#39;s services, and so may incur charges. A limitation of this module is that you can not modify launch configurations once they have been crea...",""],
["ref/states/all/salt.states.boto_route53.html","salt.states.boto_route53","salt.states.boto_route53 Manage Route53 records New in version 2014.7.0. Create and delete Route53 records. Be aware that this interacts with Amazon&#39;s services, and so may incur charges. This module uses boto , which can be installed via package, or pip. This module accepts explicit route53 cred...",""],
["ref/states/all/salt.states.boto_secgroup.html","salt.states.boto_secgroup","salt.states.boto_secgroup Manage Security Groups New in version 2014.7.0. Create and destroy Security Groups. Be aware that this interacts with Amazon&#39;s services, and so may incur charges. This module uses boto , which can be installed via package, or pip. This module accepts explicit EC2 creden...",""],
["ref/states/all/salt.states.boto_sns.html","salt.states.boto_sns","salt.states.boto_sns Manage SNS Topics Create and destroy SNS topics. Be aware that this interacts with Amazon&#39;s services, and so may incur charges. This module uses boto , which can be installed via package, or pip. This module accepts explicit AWS credentials but can also utilize IAM roles ass...",""],
["ref/states/all/salt.states.boto_sqs.html","salt.states.boto_sqs","salt.states.boto_sqs Manage SQS Queues New in version 2014.7.0. Create and destroy SQS queues. Be aware that this interacts with Amazon&#39;s services, and so may incur charges. This module uses boto , which can be installed via package, or pip. This module accepts explicit SQS credentials but can a...",""],
["ref/states/all/salt.states.chef.html","salt.states.chef","salt.states.chef Execute Chef client runs Run chef-client or chef-solo my-chef-run: chef.client: - override-runlist: &#39;demo1,demo2&#39; - server: &#39;https://chef.domain.com&#39; default-chef-run: chef.client: [] my-solo-run: chef.solo: - environment: dev client Syntax salt.states.chef.client( name, **kwarg...",""],
["ref/states/all/salt.states.cloud.html","salt.states.cloud","salt.states.cloud Using states instead of maps to deploy clouds New in version 2014.1.0. Use this minion to spin up a cloud instance: my-ec2-instance: cloud.profile: my-ec2-config absent Syntax salt.states.cloud.absent( name, onlyif=None, unless=None ) Ensure that no instances with the specified...",""],
["ref/states/all/salt.states.cmd.html","salt.states.cmd","salt.states.cmd Execution of arbitrary commands The cmd state module manages the enforcement of executed commands, this state can tell a command to run under certain circumstances. A simple example to execute a command: date /tmp/salt-run: cmd.run Only run if another execution failed, in this ca...",""],
["ref/states/all/salt.states.composer.html","salt.states.composer","salt.states.composer Installation of Composer Packages These states manage the installed packages for composer for PHP. Note that either composer is installed and accessible via a bin directory or you can pass the location of composer in the state. get-composer: cmd.run: - name: &#39;CURL=`which cur...",""],
["ref/states/all/salt.states.cron.html","salt.states.cron","salt.states.cron Management of cron, the Unix command scheduler Cron declarations require a number of parameters. The following are the parameters used by Salt to define the various timing values for a cron job: minute hour daymonth month dayweek (0 to 6 are Sunday through Saturday, 7 can also b...",""],
["ref/states/all/salt.states.cyg.html","salt.states.cyg","salt.states.cyg Installation of Cygwin packages. A state module to manage cygwin packages. Packages can be installed or removed. dos2unix: cyg.installed installed Syntax salt.states.cyg.installed( name, cyg_arch=&#39;x86_64&#39;, mirrors=None ) Make sure that a package is installed. Arguments Name Descr...",""],
["ref/states/all/salt.states.ddns.html","salt.states.ddns","salt.states.ddns Dynamic DNS updates Ensure a DNS record is present or absent utilizing RFC 2136 type dynamic updates. Requires dnspython module. webserver: ddns.present: - zone: example.com - ttl: 60 - data: 111.222.333.444 - nameserver: 123.234.345.456 - keyfile: /srv/salt/tsig_key.txt absent ...",""],
["ref/states/all/salt.states.debconfmod.html","salt.states.debconfmod","salt.states.debconfmod Management of debconf selections depends debconf-utils package The debconfmod state module manages the enforcement of debconf selections, this state can set those selections prior to package installation. Available Functions The debconfmod state has two functions, the set ...",""],
["ref/states/all/salt.states.disk.html","salt.states.disk","salt.states.disk Disk monitoring state Monitor the state of disk resources status Syntax salt.states.disk.status( name, maximum=None, minimum=None ) Details Return the current disk usage stats for the named mount point Next ",""],
["ref/states/all/salt.states.dockerio.html","salt.states.dockerio","salt.states.dockerio Manage Docker containers Docker is a lightweight, portable, self-sufficient software container wrapper. The base supported wrapper type is LXC , cgroups , and the Linux Kernel . Important: This state module is beta. The API is subject to change. No promise as to performance ...",""],
["ref/states/all/salt.states.drac.html","salt.states.drac","salt.states.drac Management of Dell DRAC The DRAC module is used to create and manage DRAC cards on Dell servers Ensure the user damian is present damian: drac.present: - name: damian - password: secret - permission: login,test_alerts,clear_logs Ensure the user damian does not exist damian: drac...",""],
["ref/states/all/salt.states.environ.html","salt.states.environ","salt.states.environ Support for getting and setting the environment variables of the current salt process. setenv Syntax salt.states.environ.setenv( name, value, false_unsets=False, clear_all=False, update_minion=False ) Set the salt process environment variables. Arguments Name Description name...",""],
["ref/states/all/salt.states.eselect.html","salt.states.eselect","salt.states.eselect Management of Gentoo configuration using eselect A state module to manage Gentoo configuration via eselect profile: eselect.set: target: hardened/linux/amd64 set_ Syntax salt.states.eselect.set_( name, target, module_parameter=None, action_parameter=None ) Verify that the giv...",""],
["ref/states/all/salt.states.event.html","salt.states.event","salt.states.event Send events through Salt&#39;s event system during state runs send Syntax salt.states.event.send( name, data=None, preload=None, with_env=False, with_grains=False, with_pillar=False, **kwargs ) Details Send an event to the Salt Master New in version 2014.7.0. Accepts the same argum...",""],
["ref/states/all/salt.states.file.html","salt.states.file","salt.states.file Operations on regular files, special files, directories, and symlinks Salt States can aggressively manipulate files on a system. There are a number of ways in which files can be managed. Regular files can be enforced with the file.managed state. This state downloads files from t...",""],
["ref/states/all/salt.states.gem.html","salt.states.gem","salt.states.gem Installation of Ruby modules packaged as gems A state module to manage rubygems. Gems can be set up to be installed or removed. This module will use RVM or rbenv if they are installed. In that case, you can specify what ruby version and gemset to target. addressable: gem.installe...",""],
["ref/states/all/salt.states.git.html","salt.states.git","salt.states.git Interaction with Git repositories Important: Before using git over ssh, make sure your remote host fingerprint exists in \"~/.ssh/known_hosts\" file. To avoid requiring password authentication, it is also possible to pass private keys to use explicitly. https://github.com/saltstack...",""],
["ref/states/all/salt.states.glusterfs.html","salt.states.glusterfs","salt.states.glusterfs Manage glusterfs pool. add_volume_bricks Syntax salt.states.glusterfs.add_volume_bricks( name, bricks ) Add brick(s) to an existing volume Arguments Name Description name Volume name bricks List of bricks to add to the volume Add brick(s) to an existing volume Name Descript...",""],
["ref/states/all/salt.states.gnomedesktop.html","salt.states.gnomedesktop","salt.states.gnomedesktop Configuration of the GNOME desktop Control the GNOME settings localdesktop_wm_prefs: gnomedesktop.wm_preferences: - user: username - audible_bell: false - action_double_click_titlebar: &#39;toggle-maximize&#39; - visual_bell: true - num_workspaces: 6 localdesktop_lockdown: gnome...",""],
["ref/states/all/salt.states.grafana.html","salt.states.grafana","salt.states.grafana Manage Grafana Dashboards This module uses elasticsearch , which can be installed via package, or pip. You can specify elasticsearch hosts directly to the module, or you can use an elasticsearch profile via pillars: mygrafanaprofile: hosts: - es1.example.com:9200 - es2.exampl...",""],
["ref/states/all/salt.states.grains.html","salt.states.grains","salt.states.grains Manage grains on the minion This state allows for grains to be set. Grains set or altered this way are stored in the &#39;grains&#39; file on the minions, by default at: /etc/salt/grains Note: This does NOT override any grains set in the minion file. absent Syntax salt.states.grains.a...",""],
["ref/states/all/salt.states.group.html","salt.states.group","salt.states.group Management of user groups The group module is used to create and manage unix group settings, groups can be either present or absent: cheese: group.present: - gid: 7648 - system: True - addusers: - user1 - users2 - delusers: - foo cheese: group.present: - gid: 7648 - system: Tru...",""],
["ref/states/all/salt.states.hg.html","salt.states.hg","salt.states.hg Interaction with Mercurial repositories Before using hg over ssh, make sure the remote host fingerprint already exists in ~/.ssh/known_hosts, and the remote host has this host&#39;s public key. https://bitbucket.org/example_user/example_repo: hg.latest: - rev: tip - target: /tmp/examp...",""],
["ref/states/all/salt.states.hipchat.html","salt.states.hipchat","salt.states.hipchat Send a message to Hipchat This state is useful for sending messages to Hipchat during state runs. New in version 2015.2.0. hipchat-message: hipchat.send_message: - room_id: 123456 - from_name: SuperAdmin - message: &#39;This state was executed successfully.&#39; - api_key: peWcBiMOS9...",""],
["ref/states/all/salt.states.host.html","salt.states.host","salt.states.host Management of addresses and names in hosts file The /etc/hosts file can be managed to contain definitions for specific hosts: salt-master: host.present: - ip: 192.168.0.42 Or using the names directive, you can put several names for the same IP. (Do not try one name with space-se...",""],
["ref/states/all/salt.states.htpasswd.html","salt.states.htpasswd","salt.states.htpasswd Support for htpasswd module New in version 2014.7.0. username: webutil.user_exists: - password: secr3t - htpasswd_file: /etc/nginx/htpasswd - options: d - force: true user_exists Syntax salt.states.htpasswd.user_exists( name, password=None, htpasswd_file=None, options=&#39;&#39;, fo...",""],
["ref/states/all/salt.states.http.html","salt.states.http","salt.states.http HTTP monitoring states Perform an HTTP query and statefully return the result query Syntax salt.states.http.query( name, match=None, match_type=&#39;string&#39;, status=None, **kwargs ) Details Perform an HTTP query and statefully return the result Next ",""],
["ref/states/all/salt.states.incron.html","salt.states.incron","salt.states.incron Management of incron, the inotify cron The incron state module allows for user incrontabs to be cleanly managed. Incron declarations require a number of parameters. The parameters needed to be declared: path , mask , and cmd . The user whose incrontab is to be edited also need...",""],
["ref/states/all/salt.states.influxdb_database.html","salt.states.influxdb_database","salt.states.influxdb_database Management of InfluxDB databases (compatible with InfluxDB version 0.5+) New in version 2014.7.0. absent Syntax salt.states.influxdb_database.absent( name, user=None, password=None, host=None, port=None ) Ensure that the named database is absent Arguments Name Descr...",""],
["ref/states/all/salt.states.influxdb_user.html","salt.states.influxdb_user","salt.states.influxdb_user Management of InfluxDB users (compatible with InfluxDB version 0.5+) New in version 2014.7.0. absent Syntax salt.states.influxdb_user.absent( name, database=None, user=None, password=None, host=None, port=None ) Ensure that the named cluster admin or database user is ab...",""],
["ref/states/all/salt.states.ini_manage.html","salt.states.ini_manage","salt.states.ini_manage Manage ini files maintainer maturity new depends re platform all use section as DEFAULT_IMPLICIT if your ini file does not have any section for example /etc/sysctl.conf options_absent Syntax salt.states.ini_manage.options_absent( name, sections=None ) Details /home/saltmin...",""],
["ref/states/all/salt.states.ipset.html","salt.states.ipset","salt.states.ipset Management of ipsets This is an ipset-specific module designed to manage IPSets for use in IPTables Firewalls. setname: ipset.set_present: - set_type: bitmap:ip - range: 192.168.0.0/16 - comment: True setname: ipset.set_absent: - set_type: bitmap:ip - range: 192.168.0.0/16 - co...",""],
["ref/states/all/salt.states.iptables.html","salt.states.iptables","salt.states.iptables Management of iptables This is an iptables-specific module designed to manage Linux firewalls. It is expected that this state module, and other system-specific firewall states, may at some point be deprecated in favor of a more generic firewall state. httpd: iptables.append:...",""],
["ref/states/all/salt.states.jboss7.html","salt.states.jboss7","salt.states.jboss7 Manage JBoss 7 Application Server via CLI interface This state uses jboss-cli.sh script from JBoss installation and parses its output to determine execution result. In order to run each state, jboss_config dictionary with the following properties must be passed: jboss: cli_pat...",""],
["ref/states/all/salt.states.keyboard.html","salt.states.keyboard","salt.states.keyboard Management of keyboard layouts The keyboard layout can be managed for the system: us: keyboard.system Or it can be managed for XOrg: us: keyboard.xorg system Syntax salt.states.keyboard.system( name ) Set the keyboard layout for the system Arguments Name Description name The...",""],
["ref/states/all/salt.states.keystone.html","salt.states.keystone","salt.states.keystone Management of Keystone users depends keystoneclient Python module configuration See salt.modules.keystone for setup instructions. Keystone tenants: keystone.tenant_present: - names: - admin - demo - service Keystone roles: keystone.role_present: - names: - admin - Member adm...",""],
["ref/states/all/salt.states.kmod.html","salt.states.kmod","salt.states.kmod Loading and unloading of kernel modules The Kernel modules on a system can be managed cleanly with the kmod state module: kvm_amd: kmod.present pcspkr: kmod.absent absent Syntax salt.states.kmod.absent( name, persist=False, comment=True ) Verify that the named kernel module is n...",""],
["ref/states/all/salt.states.layman.html","salt.states.layman","salt.states.layman Management of Gentoo Overlays using layman A state module to manage Gentoo package overlays via layman sunrise: layman.present absent Syntax salt.states.layman.absent( name ) Verify that the overlay is absent Arguments Name Description name The name of the overlay to delete pr...",""],
["ref/states/all/salt.states.libvirt.html","salt.states.libvirt","salt.states.libvirt Manage libvirt certificates This state uses the external pillar in the master to call for the generation and signing of certificates for systems running libvirt: libvirt_keys: libvirt.keys keys Syntax salt.states.libvirt.keys( name, basepath=&#39;/etc/pki&#39; ) Manage libvirt keys. ...",""],
["ref/states/all/salt.states.linux_acl.html","salt.states.linux_acl","salt.states.linux_acl Linux File Access Control Lists Ensure a Linux ACL is present Ensure a Linux ACL does not exist absent Syntax salt.states.linux_acl.absent( name, acl_type, acl_name, perms, recurse=False ) Details Ensure a Linux ACL does not exist present Syntax salt.states.linux_acl.presen...",""],
["ref/states/all/salt.states.locale.html","salt.states.locale","salt.states.locale Management of languages/locales The locale can be managed for the system: en_US.UTF-8: locale.system present Syntax salt.states.locale.present( name ) Generate a locale if it is not present New in version 2014.7.0. Arguments Name Description name The name of the locale to be p...",""],
["ref/states/all/salt.states.lvm.html","salt.states.lvm","salt.states.lvm Management of Linux logical volumes A state module to manage LVMs /dev/sda: lvm.pv_present my_vg: lvm.vg_present: - devices: /dev/sda lvroot: lvm.lv_present: - vgname: my_vg - size: 10G - stripes: 5 - stripesize: 8K lv_absent Syntax salt.states.lvm.lv_absent( name, vgname=None ) ...",""],
["ref/states/all/salt.states.lvs_server.html","salt.states.lvs_server","salt.states.lvs_server Management of LVS (Linux Virtual Server) Real Server absent Syntax salt.states.lvs_server.absent( name, protocol=None, service_address=None, server_address=None ) Ensure the LVS Real Server in specified service is absent. Arguments Name Description name The name of the LVS...",""],
["ref/states/all/salt.states.lvs_service.html","salt.states.lvs_service","salt.states.lvs_service Management of LVS (Linux Virtual Server) Service absent Syntax salt.states.lvs_service.absent( name, protocol=None, service_address=None ) Ensure the LVS service is absent. Arguments Name Description name The name of the LVS service protocol The service protocol service_a...",""],
["ref/states/all/salt.states.lxc.html","salt.states.lxc","salt.states.lxc Manage Linux Containers absent Syntax salt.states.lxc.absent( name ) Ensure a container is not present, destroying it if present Arguments Name Description name Name of the container to destroy Details web01: lxc.absent cloned Syntax salt.states.lxc.cloned( name, orig, snapshot=T...",""],
["ref/states/all/salt.states.makeconf.html","salt.states.makeconf","salt.states.makeconf Management of Gentoo make.conf A state module to manage Gentoo&#39;s make.conf file makeopts: makeconf.present: - value: &#39;-j3&#39; absent Syntax salt.states.makeconf.absent( name ) Verify that the variable is not in the make.conf . Arguments Name Description name The variable name. ...",""],
["ref/states/all/salt.states.mdadm.html","salt.states.mdadm","salt.states.mdadm Managing software RAID with mdadm A state module for creating or destroying software RAID devices. /dev/md0: raid.present: - level: 5 - devices: - /dev/xvdd - /dev/xvde - /dev/xvdf - chunk: 256 - run: True absent Syntax salt.states.mdadm.absent( name ) Verify that the raid is a...",""],
["ref/states/all/salt.states.memcached.html","salt.states.memcached","salt.states.memcached States for Management of Memcached Keys New in version 2014.1.0. absent Syntax salt.states.memcached.absent( name, value=None, host=&#39;127.0.0.1&#39;, port=11211, time=0 ) Ensure that a memcached key is not present. Arguments Name Description name The key value If specified, only...",""],
["ref/states/all/salt.states.modjk.html","salt.states.modjk","salt.states.modjk State to control Apache modjk worker_activated Syntax salt.states.modjk.worker_activated( name, workers=None, profile=&#39;default&#39; ) Details Activate all the workers in the modjk load balancer Example: loadbalancer: modjk.worker_activated: - workers: - app1 - app2 worker_disabled ...",""],
["ref/states/all/salt.states.modjk_worker.html","salt.states.modjk_worker","salt.states.modjk_worker Manage modjk workers Send commands to a modjk load balancer via the peer system. This module can be used with the prereq requisite to remove/add the worker from the load balancer before deploying/restarting service. Mandatory Settings: The minion needs to have permission...",""],
["ref/states/all/salt.states.module.html","salt.states.module","salt.states.module Execution of Salt modules from within states These states allow individual execution module calls to be made via states. To call a single module function use a module.run state: mine.send: module.run: - name: network.interfaces Note that this example is probably unnecessary to...",""],
["ref/states/all/salt.states.mongodb_database.html","salt.states.mongodb_database","salt.states.mongodb_database Management of Mongodb databases Only deletion is supported, creation doesn&#39;t make sense and can be done using mongodb_user.present absent Syntax salt.states.mongodb_database.absent( name, user=None, password=None, host=None, port=None ) Ensure that the named database...",""],
["ref/states/all/salt.states.mongodb_user.html","salt.states.mongodb_user","salt.states.mongodb_user Management of Mongodb users Note: This module requires PyMongo to be installed. absent Syntax salt.states.mongodb_user.absent( name, user=None, password=None, host=None, port=None, database=&#39;admin&#39; ) Ensure that the named user is absent Arguments Name Description name Th...",""],
["ref/states/all/salt.states.mount.html","salt.states.mount","salt.states.mount Mounting of filesystems Mount any type of mountable filesystem with the mounted function: /mnt/sdb: mount.mounted: - device: /dev/sdb1 - fstype: ext4 - mkmnt: True - opts: - defaults /srv/bigdata: mount.mounted: - device: UUID=066e0200-2867-4ebe-b9e6-f30026ca2314 - fstype: xfs ...",""],
["ref/states/all/salt.states.mysql_database.html","salt.states.mysql_database","salt.states.mysql_database Management of MySQL databases (schemas) depends MySQLdb Python module configuration See salt.modules.mysql for setup instructions. The mysql_database module is used to create and manage MySQL databases. Databases can be set as either absent or present. frank: mysql_dat...",""],
["ref/states/all/salt.states.mysql_grants.html","salt.states.mysql_grants","salt.states.mysql_grants Management of MySQL grants (user permissions) depends MySQLdb Python module configuration See salt.modules.mysql for setup instructions. The mysql_grants module is used to grant and revoke MySQL permissions. The name you pass in purely symbolic and does not have anything...",""],
["ref/states/all/salt.states.mysql_query.html","salt.states.mysql_query","salt.states.mysql_query Execution of MySQL queries New in version 2014.7.0. depends MySQLdb Python module configuration See salt.modules.mysql for setup instructions. The mysql_query module is used to execute queries on MySQL databases. Its output may be stored in a file or in a grain. query_id:...",""],
["ref/states/all/salt.states.mysql_user.html","salt.states.mysql_user","salt.states.mysql_user Management of MySQL users depends MySQLdb Python module configuration See salt.modules.mysql for setup instructions. frank: mysql_user.present: - host: localhost - password: bobcat New in version 0.16.2: Authentication overrides have been added. The MySQL authentication in...",""],
["ref/states/all/salt.states.network.html","salt.states.network","salt.states.network Configuration of network interfaces The network module is used to create and manage network settings, interfaces can be set as either managed or ignored. By default all interfaces are ignored unless specified. Note: Prior to version 2014.1.0, only RedHat-based systems (RHEL, ...",""],
["ref/states/all/salt.states.nftables.html","salt.states.nftables","salt.states.nftables Management of nftables This is an nftables-specific module designed to manage Linux firewalls. It is expected that this state module, and other system-specific firewall states, may at some point be deprecated in favor of a more generic firewall state. httpd: nftables.append:...",""],
["ref/states/all/salt.states.npm.html","salt.states.npm","salt.states.npm Installation of NPM Packages These states manage the installed packages for node.js using the Node Package Manager (npm). Note that npm must be installed for these states to be available, so npm states should include a requisite to a pkg.installed state for the package which prov...",""],
["ref/states/all/salt.states.ntp.html","salt.states.ntp","salt.states.ntp Management of NTP servers New in version 2014.1.0. This state is used to manage NTP servers. Currently only Windows is supported. win_ntp: ntp.managed: - servers: - pool.ntp.org - us.pool.ntp.org managed Syntax salt.states.ntp.managed( name, servers=None ) Manage NTP servers Argu...",""],
["ref/states/all/salt.states.openstack_config.html","salt.states.openstack_config","salt.states.openstack_config Manage OpenStack configuration file settings. maintainer Jeffrey C. Ollie maturity new depends platform linux absent Syntax salt.states.openstack_config.absent( name, filename, section, parameter=None ) Ensure a value is not set in an OpenStack configuration file. Ar...",""],
["ref/states/all/salt.states.pagerduty.html","salt.states.pagerduty","salt.states.pagerduty Create an Event in PagerDuty New in version 2014.1.0. This state is useful for creating events on the PagerDuty service during state runs. server-warning-message: pagerduty.create_event: - name: &#39;This is a server warning message&#39; - details: &#39;This is a much more detailed mes...",""],
["ref/states/all/salt.states.pecl.html","salt.states.pecl","salt.states.pecl Installation of PHP Extensions Using pecl These states manage the installed pecl extensions. Note that php-pear must be installed for these states to be available, so pecl states should include a requisite to a pkg.installed state for the package which provides pecl ( php-pear i...",""],
["ref/states/all/salt.states.pip_state.html","salt.states.pip_state","salt.states.pip_state Installation of Python Packages Using pip These states manage system installed python packages. Note that pip must be installed for these states to be available, so pip states should include a requisite to a pkg.installed state for the package which provides pip ( python-pi...",""],
["ref/states/all/salt.states.pkg.html","salt.states.pkg","salt.states.pkg Installation of packages using OS package managers such as yum or apt-get Salt can manage software packages via the pkg state module, packages can be set up to be installed, latest, removed and purged. Package management declarations are typically rather simple: vim: pkg.installe...",""],
["ref/states/all/salt.states.pkgng.html","salt.states.pkgng","salt.states.pkgng Manage package remote repo using FreeBSD pkgng Salt can manage the URL pkgng pulls packages from. ATM the state and module are small so use cases are typically rather simple: pkgng_clients: pkgng.update_packaging_site: - name: \"http://192.168.0.2\" update_packaging_site Syntax s...",""],
["ref/states/all/salt.states.pkgrepo.html","salt.states.pkgrepo","salt.states.pkgrepo Management of APT/YUM package repos Package repositories for APT-based and YUM-based distros can be managed with these states. Here is some example SLS: base: pkgrepo.managed: - humanname: CentOS-$releasever - Base - mirrorlist: http://mirrorlist.centos.org/?release=$releasev...",""],
["ref/states/all/salt.states.portage_config.html","salt.states.portage_config","salt.states.portage_config Management of Portage package configuration on Gentoo A state module to manage Portage configuration on Gentoo salt: portage_config.flags: - use: - openssl flags Syntax salt.states.portage_config.flags( name, use=None, accept_keywords=None, env=None, license=None, prop...",""],
["ref/states/all/salt.states.ports.html","salt.states.ports","salt.states.ports Manage software from FreeBSD ports New in version 2014.1.0. Note: It may be helpful to use a higher timeout when running a ports.installed state, since compiling the port may exceed Salt&#39;s timeout. salt -t 1200 &#39;*&#39; state.highstate installed Syntax salt.states.ports.installed( n...",""],
["ref/states/all/salt.states.postgres_database.html","salt.states.postgres_database","salt.states.postgres_database Management of PostgreSQL databases The postgres_database module is used to create and manage Postgres databases. Databases can be set as either absent or present frank: postgres_database.present absent Syntax salt.states.postgres_database.absent( name, user=None, ma...",""],
["ref/states/all/salt.states.postgres_extension.html","salt.states.postgres_extension","salt.states.postgres_extension Management of PostgreSQL extensions (e.g.: postgis) The postgres_extensions module is used to create and manage Postgres extensions. adminpack: postgres_extension.present New in version 2014.7.0. absent Syntax salt.states.postgres_extension.absent( name, if_exists=...",""],
["ref/states/all/salt.states.postgres_group.html","salt.states.postgres_group","salt.states.postgres_group Management of PostgreSQL groups (roles) The postgres_group module is used to create and manage Postgres groups. frank: postgres_group.present absent Syntax salt.states.postgres_group.absent( name, user=None, maintenance_db=None, db_password=None, db_host=None, db_port=...",""],
["ref/states/all/salt.states.postgres_schema.html","salt.states.postgres_schema","salt.states.postgres_schema Management of PostgreSQL schemas The postgres_schemas module is used to create and manage Postgres schemas. public: postgres_schema.present &#39;dbname&#39; &#39;name&#39; absent Syntax salt.states.postgres_schema.absent( dbname, name, db_user=None, db_password=None, db_host=None, db...",""],
["ref/states/all/salt.states.postgres_user.html","salt.states.postgres_user","salt.states.postgres_user Management of PostgreSQL users (roles) The postgres_users module is used to create and manage Postgres users. frank: postgres_user.present absent Syntax salt.states.postgres_user.absent( name, user=None, maintenance_db=None, db_password=None, db_host=None, db_port=None,...",""],
["ref/states/all/salt.states.powerpath.html","salt.states.powerpath","salt.states.powerpath Powerpath configuration support Allows configuration of EMC Powerpath. Currently only addition/deletion of licenses is supported. key: powerpath.license_present: [] license_absent Syntax salt.states.powerpath.license_absent( name ) Ensures that the specified PowerPath licen...",""],
["ref/states/all/salt.states.process.html","salt.states.process","salt.states.process Process Management Ensure a process matching a given pattern is absent. httpd-absent: process.absent: - name: apache2 absent Syntax salt.states.process.absent( name, user=None, signal=None ) Ensures that the named command is not running. Arguments Name Description name The pa...",""],
["ref/states/all/salt.states.pyenv.html","salt.states.pyenv","salt.states.pyenv Managing python installations with pyenv This module is used to install and manage python installations with pyenv. Different versions of python can be installed, and uninstalled. pyenv will be installed automatically the first time it is needed and can be updated later. This m...",""],
["ref/states/all/salt.states.pyrax_queues.html","salt.states.pyrax_queues","salt.states.pyrax_queues Manage Rackspace Queues New in version 2015.2.0. Create and destroy Rackspace queues. Be aware that this interacts with Rackspace&#39;s services, and so may incur charges. This module uses pyrax , which can be installed via package, or pip. This module is greatly inspired by...",""],
["ref/states/all/salt.states.quota.html","salt.states.quota","salt.states.quota Management of POSIX Quotas The quota can be managed for the system: /: quota.mode: mode: off quotatype: user mode Syntax salt.states.quota.mode( name, mode, quotatype ) Set the quota for the system Arguments Name Description name The filesystem to set the quota mode on mode Whe...",""],
["ref/states/all/salt.states.rabbitmq_cluster.html","salt.states.rabbitmq_cluster","salt.states.rabbitmq_cluster Manage RabbitMQ Clusters Example: rabbit@rabbit.example.com: rabbitmq_cluster.join: - user: rabbit - host: rabbit.example.com join Syntax salt.states.rabbitmq_cluster.join( name, host, user=&#39;rabbit&#39;, ram_node=None, runas=&#39;root&#39; ) Ensure the current node joined to a c...",""],
["ref/states/all/salt.states.rabbitmq_plugin.html","salt.states.rabbitmq_plugin","salt.states.rabbitmq_plugin Manage RabbitMQ Plugins New in version 2014.1.0. Example: some_plugin: rabbitmq_plugin.enabled: [] disabled Syntax salt.states.rabbitmq_plugin.disabled( name, runas=None ) Ensure the RabbitMQ plugin is disabled. Arguments Name Description name The name of the plugin r...",""],
["ref/states/all/salt.states.rabbitmq_policy.html","salt.states.rabbitmq_policy","salt.states.rabbitmq_policy Manage RabbitMQ Policies maintainer Benn Eichhorn maturity new platform all Example: rabbit_policy: rabbitmq_policy.present: - name: HA - pattern: &#39;.*&#39; - definition: &#39;{\"ha-mode\": \"all\"}&#39; absent Syntax salt.states.rabbitmq_policy.absent( name, vhost=&#39;/&#39;, runas=None ) E...",""],
["ref/states/all/salt.states.rabbitmq_user.html","salt.states.rabbitmq_user","salt.states.rabbitmq_user Manage RabbitMQ Users Example: rabbit_user: rabbitmq_user.present: - password: password - force: True - tags: - monitoring - user - perms: - &#39;/&#39;: - &#39;.*&#39; - &#39;.*&#39; - &#39;.*&#39; - runas: rabbitmq absent Syntax salt.states.rabbitmq_user.absent( name, runas=None ) Ensure the named u...",""],
["ref/states/all/salt.states.rabbitmq_vhost.html","salt.states.rabbitmq_vhost","salt.states.rabbitmq_vhost Manage RabbitMQ Virtual Hosts Example: virtual_host: rabbitmq_vhost.present: - user: rabbit_user - conf: .* - write: .* - read: .* absent Syntax salt.states.rabbitmq_vhost.absent( name, runas=None ) Ensure the RabbitMQ Virtual Host is absent Arguments Name Description ...",""],
["ref/states/all/salt.states.rbenv.html","salt.states.rbenv","salt.states.rbenv Managing Ruby installations with rbenv This module is used to install and manage ruby installations with rbenv and the ruby-build plugin. Different versions of ruby can be installed, and uninstalled. Rbenv will be installed automatically the first time it is needed and can be u...",""],
["ref/states/all/salt.states.rdp.html","salt.states.rdp","salt.states.rdp Manage RDP Service on Windows servers disabled Syntax salt.states.rdp.disabled( name ) Details Disable the RDP service enabled Syntax salt.states.rdp.enabled( name ) Details Enable the RDP service and make sure access to the RDP port is allowed in the firewall configuration Next ",""],
["ref/states/all/salt.states.redismod.html","salt.states.redismod","salt.states.redismod Management of Redis server New in version 2014.7.0. depends redis Python module configuration See salt.modules.redis for setup instructions. key_in_redis: redis.string: - value: string data The redis server information specified in the minion config file can be overridden in...",""],
["ref/states/all/salt.states.reg.html","salt.states.reg","salt.states.reg Manage the registry on Windows absent Syntax salt.states.reg.absent( name ) Details Remove a registry key Example: &#39;HKEY_CURRENT_USER\\SOFTWARE\\Salt\\version&#39;: reg.absent present Syntax salt.states.reg.present( name, value, vtype=&#39;REG_DWORD&#39;, reflection=True ) Details Set a registr...",""],
["ref/states/all/salt.states.rvm.html","salt.states.rvm","salt.states.rvm Managing Ruby installations and gemsets with Ruby Version Manager (RVM) This module is used to install and manage ruby installations and gemsets with RVM, the Ruby Version Manager. Different versions of ruby can be installed and gemsets created. RVM itself will be installed autom...",""],
["ref/states/all/salt.states.saltmod.html","salt.states.saltmod","salt.states.saltmod Control the Salt command interface This state is intended for use from the Salt Master. It provides access to sending commands down to minions as well as access to executing master-side modules. These state functions wrap Salt&#39;s Python API . Note: More Orchestrate documentati...",""],
["ref/states/all/salt.states.schedule.html","salt.states.schedule","salt.states.schedule Management of the Salt scheduler job3: schedule.present: - function: test.ping - seconds: 3600 - splay: 10 This will schedule the command: test.ping every 3600 seconds (every hour) splaying the time between 0 and 10 seconds job2: schedule.present: - function: test.ping - sec...",""],
["ref/states/all/salt.states.selinux.html","salt.states.selinux","salt.states.selinux Management of SELinux rules If SELinux is available for the running system, the mode can be managed and booleans can be set. enforcing: selinux.mode samba_create_home_dirs: selinux.boolean: - value: True - persist: True Note: Use of these states require that the selinux execu...",""],
["ref/states/all/salt.states.serverdensity_device.html","salt.states.serverdensity_device","salt.states.serverdensity_device Monitor Server with Server Density New in version 2014.7.0. Server Density Is a hosted monitoring service. Important: This state module is beta. It might be changed later to include more or less automation. Note: This state module requires a pillar for authentica...",""],
["ref/states/all/salt.states.service.html","salt.states.service","salt.states.service Starting or restarting of services and daemons Services are defined as system daemons typically started with system init or rc scripts, services can be defined as running or dead. httpd: service.running: [] The service can also be set to be started at runtime via the enable o...",""],
["ref/states/all/salt.states.slack.html","salt.states.slack","salt.states.slack Send a message to Slack This state is useful for sending messages to Slack during state runs. New in version 2015.2.0. slack-message: slack.send_message: - channel: &#39;#general&#39; - from_name: SuperAdmin - message: &#39;This state was executed successfully.&#39; - api_key: peWcBiMOS9HrZG15...",""],
["ref/states/all/salt.states.smtp.html","salt.states.smtp","salt.states.smtp Sending Messages via SMTP New in version 2014.7.0. This state is useful for firing messages during state runs, using the XMPP protocol server-warning-message: smtp.send_msg: - name: &#39;This is a server warning message&#39; - profile: my-smtp-account - recipient: admins@example.com sen...",""],
["ref/states/all/salt.states.ssh_auth.html","salt.states.ssh_auth","salt.states.ssh_auth Control of entries in SSH authorized_key files The information stored in a user&#39;s SSH authorized key file can be easily controlled via the ssh_auth state. Defaults can be set by the enc, options, and comment keys. These defaults can be overridden by including them in the nam...",""],
["ref/states/all/salt.states.ssh_known_hosts.html","salt.states.ssh_known_hosts","salt.states.ssh_known_hosts Control of SSH known_hosts entries Manage the information stored in the known_hosts files. github.com: ssh_known_hosts: - present - user: root - fingerprint: 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48 example.com: ssh_known_hosts: - absent - user: root absent Syn...",""],
["ref/states/all/salt.states.stateconf.html","salt.states.stateconf","salt.states.stateconf Stateconf System The stateconf system is intended for use only with the stateconf renderer. This State module presents the set function. This function does not execute any functionality, but is used to interact with the stateconf renderer. context Syntax salt.states.stateco...",""],
["ref/states/all/salt.states.status.html","salt.states.status","salt.states.status Minion status monitoring Maps to the status execution module. loadavg Syntax salt.states.status.loadavg( name, maximum=None, minimum=None ) Details Return the current load average for the specified minion. Available values for name are 1-min, 5-min and 15-min. minimum and maxi...",""],
["ref/states/all/salt.states.supervisord.html","salt.states.supervisord","salt.states.supervisord Interaction with the Supervisor daemon wsgi_server: supervisord.running: - require: - pkg: supervisor - watch: - file: /etc/nginx/sites-enabled/wsgi_server.conf dead Syntax salt.states.supervisord.dead( name, user=None, conf_file=None, bin_env=None ) Ensure the named serv...",""],
["ref/states/all/salt.states.svn.html","salt.states.svn","salt.states.svn Manage SVN repositories Manage repository checkouts via the svn vcs system: http://unladen-swallow.googlecode.com/svn/trunk/: svn.latest: - target: /tmp/swallow dirty Syntax salt.states.svn.dirty( name, target, user=None, username=None, password=None, ignore_unversioned=False ) D...",""],
["ref/states/all/salt.states.sysctl.html","salt.states.sysctl","salt.states.sysctl Configuration of the Linux kernel using sysctl Control the kernel sysctl system. vm.swappiness: sysctl.present: - value: 20 present Syntax salt.states.sysctl.present( name, value, config=None ) Ensure that the named sysctl value is set in memory and persisted to the named conf...",""],
["ref/states/all/salt.states.syslog_ng.html","salt.states.syslog_ng","salt.states.syslog_ng State module for syslog_ng maintainer Tibor Benke maturity new depends cmd, ps, syslog_ng platform all Users can generate syslog-ng configuration files from YAML format or use plain ones and reload, start, or stop their syslog-ng by using this module. Details The service mo...",""],
["ref/states/all/salt.states.sysrc.html","salt.states.sysrc","salt.states.sysrc absent Syntax salt.states.sysrc.absent( name, **kwargs ) Ensure a sysrc variable is absent. Arguments Name Description name The variable name to set file (optional) The rc file to add the variable to. jail (option) the name or JID of the jail to set the value in. managed Syntax...",""],
["ref/states/all/salt.states.test.html","salt.states.test","salt.states.test Test States Provide test case states that enable easy testing of things to do with state calls, e.g. running, calling, logging, output filtering etc. always-passes: test.succeed_without_changes: - name: foo always-fails: test.fail_without_changes: - name: foo always-changes-and-...",""],
["ref/states/all/salt.states.timezone.html","salt.states.timezone","salt.states.timezone Management of timezones The timezone can be managed for the system: America/Denver: timezone.system The system and the hardware clock are not necessarily set to the same time. By default, the hardware clock is set to localtime, meaning it is set to the same time as the syste...",""],
["ref/states/all/salt.states.tomcat.html","salt.states.tomcat","salt.states.tomcat This state uses the manager webapp to manage Apache tomcat webapps This state requires the manager webapp to be enabled The following grains/pillar should be set: tomcat-manager:user: admin user name tomcat-manager:passwd: password and also configure a user in the conf/tomcat-...",""],
["ref/states/all/salt.states.user.html","salt.states.user","salt.states.user Management of user accounts The user module is used to create and manage user settings, users can be set as either absent or present fred: user.present: - fullname: Fred Jones - shell: /bin/zsh - home: /home/fred - uid: 4000 - gid: 4000 - groups: - wheel - storage - games testus...",""],
["ref/states/all/salt.states.vbox_guest.html","salt.states.vbox_guest","salt.states.vbox_guest VirtualBox Guest Additions installer state additions_installed Syntax salt.states.vbox_guest.additions_installed( name, reboot=False, upgrade_os=False ) Ensure that the VirtualBox Guest Additions are installed. Uses the CD, connected by VirtualBox. Arguments Name Descripti...",""],
["ref/states/all/salt.states.virtualenv_mod.html","salt.states.virtualenv","salt.states.virtualenv Setup of Python virtualenv sandboxes managed Syntax salt.states.virtualenv_mod.managed( name, venv_bin=None, requirements=None, system_site_packages=False, distribute=False, use_wheel=False, clear=False, python=None, extra_search_dir=None, never_download=None, prompt=None,...",""],
["ref/states/all/salt.states.win_dns_client.html","salt.states.win_dns_client","salt.states.win_dns_client Module for configuring DNS Client on Windows systems dns_dhcp Syntax salt.states.win_dns_client.dns_dhcp( name, interface=&#39;Local Area Connection&#39; ) Details Configure the DNS server list from DHCP Server dns_exists Syntax salt.states.win_dns_client.dns_exists( name, ser...",""],
["ref/states/all/salt.states.win_firewall.html","salt.states.win_firewall","salt.states.win_firewall State for configuring Windows Firewall add_rule Syntax salt.states.win_firewall.add_rule( name, localport, protocol=&#39;tcp&#39;, action=&#39;allow&#39;, dir=&#39;in&#39; ) Details Add a new firewall rule (Windows only) disabled Syntax salt.states.win_firewall.disabled( name ) Details Disable ...",""],
["ref/states/all/salt.states.win_network.html","salt.states.win_network","salt.states.win_network Configuration of network interfaces on Windows hosts New in version 2014.1.0. This module provides the network state(s) on Windows hosts. DNS servers, IP addresses and default gateways can currently be managed. Below is an example of the configuration for an interface tha...",""],
["ref/states/all/salt.states.win_path.html","salt.states.win_path","salt.states.win_path Manage the Windows System PATH absent Syntax salt.states.win_path.absent( name ) Details Remove the directory from the SYSTEM path index: where the directory should be placed in the PATH (default: 0) Example: &#39;C:\\sysinternals&#39;: win_path.absent exists Syntax salt.states.win_p...",""],
["ref/states/all/salt.states.win_servermanager.html","salt.states.win_servermanager","salt.states.win_servermanager Manage Windows features via the ServerManager powershell module installed Syntax salt.states.win_servermanager.installed( name, recurse=False, force=False ) Install the windows feature Arguments Name Description name: short name of the feature (the right column in w...",""],
["ref/states/all/salt.states.win_system.html","salt.states.win_system","salt.states.win_system Management of Windows system information New in version 2014.1.0. This state is used to manage system information such as the computer name and description. ERIK-WORKSTATION: system.computer_name: [] This is Erik&#39;s computer, don&#39;t touch!: system.computer_desc: [] computer_...",""],
["ref/states/all/salt.states.win_update.html","salt.states.win_update","salt.states.win_update Management of the windows update agent New in version 2014.7.0. Set windows updates to run by category. Default behavior is to install all updates that do not require user interaction to complete. Optionally set category to a category of your choice to only install certain...",""],
["ref/states/all/salt.states.winrepo.html","salt.states.winrepo","salt.states.winrepo Manage Windows Package Repository genrepo Syntax salt.states.winrepo.genrepo( name, force=False, allow_empty=False ) Details Refresh the winrepo.p file of the repository (salt-run winrepo.genrepo) if force is True no checks will be made and the repository will be generated if...",""],
["ref/states/all/salt.states.xmpp.html","salt.states.xmpp","salt.states.xmpp Sending Messages over XMPP New in version 2014.1.0. This state is useful for firing messages during state runs, using the XMPP protocol server-warning-message: xmpp.send_msg: - name: &#39;This is a server warning message&#39; - profile: my-xmpp-account - recipient: admins@xmpp.example.c...",""],
["ref/states/all/salt.states.zcbuildout.html","salt.states.zcbuildout","salt.states.zcbuildout Management of zc.buildout This module is inspired from minitage&#39;s buildout maker ( https://github.com/minitage/minitage/blob/master/src/minitage/core/makers/buildout.py ) New in version Boron. Note: This state module is beta; the API is subject to change and no promise as ...",""],
["ref/states/all/salt.states.zk_concurrency.html","salt.states.zk_concurrency","salt.states.zk_concurrency Control concurrency of steps within state execution using zookeeper This module allows you to \"wrap\" a state&#39;s execution with concurrency control. This is useful to protect against all hosts executing highstate simultaneously if your services don&#39;t all HUP restart. The...",""],
["ref/states/altering_states.html","Altering States","Altering States Note: This documentation has been moved here . Next ",""],
["ref/states/backup_mode.html","File State Backups","File State Backups In 0.10.2 a new feature was added for backing up files that are replaced by the file.managed and file.recurse states. The new feature is called the backup mode. Setting the backup mode is easy, but it can be set in a number of places. The backup_mode can be set in the minion c...",""],
["ref/states/compiler_ordering.html","Understanding State Compiler Ordering","Understanding State Compiler Ordering Note: This tutorial is an intermediate level tutorial. Some basic understanding of the state system and writing Salt Formulas is assumed. Salt&#39;s state system is built to deliver all of the power of configuration management systems without sacrificing simplic...",""],
["ref/states/extend.html","Extending External SLS Data","Extending External SLS Data Sometimes a state defined in one SLS file will need to be modified from a separate SLS file. A good example of this is when an argument needs to be overwritten or when a service needs to watch an additional state. The Extend Declaration The standard way to extend is v...",""],
["ref/states/failhard.html","Failhard Global Option","Failhard Global Option Normally, when a state fails Salt continues to execute the remainder of the defined states and will only refuse to execute states that require the failed state. But the situation may exist, where you would want all state execution to stop if a single state execution fails....",""],
["ref/states/global_state_arguments.html","Global State Arguments","Global State Arguments Note: This documentation has been moved here . Next ",""],
["ref/states/highstate.html","Highstate data structure definitions","Highstate data structure definitions The Salt State Tree A state tree is a collection of SLS files that live under the directory specified in file_roots . A state tree can be organized into SLS modules . Top file The main state file that instructs minions what environment and modules to use duri...",""],
["ref/states/include.html","Include and Exclude","Include and Exclude Salt sls files can include other sls files and exclude sls files that have been otherwise included. This allows for an sls file to easily extend or manipulate other sls files. Include When other sls files are included, everything defined in the included sls file will be added...",""],
["ref/states/layers.html","State System Layers","State System Layers The Salt state system is comprised of multiple layers. While using Salt does not require an understanding of the state layers, a deeper understanding of how Salt compiles and manages states can be very beneficial. Function Call The lowest layer of functionality in the state s...",""],
["ref/states/ordering.html","Ordering States","Ordering States The way in which configuration management systems are executed is a hotly debated topic in the configuration management world. Two major philosophies exist on the subject, to either execute in an imperative fashion where things are executed in the order in which they are defined,...",""],
["ref/states/overstate.html","OverState System","OverState System Note: This documentation has been moved here . Next ",""],
["ref/states/providers.html","State Providers","State Providers New in version 0.9.8. Salt predetermines what modules should be mapped to what uses based on the properties of a system. These determinations are generally made for modules that provide things like package and service management. Sometimes in states, it may be necessary to use an...",""],
["ref/states/requisites.html","Requisites and Other Global State Arguments","Requisites and Other Global State Arguments Requisites The Salt requisite system is used to create relationships between states. The core idea being that, when one state is dependent somehow on another, that inter-dependency can be easily defined. Requisites come in two types: Direct requisites ...",""],
["ref/states/startup.html","Startup States","Startup States Sometimes it may be desired that the salt minion execute a state run when it is started. This alleviates the need for the master to initiate a state run on a new minion and can make provisioning much easier. As of Salt 0.10.3 the minion config reads options that allow for states t...",""],
["ref/states/testing.html","State Testing","State Testing Executing a Salt state run can potentially change many aspects of a system and it may be desirable to first see what a state run is going to change before applying the run. Salt has a test interface to report on exactly what will be changed, this interface can be invoked on any of ...",""],
["ref/states/top.html","The Top File","The Top File The top file is used to map what SLS modules get loaded onto what minions via the state system. The top file creates a few general abstractions. First it maps what nodes should pull from which environments, next it defines which matches systems should draw from. Environments Environ...",""],
["ref/states/vars.html","SLS Template Variable Reference","SLS Template Variable Reference The template engines available to sls files and file templates come loaded with a number of context variables. These variables contain information and functions to assist in the generation of templates. See each variable below for its availability -- not all varia...",""],
["ref/states/writing.html","State Modules","State Modules State Modules are the components that map to actual enforcement and management of Salt states. States are Easy to Write! State Modules should be easy to write and straightforward. The information passed to the SLS data structures will map directly to the states modules. Mapping the...",""],
["ref/tops/all/salt.tops.cobbler.html","salt.tops.cobbler","salt.tops.cobbler Cobbler Tops Cobbler Tops is a master tops subsystem used to look up mapping information from Cobbler via its API. The same cobbler.* parameters are used for both the Cobbler tops and Cobbler pillar modules. master_tops: cobbler: {} cobbler.url: https://example.com/cobbler_api ...",""],
["ref/tops/all/salt.tops.ext_nodes.html","salt.tops.ext_nodes","salt.tops.ext_nodes External Nodes Classifier The External Nodes Classifier is a master tops subsystem that retrieves mapping information from major configuration management systems. One of the most common external nodes classifiers system is provided by Cobbler and is called cobbler-ext-nodes ....",""],
["ref/tops/all/salt.tops.mongo.html","salt.tops.mongo","salt.tops.mongo Read tops data from a mongodb collection This module will load tops data from a mongo collection. It uses the node&#39;s id for lookups. Salt Master Mongo Configuration The module shares the same base mongo connection variables as salt.returners.mongo_return . These variables go in y...",""],
["ref/tops/all/salt.tops.reclass_adapter.html","salt.tops.reclass_adapter","salt.tops.reclass_adapter Read tops data from a reclass database This master_tops plugin provides access to the reclass database, such that state information (top data) are retrieved from reclass. You can find more information about reclass at http://reclass.pantsfullofunix.net . To use the plug...",""],
["ref/tops.html","Top File Modules (salt.tops)","Top File Modules (salt.tops) salt.tops.cobbler salt.tops.ext_nodes salt.tops.mongo salt.tops.reclass_adapter Next ",""],
["ref/wheel/all/salt.wheel.config.html","salt.wheel.config","salt.wheel.config Manage the master configuration file apply Syntax salt.wheel.config.apply( key, value ) Details Set a single key Note: This will strip comments from your config file update_config Syntax salt.wheel.config.update_config( file_name, yaml_contents ) Details Update master config wi...",""],
["ref/wheel/all/salt.wheel.error.html","salt.wheel.error","salt.wheel.error Error generator to enable integration testing of salt wheel error handling error Syntax salt.wheel.error.error( name=None, message=&#39;&#39; ) Details If name is None Then return empty dict Otherwise raise an exception with __name__ from name, message from message CLI Example: salt-whe...",""],
["ref/wheel/all/salt.wheel.file_roots.html","salt.wheel.file_roots","salt.wheel.file_roots Read in files from the file_root and save files to the file root find Syntax salt.wheel.file_roots.find( path, saltenv=&#39;base&#39;, env=None ) Details Return a dict of the files located with the given path and environment list_env Syntax salt.wheel.file_roots.list_env( saltenv=&#39;...",""],
["ref/wheel/all/salt.wheel.key.html","salt.wheel.key","salt.wheel.key Wheel system wrapper for key system accept Syntax salt.wheel.key.accept( match ) Details Accept keys based on a glob match accept_dict Syntax salt.wheel.key.accept_dict( match ) Details Accept keys based on a dict of keys delete Syntax salt.wheel.key.delete( match ) Details Delete...",""],
["ref/wheel/all/salt.wheel.minions.html","salt.wheel.minions","salt.wheel.minions Wheel system wrapper for connected minions connected Syntax salt.wheel.minions.connected( ) Details List all connected minions on a salt-master Next ",""],
["ref/wheel/all/salt.wheel.pillar_roots.html","salt.wheel.pillar_roots","salt.wheel.pillar_roots The pillar_roots wheel module is used to manage files under the pillar roots directories on the master server. find Syntax salt.wheel.pillar_roots.find( path, saltenv=&#39;base&#39;, env=None ) Details Return a dict of the files located with the given path and environment list_en...",""],
["ref/wheel.html","Wheel Modules (salt.wheel)","Wheel Modules (salt.wheel) salt.wheel.config salt.wheel.error salt.wheel.file_roots salt.wheel.key salt.wheel.minions salt.wheel.pillar_roots Next ",""],
["reference.html","Salt Module Reference Guide","Table of Contents About This Guide Authentication Modules (salt.auth) salt.auth.auto salt.auth.django salt.auth.keystone salt.auth.ldap salt.auth.mysql salt.auth.pam salt.auth.pki salt.auth.stormpath_mod salt.auth.yubico Beacons (salt.beacons) salt.beacons.btmp salt.beacons.diskusage salt.beacon...",""],
["topics/best_practices.html","Salt Best Practices","Salt Best Practices Salt&#39;s extreme flexibility leads to many questions concerning the structure of configuration files. This document exists to clarify these points through examples and code. General rules Modularity and clarity should be emphasized whenever possible. Create clear relations betw...",""],
["topics/cloud/action.html","Cloud Actions","Cloud Actions Once a VM has been created, there are a number of actions that can be performed on it. The \"reboot\" action can be used across all providers, but all other actions are specific to the cloud provider. In order to perform an action, you may specify it from the command line, including ...",""],
["topics/cloud/aliyun.html","Getting Started With Aliyun ECS","Getting Started With Aliyun ECS The Aliyun ECS (Elastic Computer Service) is one of the most popular public cloud providers in China. This cloud provider can be used to manage aliyun instance using salt-cloud. http://www.aliyun.com/ Dependencies This driver requires the Python requests library t...",""],
["topics/cloud/aws.html","Getting Started With AWS EC2","Getting Started With AWS EC2 Amazon EC2 is a very widely used public cloud platform and one of the core platforms Salt Cloud has been built to support. Previously, the suggested provider for AWS EC2 was the aws provider. This has been deprecated in favor of the ec2 provider. Configuration using ...",""],
["topics/cloud/azure.html","Getting Started With Azure","Getting Started With Azure New in version 2014.1.0. Azure is a cloud service by Microsoft providing virtual machines, SQL services, media services, and more. This document describes how to use Salt Cloud to create a virtual machine on Azure, with Salt installed. More information about Azure is l...",""],
["topics/cloud/basic.html","Salt Cloud basic usage","Salt Cloud basic usage Salt Cloud needs, at least, one configured Provider and Profile to be functional. Creating a VM To create a VM with salt cloud, use command: salt-cloud -p name_of_vm Assuming there is a profile configured as following: fedora_rackspace: provider: rackspace image: Fedora 17...",""],
["topics/cloud/cloud.html","Writing Cloud Provider Modules","Writing Cloud Provider Modules Salt Cloud runs on a module system similar to the main Salt project. The modules inside saltcloud exist in the salt/cloud/clouds directory of the salt source. There are two basic types of cloud modules. If a cloud provider is supported by libcloud, then using it is...",""],
["topics/cloud/config.html","Core Configuration","Core Configuration A number of core configuration options and some options that are global to the VM profiles can be set in the cloud configuration file. By default this file is located at /etc/salt/cloud . Thread Pool Size When salt cloud is operating in parallel mode via the -P argument, you c...",""],
["topics/cloud/digitalocean.html","Getting Started With DigitalOcean","Getting Started With DigitalOcean DigitalOcean is a public cloud provider that specializes in Linux instances. Configuration Using Salt for DigitalOcean requires a personal_access_token, an ssh_key_file, and at least one SSH key name in ssh_key_names, more can be added by comma-separating them. ...",""],
["topics/cloud/features.html","Feature Matrix","Feature Matrix A number of features are available in most cloud providers, but not all are available everywhere. This may be because the feature isn&#39;t supported by the cloud provider itself, or it may only be that the feature has not yet been added to Salt Cloud. In a handful of cases, it is bec...",""],
["topics/cloud/function.html","Cloud Functions","Cloud Functions Cloud functions work much the same way as cloud actions, except that they don&#39;t perform an operation on a specific instance, and so do not need a machine name to be specified. However, since they perform an operation on a specific cloud provider, that provider must be specified. ...",""],
["topics/cloud/gce.html","Getting Started With Google Compute Engine","Getting Started With Google Compute Engine Google Compute Engine (GCE) is Google-infrastructure as a service that lets you run your large-scale computing workloads on virtual machines. This document covers how to use Salt Cloud to provision and manage your virtual machines hosted within Google&#39;s...",""],
["topics/cloud/gogrid.html","Getting Started With GoGrid","Getting Started With GoGrid GoGrid is a public cloud provider supporting Linux and Windows. Dependencies Libcloud = 0.13.2 Configuration To use Salt Cloud with GoGrid log into the GoGrid web interface and create an API key. Do this by clicking on \"My Account\" and then going to the API Keys tab. ...",""],
["topics/cloud/hpcloud.html","Getting Started With HP Cloud","Getting Started With HP Cloud HP Cloud is a major public cloud platform and uses the libcloud openstack driver. The current version of OpenStack that HP Cloud uses is Havana. When an instance is booted, it must have a floating IP added to it in order to connect to it and further below you will s...",""],
["topics/cloud/joyent.html","Getting Started With Joyent","Getting Started With Joyent Joyent is a public cloud provider supporting SmartOS, Linux, FreeBSD, and Windows. Dependencies This driver requires the Python requests library to be installed. Configuration The Joyent cloud requires three configuration parameters. The user name and password that ar...",""],
["topics/cloud/linode.html","Getting Started With Linode","Getting Started With Linode Linode is a public cloud provider with a focus on Linux instances. Dependencies linode-python = 1.1.1 OR Libcloud = 0.13.2 This driver supports accessing Linode via linode-python or Apache Libcloud. Linode-python is recommended, it is more full-featured than Libcloud....",""],
["topics/cloud/lxc.html","Getting Started With LXC","Getting Started With LXC The LXC module is designed to install Salt in an LXC container on a controlled and possibly remote minion. In other words, Salt will connect to a minion, then from that minion: Provision and configure a container for networking access Use saltify to deploy salt and re-at...",""],
["topics/cloud/map.html","Cloud Map File","Cloud Map File A number of options exist when creating virtual machines. They can be managed directly from profiles and the command line execution, or a more complex map file can be created. The map file allows for a number of virtual machines to be created and associated with specific profiles....",""],
["topics/cloud/misc.html","Miscellaneous Salt Cloud Options","Miscellaneous Salt Cloud Options This page describes various miscellaneous options available in Salt Cloud Deploy Script Arguments Custom deploy scripts are unlikely to need custom arguments to be passed to them, but salt-bootstrap has been extended quite a bit, and this may be necessary. script...",""],
["topics/cloud/openstack.html","Getting Started With OpenStack","Getting Started With OpenStack OpenStack is one the most popular cloud projects. It&#39;s an open source project to build public and/or private clouds. You can use Salt Cloud to launch OpenStack instances. Dependencies Libcloud = 0.13.2 Configuration Using the new format, set up the cloud configurat...",""],
["topics/cloud/parallels.html","Getting Started With Parallels","Getting Started With Parallels Parallels Cloud Server is a product by Parallels that delivers a cloud hosting solution. The PARALLELS module for Salt Cloud enables you to manage instances hosted by a provider using PCS. Further information can be found at: http://www.parallels.com/products/pcs/ ...",""],
["topics/cloud/profiles.html","VM Profiles","VM Profiles Salt cloud designates virtual machines inside the profile configuration file. The profile configuration file defaults to /etc/salt/cloud.profiles and is a yaml configuration. The syntax for declaring profiles is simple: fedora_rackspace: provider: rackspace image: Fedora 17 size: 256...",""],
["topics/cloud/proxmox.html","Getting Started With Proxmox","Getting Started With Proxmox Proxmox Virtual Environment is a complete server virtualization management solution, based on KVM virtualization and OpenVZ containers. Further information can be found at: http://www.proxmox.org/ Dependencies IPy = 0.81 requests = 2.2.1 Please note: This module allo...",""],
["topics/cloud/rackspace.html","Getting Started With Rackspace","Getting Started With Rackspace Rackspace is a major public cloud platform which may be configured using either the rackspace or the openstack driver, depending on your needs. Please note that the rackspace driver is only intended for 1st gen instances, aka, \"the old cloud\" at Rackspace. It is re...",""],
["topics/cloud/reactor.html","Using Salt Cloud with the Event Reactor","Using Salt Cloud with the Event Reactor One of the most powerful features of the Salt framework is the Event Reactor. As the Reactor was in development, Salt Cloud was regularly updated to take advantage of the Reactor upon completion. As such, various aspects of both the creation and destructio...",""],
["topics/cloud/salt.html","Using the Salt Modules for Cloud","Using the Salt Modules for Cloud In addition to the salt-cloud command, Salt Cloud can be called from Salt, in a variety of different ways. Most users will be interested in either the execution module or the state module, but it is also possible to call Salt Cloud as a runner. Because the actual...",""],
["topics/cloud/softlayer.html","Getting Started With SoftLayer","Getting Started With SoftLayer SoftLayer is a public cloud provider, and baremetal hardware hosting provider. Dependencies The SoftLayer driver for Salt Cloud requires the softlayer package, which is available at PyPI: https://pypi.python.org/pypi/SoftLayer This package can be installed using pi...",""],
["topics/cloud/troubleshooting.html","Troubleshooting Salt Cloud","Troubleshooting Salt Cloud This page describes various steps for troubleshooting problems that may arise while using Salt Cloud. Virtual Machines Are Created, But Do Not Respond Are TCP ports 4505 and 4506 open on the master? This is easy to overlook on new masters. Information on how to open fi...",""],
["topics/cloud/vexxhost.html","Getting Started with VEXXHOST","Getting Started with VEXXHOST VEXXHOST is an cloud computing provider which provides Canadian cloud computing services which are based in Monteral and uses the libcloud OpenStack driver. VEXXHOST currently runs the Havana release of OpenStack. When provisioning new instances, they automatically ...",""],
["topics/cloud/windows.html","Spinning up Windows Minions","Spinning up Windows Minions It is possible to use Salt Cloud to spin up Windows instances, and then install Salt on them. This functionality is available on all cloud providers that are supported by Salt Cloud. However, it may not necessarily be available on all Windows images. Requirements Salt...",""],
["topics/eauth/access_control.html","Access Control System","Access Control System New in version 0.10.4. Salt maintains a standard system used to open granular control to non administrative users to execute Salt commands. The access control system has been applied to all systems used to configure access to non administrative control interfaces in Salt.Th...",""],
["topics/event/master_events.html","Salt Master Events","Salt Master Events These events are fired on the Salt Master event bus. This list is not comprehensive. Authentication events salt/auth Fired when a minion performs an authentication check with the master. Variables id -- The minion ID. act -- The current status of the minion key: accept , pend ...",""],
["topics/installation/arch.html","Arch Linux","Arch Linux Installation Salt (stable) is currently available via the Arch Linux Official repositories. There are currently -git packages available in the Arch User repositories (AUR) as well. Stable Release Install Salt stable releases from the Arch Linux Official repositories as follows: pacman...",""],
["topics/installation/architecture.html","Deployment Architecture","Deployment Architecture High-Availability SaltStack includes many features that are designed to support a highly available implementation. Salt Syndic Multi Master Tutorial Multi-Master-PKI Tutorial With Failover Using salt at scale The RAET Transport Next ",""],
["topics/installation/debian.html","Debian Installation","Debian Installation Currently the latest packages for Debian Old Stable, Stable, and Unstable (Squeeze, Wheezy, and Sid) are published in our (saltstack.com) Debian repository. Configure Apt Squeeze (Old Stable) For squeeze, you will need to enable the Debian backports repository as well as the ...",""],
["topics/installation/fedora.html","Fedora","Fedora Beginning with version 0.9.4, Salt has been available in the primary Fedora repositories and EPEL . It is installable using yum. Fedora will have more up to date versions of Salt than other members of the Red Hat family, which makes it a great place to help improve Salt! WARNING: Fedora 1...",""],
["topics/installation/freebsd.html","FreeBSD","FreeBSD Salt was added to the FreeBSD ports tree Dec 26th, 2011 by Christer Edwards . It has been tested on FreeBSD 7.4, 8.2, 9.0, and 9.1 releases. Salt is dependent on the following additional ports. These will be installed as dependencies of the sysutils/py-salt port: /devel/py-yaml /devel/py...",""],
["topics/installation/gentoo.html","Gentoo","Gentoo Salt can be easily installed on Gentoo via Portage: emerge app-admin/salt Post-installation tasks Now go to the Configuring Salt page. Next ",""],
["topics/installation/high-availability.html","High-Availability","SaltStack includes many features that are designed to support a highly available implementation.",""],
["topics/installation/models.html","Additional Management Configurations","Additional Management Configurations Salt SSH Salt Masterless Quickstart Standalone Minion Next ",""],
["topics/installation/osx.html","OS X","OS X Dependency Installation It should be noted that Homebrew explicitly discourages the use of sudo : Homebrew is designed to work without using sudo. You can decide to use it but we strongly recommend not to do so. If you have used sudo and run into a bug then it is likely to be the cause. Ple...",""],
["topics/installation/rhel.html","RHEL / CentOS / Scientific Linux / Amazon Linux / Oracle Linux","RHEL / CentOS / Scientific Linux / Amazon Linux / Oracle Linux Installation Using pip Since Salt is on PyPI , it can be installed using pip, though most users prefer to install using RPMs (which can be installed from EPEL ). Installation from pip is easy: pip install salt Important: If installin...",""],
["topics/installation/solaris.html","Solaris","Solaris Salt was added to the OpenCSW package repository in September of 2012 by Romeo Theriault at version 0.10.2 of Salt. It has mainly been tested on Solaris 10 (sparc), though it is built for and has been tested minimally on Solaris 10 (x86), Solaris 9 (sparc/x86) and 11 (sparc/x86). (Please...",""],
["topics/installation/suse.html","SUSE Installation","SUSE Installation With openSUSE 13.1, Salt 0.16.4 has been available in the primary repositories. The devel:language:python repo will have more up to date versions of salt, all package development will be done there. Installation Salt can be installed using zypper and is available in the standar...",""],
["topics/installation/ubuntu.html","Ubuntu Installation","Ubuntu Installation Add repository The latest packages for Ubuntu are published in the saltstack PPA. If you have the add-apt-repository utility, you can add the repository and import the key in one step: sudo add-apt-repository ppa:saltstack/salt Note: add-apt-repository: command not found? The...",""],
["topics/installation/windows.html","Windows","Windows Salt has full support for running the Salt Minion on Windows. There are no plans for the foreseeable future to develop a Salt Master on Windows. For now you must run your Salt Master on a supported operating system to control your Salt Minions on Windows. Many of the standard Salt module...",""],
["topics/jobs/job_cache.html","Managing the Job Cache","Managing the Job Cache The Salt Master maintains a job cache of all job executions which can be queried via the jobs runner. The way this job cache is managed is very pluggable via Salt&#39;s underlying returner interface. Default Job Cache A number of options are available when configuring the job ...",""],
["topics/jobs/schedule.html","States","States schedule: log-loadavg: function: cmd.run seconds: 3660 args: - &#39;logger -t salt ",""],
["topics/netapi/writing.html","Writing netapi modules","Writing netapi modules netapi modules, put simply, bind a port and start a service. They are purposefully open-ended and can be used to present a variety of external interfaces to Salt, and even present multiple interfaces at once. Note: The full list of netapi modules Configuration All netapi c...",""],
["topics/ssh/roster.html","Salt Rosters","Salt Rosters Salt rosters are pluggable systems added in Salt 0.17.0 to facilitate the salt-ssh system. The roster system was created because salt-ssh needs a means to identify which systems need to be targeted for execution. Note: Full list of builtin roster modules Note: The Roster System is n...",""],
["topics/targeting/batch.html","Batch Size","Batch Size The -b (or --batch-size ) option allows commands to be executed on only a specified number of minions at a time. Both percentages and finite numbers are supported. salt &#39;*&#39; -b 10 test.ping salt -G &#39;os:RedHat&#39; --batch-size 25% apache.signal restart This will only run test.ping on 10 of...",""],
["topics/targeting/compound.html","Compound matchers","Compound matchers Compound matchers allow very granular minion targeting using any of Salt&#39;s matchers. The default matcher is a glob match, just as with CLI and top file matching. To match using anything other than a glob, prefix the match string with the appropriate letter from the table below,...",""],
["topics/targeting/globbing.html","Matching the minion id","Matching the minion id Each minion needs a unique identifier. By default when a minion starts for the first time it chooses its FQDN as that identifier. The minion id can be overridden via the minion&#39;s id configuration setting. Fastpath: minion id and minion keys The minion id is used to generat...",""],
["topics/targeting/grains.html","Grains","Grains Salt comes with an interface to derive information about the underlying system. This is called the grains interface, because it presents salt with grains of information. The grains interface is made available to Salt modules and components so that the right salt minion commands are automa...",""],
["topics/targeting/ipcidr.html","Subnet/IP Address Matching","Subnet/IP Address Matching Minions can easily be matched based on IP address, or by subnet (using CIDR notation). salt -S 192.168.40.20 test.ping salt -S 10.0.0.0/24 test.ping Note: Only IPv4 matching is supported at this time. Next ",""],
["topics/targeting/nodegroups.html","Node groups","Node groups Nodegroups are declared using a compound target specification. The compound target documentation can be found here . The nodegroups master config file parameter is used to define nodegroups. Here&#39;s an example nodegroup configuration within /etc/salt/master : nodegroups: group1: &#39;L@fo...",""],
["topics/targeting/range.html","SECO Range","SECO Range SECO range is a cluster-based metadata store developed and maintained by Yahoo! The Range project is hosted here: https://github.com/ytoolshed/range Learn more about range here: https://github.com/ytoolshed/range/wiki/ Prerequisites To utilize range support in Salt, a range server is ...",""],
["topics/topology/syndic.html","Salt Syndic","Salt Syndic The Salt Syndic interface is a powerful tool which allows for the construction of Salt command topologies. A basic Salt setup has a Salt Master commanding a group of Salt Minions. The Syndic interface is a special passthrough minion, it is run on a master and connects to another mast...",""],
["topics/transports/raet/programming_intro.html","Intro to RAET Programming","Intro to RAET Programming Note: This page is still under construction The first thing to cover is that RAET does not present a socket api, it presents, and queueing api, all messages in RAET are made available to via queues. This is the single most differentiating factor with RAET vs other netwo...",""],
["topics/troubleshooting/master.html","Troubleshooting the Salt Master","Troubleshooting the Salt Master Running in the Foreground A great deal of information is available via the debug logging system, if you are having issues with minions connecting or not starting run the master in the foreground: # salt-master -l debug Anyone wanting to run Salt daemons via a proc...",""],
["topics/troubleshooting/minion.html","Troubleshooting the Salt Minion","Troubleshooting the Salt Minion Running in the Foreground A great deal of information is available via the debug logging system, if you are having issues with minions connecting or not starting run the minion in the foreground: # salt-minion -l debug Anyone wanting to run Salt daemons via a proc...",""],
["topics/troubleshooting/yaml_idiosyncrasies.html","YAML Idiosyncrasies","YAML Idiosyncrasies One of Salt&#39;s strengths, the use of existing serialization systems for representing SLS data, can also backfire. YAML is a general purpose system and there are a number of things that would seem to make sense in an sls file that cause YAML issues. It is wise to be aware of th...",""],
["topics/tutorials/cloud_controller.html","Salt as a Cloud Controller","Salt as a Cloud Controller In Salt 0.14.0, an advanced cloud control system were introduced, allow private cloud vms to be managed directly with Salt. This system is generally referred to as Salt Virt. The Salt Virt system already exists and is installed within Salt itself, this means that besid...",""],
["topics/tutorials/cron.html","Using cron with Salt","Using cron with Salt The Salt Minion can initiate its own highstate using the salt-call command. $ salt-call state.highstate This will cause the minion to check in with the master and ensure it is in the correct &#39;state&#39;. Use cron to initiate a highstate If you would like the Salt Minion to regul...",""],
["topics/tutorials/esky.html","Automatic Updates / Frozen Deployments","Automatic Updates / Frozen Deployments New in version 0.10.3.d. Salt has support for the Esky application freezing and update tool. This tool allows one to build a complete zipfile out of the salt scripts and all their dependencies - including shared objects / DLLs. Getting Started To build froz...",""],
["topics/tutorials/gitfs.html","Git Fileserver Backend Walkthrough","Git Fileserver Backend Walkthrough Note: This walkthrough assumes basic knowledge of Salt. To get up to speed, check out the Salt Walkthrough . The gitfs backend allows Salt to serve files from git repositories. It can be enabled by adding git to the fileserver_backend list, and configuring one ...",""],
["topics/tutorials/intro_scale.html","Using salt at scale","Using salt at scale The focus of this tutorial will be building a Salt infrastructure for handling large numbers of minions. This will include tuning, topology, and best practices. For how to install the saltmaster please go here: Installing saltstack Note: This tutorial is intended for large in...",""],
["topics/tutorials/minionfs.html","MinionFS Backend Walkthrough","MinionFS Backend Walkthrough New in version 2014.1.0. Sometimes, you might need to propagate files that are generated on a minion. Salt already has a feature to send files from a minion to the master: salt &#39;minion-id&#39; cp.push /path/to/the/file This command will store the file, including its full...",""],
["topics/tutorials/modules.html","Remote execution tutorial","Remote execution tutorial Before continuing make sure you have a working Salt installation by following the installation and the configuration instructions. Note: Stuck? There are many ways to get help from the Salt community including our mailing list and our IRC channel #salt. Order your minio...",""],
["topics/tutorials/multimaster.html","Multi Master Tutorial","Multi Master Tutorial As of Salt 0.16.0, the ability to connect minions to multiple masters has been made available. The multi-master system allows for redundancy of Salt masters and facilitates multiple points of communication out to minions. When using a multi-master setup, all masters are run...",""],
["topics/tutorials/multimaster_pki.html","Multi-Master-PKI Tutorial With Failover","Multi-Master-PKI Tutorial With Failover This tutorial will explain, how to run a salt-environment where a single minion can have multiple masters and fail-over between them if its current master fails. The individual steps are setup the master(s) to sign its auth-replies setup minion(s) to verif...",""],
["topics/tutorials/pillar.html","Pillar Walkthrough","Pillar Walkthrough Note: This walkthrough assumes that the reader has already completed the initial Salt walkthrough . Pillars are tree-like structures of data defined on the Salt Master and passed through to minions. They allow confidential, targeted data to be securely sent only to the relevan...",""],
["topics/tutorials/preseed_key.html","Preseed Minion with Accepted Key","Preseed Minion with Accepted Key In some situations, it is not convenient to wait for a minion to start before accepting its key on the master. For instance, you may want the minion to bootstrap itself as soon as it comes online. You may also want to to let your developers provision new developm...",""],
["topics/tutorials/quickstart.html","Salt Masterless Quickstart","Salt Masterless Quickstart Running a masterless salt-minion lets you use Salt&#39;s configuration management for a single machine without calling out to a Salt master on another machine. Since the Salt minion contains such extensive functionality it can be useful to run it standalone. A standalone m...",""],
["topics/tutorials/salt_bootstrap.html","Salt Bootstrap","Salt Bootstrap The Salt Bootstrap script allows for a user to install the Salt Minion or Master on a variety of system distributions and versions. This shell script known as bootstrap-salt.sh runs through a series of checks to determine the operating system type and version. It then installs the...",""],
["topics/tutorials/standalone_minion.html","Standalone Minion","Standalone Minion Since the Salt minion contains such extensive functionality it can be useful to run it standalone. A standalone minion can be used to do a number of things: Use salt-call commands on a system without connectivity to a master Masterless States, run states entirely from files loc...",""],
["topics/tutorials/starting_states.html","How Do I Use Salt States?","How Do I Use Salt States? Simplicity, Simplicity, Simplicity Many of the most powerful and useful engineering solutions are founded on simple principles. Salt States strive to do just that: K.I.S.S. (Keep It Stupidly Simple) The core of the Salt State system is the SLS, or SaLt State file. The S...",""],
["topics/tutorials/states_pt1.html","States tutorial, part 1 - Basic Usage","States tutorial, part 1 - Basic Usage The purpose of this tutorial is to demonstrate how quickly you can configure a system to be managed by Salt States. For detailed information about the state system please refer to the full states reference . This tutorial will walk you through using Salt to ...",""],
["topics/tutorials/states_pt2.html","States tutorial, part 2 - More Complex States, Requisites","States tutorial, part 2 - More Complex States, Requisites Note: This tutorial builds on topics covered in part 1 . It is recommended that you begin there. In the last part of the Salt States tutorial we covered the basics of installing a package. We will now modify our webserver.sls file to have...",""],
["topics/tutorials/states_pt3.html","States tutorial, part 3 - Templating, Includes, Extends","States tutorial, part 3 - Templating, Includes, Extends Note: This tutorial builds on topics covered in part 1 and part 2 . It is recommended that you begin there. This part of the tutorial will cover more advanced templating and configuration techniques for sls files. Templating SLS modules SLS...",""],
["topics/tutorials/states_pt4.html","States tutorial, part 4","States tutorial, part 4 Note: This tutorial builds on topics covered in part 1 , part 2 and part 3 . It is recommended that you begin there. This part of the tutorial will show how to use salt&#39;s file_roots to set up a workflow in which states can be \"promoted\" from dev, to QA, to production. Sal...",""],
["topics/tutorials/states_pt5.html","States Tutorial, Part 5 - Orchestration with Salt","States Tutorial, Part 5 - Orchestration with Salt Note: This tutorial builds on some of the topics covered in the earlier States Walkthrough pages. It is recommended to start with Part 1 if you are not familiar with how to use states. Orchestration is accomplished in salt primarily through the O...",""],
["topics/tutorials/syslog_ng-state-usage.html","Syslog-ng usage","Syslog-ng usage Overview Syslog_ng state module is for generating syslog-ng configurations. You can do the following things: generate syslog-ng configuration from YAML, use non-YAML configuration, start, stop or reload syslog-ng. There is also an execution module, which can check the syntax of t...",""],
["topics/tutorials/walkthrough.html","SaltStack Walk-through","SaltStack Walk-through Note: Welcome to SaltStack! I am excited that you are interested in Salt and starting down the path to better infrastructure management. I developed (and am continuing to develop) Salt with the goal of making the best software available to manage computers of almost any ki...",""],
["topics/tutorials/walkthrough_macosx.html","The MacOS X (Maverick) Developer Step By Step Guide To Salt Installation","The MacOS X (Maverick) Developer Step By Step Guide To Salt Installation This document provides a step-by-step guide to installing a Salt cluster consisting of one master, and one minion running on a local VM hosted on Mac OS X. Note: This guide is aimed at developers who wish to run Salt in a v...",""],
["topics/virt/disk.html","Virtual Machine Disk Profiles","Virtual Machine Disk Profiles Salt Virt allows for the disks created for deployed virtual machines to be finely configured. The configuration is a simple data structure which is read from the config.option function, meaning that the configuration can be stored in the minion config file, the mast...",""],
["topics/virt/nic.html","Virtual Machine Network Profiles","Virtual Machine Network Profiles Salt Virt allows for the network devices created for deployed virtual machines to be finely configured. The configuration is a simple data structure which is read from the config.option function, meaning that the configuration can be stored in the minion config f...",""],
["topics/windows/windows-package-manager.html","Windows Software Repository","Windows Software Repository The Salt Windows Software Repository provides a package manager and software repository similar to what is provided by yum and apt on Linux. It permits the installation of software using the installers on remote windows machines. In many senses, the operation is simil...",""],
["topics/windows/windows-specific-behavior.html","Windows-specific Behaviour","Windows-specific Behaviour Salt is capable of managing Windows systems, however due to various differences between the operating systems, there are some things you need to keep in mind. This document will contain any quirks that apply across Salt or generally across multiple module functions. An...",""],
["user.html","SaltStack Enterprise Help","Table of Contents SaltStack Enterprise Web Console System Architecture Database Web Application Using SaltStack Enterprise Web Console View Minions Jobs Run an Execution Module Apply a State Start a Salt Runner Manage Jobs Targets View Reports View Masters Manage Masters Manage User Accounts Dep...",""]];
